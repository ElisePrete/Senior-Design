[{"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/index.js":"1","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/reportWebVitals.js":"2","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/App.js":"3","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/store.js":"4","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/rootReducer.js":"5","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actions.js":"6","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/reducer.js":"7","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actionTypes.js":"8","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Chatbot.js":"9","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js":"10","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js":"11","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MessageParser.js":"12","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/GetStarted/GetStarted.js":"13","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/Other.js":"14","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/InitialOptions/InitialOptions.js":"15","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MoreOptions/MoreOptions.js":"16","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/OtherMore.js":"17","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js":"18","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocGrid/DocGrid.js":"19","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/HomePage/Home.js":"20","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocumentPage/Document.js":"21","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocOptions/DocOptions.js":"22","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Rephrase.js":"23","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocTable/DocTable.js":"24","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/GetStarted/GetStarted.js":"25"},{"size":636,"mtime":1649004786359,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1649004786391,"results":"28","hashOfConfig":"27"},{"size":480,"mtime":1649004785735,"results":"29","hashOfConfig":"27"},{"size":397,"mtime":1649004786391,"results":"30","hashOfConfig":"27"},{"size":229,"mtime":1649004786387,"results":"31","hashOfConfig":"27"},{"size":2372,"mtime":1649004786367,"results":"32","hashOfConfig":"27"},{"size":874,"mtime":1649004786371,"results":"33","hashOfConfig":"27"},{"size":159,"mtime":1649004786367,"results":"34","hashOfConfig":"27"},{"size":2447,"mtime":1650125606611,"results":"35","hashOfConfig":"27"},{"size":4028,"mtime":1650134858772,"results":"36","hashOfConfig":"27"},{"size":3956,"mtime":1650169157764,"results":"37","hashOfConfig":"27"},{"size":2174,"mtime":1650157763112,"results":"38","hashOfConfig":"27"},{"size":2036,"mtime":1650400807058,"results":"39","hashOfConfig":"27"},{"size":1481,"mtime":1649004786067,"results":"40","hashOfConfig":"27"},{"size":899,"mtime":1650134828332,"results":"41","hashOfConfig":"27"},{"size":1255,"mtime":1650141229103,"results":"42","hashOfConfig":"27"},{"size":695,"mtime":1648236794000,"results":"43","hashOfConfig":"44"},{"size":1339,"mtime":1650400525490,"results":"45","hashOfConfig":"27"},{"size":790,"mtime":1649004786215,"results":"46","hashOfConfig":"27"},{"size":1314,"mtime":1650167030782,"results":"47","hashOfConfig":"27"},{"size":1109,"mtime":1649004786219,"results":"48","hashOfConfig":"27"},{"size":644,"mtime":1650141835413,"results":"49","hashOfConfig":"27"},{"size":2,"mtime":1649004786151,"results":"50","hashOfConfig":"27"},{"size":2369,"mtime":1650163537096,"results":"51","hashOfConfig":"27"},{"size":2394,"mtime":1650168580957,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"15sqpi5",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"191ikqs",{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"55"},"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/index.js",[],["117","118"],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/reportWebVitals.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/App.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/store.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/rootReducer.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actions.js",["119"],"import * as types from \"./actionTypes\"\nimport axios from \"axios\";\n//axios allows a user to make http request through their browser\nvar API = window.location.host //\"http://127.0.0.1:5000\"\n//talk to model through functions on this page\n\n//for local or remote differentiation\n//console.log(\"API:\",API)\nif (API == 'localhost:3000') {\n    API = 'http://127.0.0.1:5000'\n}\nelse {\n    API = ''\n}\n\n/*\n*** to connect a new api call: ***\n--make a unique action type in actionTypes\n--make a sister function utilizing that actionType here\n--develop a case for that actionType in reducer */\n\nconst getQuestions = (objs) => (\n    {\n    type: types.GET_QS,\n    payload:objs\n});\n\nconst getQuestion = (obj) => (\n    {\n    type: types.GET_SINGLE_Q,\n    payload:obj\n});\n\nconst getDocuments = (docs) => (\n    {\n    type: types.GET_DOCS,\n    payload:docs\n});\n\nconst getDocument = (doc) => (\n    {\n    type: types.GET_SINGLE_DOC,\n    payload:doc\n});\n\n\nexport const loadQuestions = () => {\n    console.log(\"in loadqs\")\n    return function(dispatch) {\n        axios.get(`${API}/api/Questions`)\n        .then((resp) =>  dispatch(getQuestions(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}\nexport const loadQuestion = ({InputQuestion,howMany}) => {\n    //InputQuestion = params['InputQuestion']\n    //howMany = params['howMany']\n    //,\"how many:\", InputQuestion[0['howMany']\n    //console.log(\"in loadquestion:\", InputQuestion,\"how many\",howMany)\n    return function(dispatch) {\n        axios.get(`${API}/api/Question`, { params:{\n            input:InputQuestion,\n            many:howMany}\n        })\n        .then((resp) =>  dispatch(getQuestion(resp.data)) )\n        .catch((err) => console.log(\"load question error:\", err))\n     }\n}\n\nexport const loadDocuments = ({InputQuestion}) => {\n    //console.log(\"actionjs:\",InputQuestion)\n    return function(dispatch) {\n        axios.get(`${API}/api/Documents`, { params:{\n            input:InputQuestion}\n        })\n        .then((resp) =>  dispatch(getDocuments(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}\n\nexport const loadDocument = ({docID}) => {\n    return function(dispatch) {\n        axios.get(`${API}/api/Document`, { params:{\n            input:docID}\n        })\n        .then((resp) =>  dispatch(getDocument(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/reducer.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actionTypes.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Chatbot.js",["120","121","122","123","124","125","126"],"import './Chatbot.css'\nimport React, {useState} from \"react\";\nimport Chatbot from \"react-chatbot-kit\";\nimport 'react-chatbot-kit/build/main.css'\nimport config from \"./chatbotConfig\";\nimport MessageParser from \"./MessageParser\"\nimport ActionProvider from \"./ActionProvider\";\nimport Rephrase from \"./Rephrase\"\n/*Chatbot UI component*/\nfunction CBot() {\n  //const [showBot, toggleBot] = useState(false);\n  var chat_messages = []\n  const [showBot, toggleBot] = useState(false);\n // const [botHTML, setHTML] = useState({})\n  function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n  }\n /* async function saveMessages(messages, tmlS)  {\n    console.log(\"messages:\", messages, \"tml:\", tmlS)\n    await delay(1000);\n    const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")\n    if (html[0] == undefined) { console.log(\"bouncinsm,\", html); return}\n    console.log(\"saved:\",html[0])\n    localStorage.setItem('chat_messages', html[0].innerHTML)\n  };\n  async function loadMessages() {\n   // await delay(1000);\n    const parsed = localStorage.getItem('chat_messages')\n    console.log(\"in storage:\", parsed)\n    const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")\n    if (html[0] == undefined) {\n      console.log(\"h LM:\",html)\n      return parsed\n    }\n    //document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")[0].innerHTML = parsed\n    return parsed\n  };*/\n  function saveMessages(messages, HTMLString) {\n    //var messages = \"m\" ; var HTMLString = \"\"\n    console.log(\"SM mess:\",messages,\"html:\", HTMLString); \n   \n    localStorage.setItem('chat_messages', HTMLString[0].innerHTML);\n  };\n  const loadMessages = () => {\n    const messages = localStorage.getItem('chat_messages')\n    if (messages == null) {\n      return\n    }\n    console.log(\"LM mess:\",messages);\n   // document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\").innerHTML = messages[0].innerHTML\n    return messages;  };\n  return (\n    <div  className=\"CBot\">\n     {true && (<Chatbot\n     headerText=' '\n       config={config}\n       actionProvider={ActionProvider}\n       //messageHistory={loadMessages()}\n       messageParser={MessageParser}\n       //saveMessages={saveMessages}  //<button onClick={() => toggleBot((prev) => !prev)}>Bot</button>\n       //runInitialMessagesWithHistory={true}\n      />)}\n      \n    </div>\n  );\n}\n\n\nexport default CBot;","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js",["127","128"],"\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport InitialOptions from './InitialOptions/InitialOptions'\nimport MoreOptions from \"./MoreOptions/MoreOptions\";\nimport DocOptions from \"./DocOptions/DocOptions\";\nimport Other from './OtherQandA/Other'\nimport DocSearch from './DocSearch/DocSearch'\nimport GetStarted from './GetStarted/GetStarted'\n/*\nimport Overview from \"../components/widgets/Overview/Overview\";\nimport MessageParser from \"../components/widgets/MessageParser/MessageParser\";\n/import ActionProviderDocs from \"../components/widgets/ActionProvider/ActionProviderDocs\";\n*/\nconst botName = \"DocsBot\";\n/*Configuration for Chatbot*/\nconst config = {\n  /*'State' are the properties for the Chatbot. If a Chatbot \n  were a classtype‚ these would be its properties */\n  state: {\n    DocumentKeywords:[], //Search terms for document\n    InputQuestion:\"\", //search string for other questions\n    DocumentSearch:-1, //-1 = untouched | 0 = false | 1 = true\n    howManyQs:0, //either 1 or 4 depending on user satisfaction\n    OtherOptions:false //'rephrase' 'yes' 'no' are important in this case\n  },\n  initialMessages: [\n    createChatBotMessage(\"Welcome To Dfind!\", {widget:\"GetStarted\"}),\n    createChatBotMessage(\n      `How can I help you today?`, {\n         widget:\"InitialOptions\",\n      }\n    )],\n  widgets: [ //registering components inside of the chatbot-kit\n    { /*Function which grabs a question from mongo*/\n      widgetName: \"Other\",\n      widgetFunc: (props) => <Other{...props} /> ,\n      mapStateToProps: [\"InputQuestion\",\"howManyQs\"],\n\n    },\n    { /*Function which grabs a Docs from mongo*/\n      widgetName: \"DocSearch\",\n      widgetFunc: (props) => <DocSearch{...props} /> ,\n      mapStateToProps: [\"InputQuestion\"],\n\n    },\n    { /*The first buttons spawned in the chat*/\n      widgetName: \"InitialOptions\",\n      widgetFunc: (props) => <InitialOptions{...props} /> \n    },\n    { /*buttons presented after claims results.*/\n      widgetName:\"MoreOptions\",\n      widgetFunc: (props) => <MoreOptions{...props} />,\n      mapStateToProps: [\"howManyQs\"],\n    },\n    { /*buttons presented after doc results.*/\n    widgetName:\"DocOptions\",\n    widgetFunc: (props) => <DocOptions{...props} />,\n   // mapStateToProps: [\"howManyQs\"],\n  },\n  { /*buttons presented after claims results.*/\n  widgetName:\"GetStarted\",\n  widgetFunc: (props) => <GetStarted{...props} />,\n  mapStateToProps: [\"DocumentSearch\"],\n},\n   /*Example: (don't delete)\n    {\n      widgetName: \"Quiz\",\n      widgetFunc: (props) => <Quiz{...props} /> ,//getting access to actionProvider\n      props:{\n        questions:[\n          {question:\"What is a veteran?\",\n          answer:\"You are,silly.\",\n          id:1},\n          {question:\"What is a disability?\",\n          answer:\"major boo boo.\",\n          id:2}\n\n        ]\n        //list of questions in this format:\n        \n      }\n    }*/,\n    \n  ]\n};\n   /*\n   potential future configurations:\n   \n   botName: botName,\n  lang: \"no\",\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#5ccc9d\",\n    },\n  },\n  initialMessages: [\n    createChatBotMessage(\n      `Hi I'm ${botName}. I’m here to help you explain how I work.`\n    ),\n    createChatBotMessage(\n      \"Here's a quick overview over what I need to function. ask me about the different parts to dive deeper.\",\n      {\n        withAvatar: false,\n        delay: 500,\n        widget: \"overview\",\n      }\n    ),\n  ],\n  state: {\n    gist: \"\",\n  },\n  customComponents: {},\n widgets: [\n    {\n      widgetName: \"overview\",\n      widgetFunc: (props) => <Overview {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n    {\n      widgetName: \"messageParser\",\n      widgetFunc: (props) => <MessageParser {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n   {\n      widgetName: \"actionProviderDocs\",\n      widgetFunc: (props) => <ActionProviderDocs {...props} />,\n      mapStateToProps: [\"gist\"],\n    }\n  ],*/\n\nexport default config;","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js",["129","130","131"],"import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState  = setStateFunc;\n    //this.stateRef = {docs:false};\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  /*getStateRefDocs = () => {\n    return //this.stateRef.docs\n  }\n  setStateRefDocs = (bool) => {\n    //this.stateRef.docs = bool\n  }*/\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n     this.setState((state) => ({\n      ...state,\n      InputQuestion:question,\n      DocumentSearch:true\n     }))\n    //this.setStateRefDocs(true)\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Type to search for more documents or...\" , { widget:\"DocOptions\" })\n    this.addMessageToState(message)\n    \n  }\n  //function to send example quesiton to chatbot\n  handleExampleQ = (question, index) => {\n    //if index is event, it is a document dependent question. otherwise, it is 'other'\n    const tempmessage = \"Let me find the answer to '\" + String(question) + \"'...\"\n    const message =  this.createChatBotMessage(tempmessage)\n    this.addMessageToState(message)\n    if (index % 2 == 0) {\n      this.handleDocuments(question)\n    }\n    else {\n      this.handleOther(question,1)\n    }\n    \n    \n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  //Prefaces Document Search\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:\"setup\",\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widget‚ it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion:question,\n      howManyQs:num\n     })\n    )\n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MessageParser.js",["132","133","134","135"],"//class which parses through user input in the chatbot\n//'The simplest version is to check for keywords with javascript .includes()'\nclass MessageParser {\n  //we inject chatbot properties (state) + the actionProvider (chatbot class funcs) into message parser\n    constructor(actionProvider, state) {\n      this.actionProvider = actionProvider;\n      this.state = state;\n    }\n    //when a user types and hits search‚ parse is called\n    parse(message) {\n      const lowercase = message.toLowerCase()\n\n      if (lowercase.includes('hello')) {\n        this.actionProvider.greet();\n      }\n      if (this.state.DocumentSearch == -1){ //if user doesn't hasn't chosen 'other' or 'doc'\n        if (lowercase.includes('other')) {\n          this.state.howManyQs =0\n          this.state.DocumentSearch = 0\n          this.actionProvider.handleOtherSetup() \n        }\n        else if (lowercase.includes('document')) {\n          this.state.DocumentSearch = 1\n          this.actionProvider.handleDocSetup() \n        }\n        else {\n          this.actionProvider.handleConfusion()\n        }\n      }\n      else if (this.state.DocumentSearch == \"setup\" || this.state.DocumentSearch == true) { //user is searching for documents\n        this.actionProvider.handleDocuments(lowercase)\n      }\n      else {/* user is searching something document-independent*/\n        if (this.state.OtherOptions) {\n          if (lowercase.includes('yes')) {\n            this.actionProvider.handleInitialOptions()\n          }\n          else if (lowercase.includes('more')) {\n            this.actionProvider.handleOther(lowercase,4);\n          }\n          else if (lowercase.includes('no') || lowercase.includes('rephrase') ) {\n            this.actionProvider.handleOtherSetup(lowercase);\n          }\n          else {\n            this.actionProvider.handleConfusion()\n          }\n          return\n        }\n        if (this.state.howManyQs == 0) {\n          this.actionProvider.handleOther(lowercase,1);\n        }\n        else {\n          this.actionProvider.handleOther(lowercase,4);\n        }\n        this.state.DocumentSearch = -1\n      }\n      \n\n      \n\n    }\n\n   \n  }\n  \n  export default MessageParser;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/GetStarted/GetStarted.js",["136","137","138","139","140","141","142","143","144"],"import './Welcome.css'\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadQuestion,loadQuestions } from '../../model/actions';\nimport {Table, Container, Row, Col} from \"react-bootstrap\"\n\n/**Eventually‚ this will be the getting started box.\n * Currently‚ it just presents 10 q's from the db.\n * this lets us know that the db is up and running.\n */\nfunction GetStarted() {\n   /* const dispatch = useDispatch();\n    var {objs} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadQuestions())\n    }, [])\n    console.log(\"objs in getSTarted:\", objs)\n    */\n    return (\n        <div className='welcome'>\n            Welcome to <b>D.Find</b>: a premier tool for discovering relevant claims files and their summaries, in addition to answering typical questions concerning the disability claims process. To begin, click or type responses to our Chatbot, or select an example question below.\n\n        </div>\n       /*/Some example questions include- <i>How do I file a disability claim online?</i>, <i>What does 'Remanded' mean?</i>, and <i>Where can I find a lawyer?</i>\n\n        <><Container className='getStarted'>\n                <Row>\n                    <Col nd={8}>\n                        <Table bordered hover>\n                            <thead>\n                            <tr>\n                                <th>Example Questions:</th>\n                            </tr>\n                            </thead>\n                            {objs && objs.map((item,index) => (\n                                <tbody key={index}>\n                                    <tr>\n                                        <td><button onClick={callChatbot}>{item.question}</button></td>\n                                    </tr>\n                                    </tbody>\n                            ))}\n                        </Table>\n                    </Col>\n\n                </Row>\n            </Container>\n        </>*/\n\n    )\n}\n\nexport default GetStarted\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/Other.js",["145","146","147","148","149","150"],"import { loadQuestion,loadQuestions } from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {Link} from \"react-router-dom\";\nimport \"./Other.css\"\n\n/*React Widget which shows document-independent Results. Currently wonky:\n- 'More results' widget changes all previous result components\n- 'More results' also display original first result\nimport OtherMore from \"./OtherMore.js\" <- OtherMore component fixes the latter but not the former. removed atm */\nconst Other = (params) => {\n    var InputQuestion = params['InputQuestion']\n    var howMany = params['howManyQs']\n\n    const dispatch = useDispatch();\n    var {obj} = useSelector(state => state.data)\n    \n    useEffect(() => {\n        dispatch(loadQuestion({InputQuestion,howMany}));\n        //console.log(\"obj:\",obj)\n    }, [])\n    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody>No results found, please rephrase</tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n   /* if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n    return (\n        <>{obj && Object.keys(obj).map((item,i) => (\n            <tbody key={i} className=\"link\">\n                <a href={obj[item].link}><b>{obj[item].question}</b></a><br/>\n            </tbody>\n        ))} </>\n    )  \n}\n\n\nexport default Other;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/InitialOptions/InitialOptions.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MoreOptions/MoreOptions.js",["151"],"/* React Widget (buttons) which appears after a document-independent question was asked.\n   - 'Yes': go back to initial options\n   - 'Rephrase': ask another document-independent question\n   - 'More Results': Results shift from 1 to 4\n   */\nconst MoreOptions = (props) => {\n    //console.log(\"m.opt:\",props['howManyQs'])\n    var optionsM = [\n        {\n            text:\"Yes, I would like to ask something else.\",\n            handler:props.actionProvider.handleInitialOptions,\n            id:1\n        },\n        {\n            text:\"No, I would like to rephrase my question.\",\n            handler:props.actionProvider.handleOtherSetup,\n            id:2\n        },\n        {\n            text:\"No, I would like to see More Results\",\n            handler:props.actionProvider.handleOther,\n            id:3\n        }\n        \n    ];\n    //rn up to 4 new results are supported. can be changed\n    if (props['howManyQs'] == 4) {\n        optionsM = optionsM.slice(0,2)\n    }\n    const buttonsMarkup = optionsM.map((option) => (\n        <button key={option.id} onClick={option.handler} className=\"option-button\">\n            {option.text}\n        </button>\n\n    ));\n\n    return <div className=\"options-container\">{buttonsMarkup}</div>;\n\n}\n\nexport default MoreOptions","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/OtherMore.js",[],["152","153"],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js",["154","155","156","157"],"import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect, getState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nconst Count = (count) => {\n   // var {docs} = useSelector(state => state.data)\n    //count = docs.length\n    return ( <> <b className='results'>{count} docs found</b> </> )\n}\n\n\nconst DocSearch = React.memo((props) => {\n    const [count, setCount] = React.useState(0);\n    //const [next, setNext]  = React.useState(true);\n    console.log(\"prps ds:\", props)\n    var InputQuestion = props['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    \n     useEffect( () => {\n\n      dispatch(loadDocuments({InputQuestion}))\n      //  await dispatch(loadDocuments({InputQuestion})).then(() => setCount(docs.length) );\n       \n         //One update too late\n    }, []) \n   // while(docs.length == count) {console.log(\"counte:\", count, \"l:\", docs.length)}\n  //  setCount(docs.length)\n    return Count(docs.length)\n    \n   // const count = docs.length\n    //return Count(count)\n   // setCount(docs.length)\n    \n})\n\n\nexport default DocSearch;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocGrid/DocGrid.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/HomePage/Home.js",["158","159","160","161"],"import  GetStarted from '../GetStarted/GetStarted'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CBot from '../Chatbot/Chatbot';\nimport { MDBCol,MDBContainer } from 'mdb-react-ui-kit';\nimport {Navbar} from \"react-bootstrap\"\nimport DGrid from '../DocGrid/DocGrid';\nimport DocTable, {showDocs} from '../DocTable/DocTable';\nimport {useState} from 'react';\nimport { useSelector } from 'react-redux'\nimport \"./Home.css\"\nimport logo from \"./logo.png\"\n//import Chatbot from '../ChatbotClone/react-chatbot-kit-master/src/index.ts'\nexport default function Home() {\n\n    var {docs} = useSelector(state => state.data)\n    /*\n<Navbar bg=\"primary\" variant=\"light\" className=\"justify-content-center\">\n              <h1 style={{ color: \"white\",flexDirection:\"row\",flexWrap: \"wrap\", }}> D.Find </h1>\n        </Navbar>\n    */\n    return (\n      <div className=\"App\">\n        <img src={logo} alt=\"ScottySwap lives on!\" className='logo'></img>\n\n        <MDBContainer  className=\"Home\">\n        <MDBCol >\n            <CBot/>\n          </MDBCol>\n          {(docs.length > 0) ? <DocTable/> :  <GetStarted/>}\n          \n        </MDBContainer>\n      </div>\n    );\n  }\n\n   /* {(() => {\n            if (showDocs) { return <DocTable/>\n            }\n            else {\n             return  <GetStarted/>\n            }\n          })}*/","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocumentPage/Document.js",["162"],"\nimport \"./Document.css\"\nimport { useLocation,useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport React, {useEffect} from 'react'\nimport { loadDocument} from '../../model/actions';\n/** This is the seperate page where Documents are presented\n * docID-> doc._id\n * location = \n */\nexport default function Document() {\n  const { docID } = useParams();\n  const location = useLocation() \n  const {docSummary} = location.state\n    \n    //get summary\n    //get full doc\n    var docFull = \"\"\n    const dispatch = useDispatch();\n    var {doc} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadDocument({docID}));\n        /*if (doc) {\n          console.log(\"DOC in Document.js:\",doc['fullText'])\n        }*/\n        \n  \n    }, [docFull]) //.then(response => console.log(\"response!:\",response))\n    docFull = doc['fullText']\n    return ( \n      <div className=\"DocPage\">\n          <h1>{docID}</h1>\n          <div className=\"DocSummary Both\">{docSummary}</div>\n          <span className=\"FullText Both\">{docFull}</span>\n      </div>\n  \n  )\n\n    \n}","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocOptions/DocOptions.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Rephrase.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocTable/DocTable.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/GetStarted/GetStarted.js",["163","164","165","166","167","168","169"],"import './GetStarted.css'\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadQuestion,loadQuestions } from '../../../model/actions';\nimport {Table, Container, Row, Col} from \"react-bootstrap\"\n/*///Everything below is to make it draggable? Might do that -> https://www.npmjs.com/package/react-draggable\n// ES6\nimport Draggable from 'react-draggable'; // The default\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\nimport Draggable, {DraggableCore} from 'react-draggable'; // Both at the same time\n\n// CommonJS\nlet Draggable = require('react-draggable');\nlet DraggableCore = Draggable.DraggableCore;*/\n\n const objs = [\"Cases concerning the respiratory system.\",\n \"What is the easiest way to file a claim?\",\n \"Remanded docs about raised blood pressure\",\n \"How do I appeal a denied disability claim?\",\n \"Claims about Post-traumatic Stress Disorder and Depression.\",\n \"How Do Disability Ratings Work for Veterans Benefits?\",\n \"Remanded claims about brain damage.\"]\n\nconst hello = (item) => { //test function. ignore\n    console.log(item)\n}\n\nconst GetStarted = (props) => {\n    const active = props.DocumentSearch;\n    console.log(\"is it true!?:\", active)\n\n    \n    /*const dispatch = useDispatch();\n    //var objs;\n    useEffect(() => {\n        dispatch(loadQuestions())\n    }, [])\n    console.log(\"objs in getSTarted:\", objs)\n    */\n    return (\n        <><Container className={`${(active == true) ? \"invisible\": \"getStarted\"}`}>\n                <Row>\n                    <Col nd={8}>\n                        <Table bordered hover>\n                            <thead>\n                            <tr>\n                                <th className='title'>Example Questions:</th>\n                            </tr>\n                            </thead>\n                            {objs.map((item,index) => (\n                                <tbody >\n                                    <tr>\n                                        <td><button className=\"gsButton\" onClick={() => props.actionProvider.handleExampleQ(item,index)}>{item}</button></td>\n                                    </tr>\n                                    </tbody>\n                            ))}\n                        </Table>\n                    </Col>\n\n                </Row>\n            </Container>\n        </>\n\n    )\n}\n\n\n\nexport default GetStarted\n",{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":9,"column":9,"nodeType":"176","messageId":"177","endLine":9,"endColumn":11},{"ruleId":"178","severity":1,"message":"179","line":8,"column":8,"nodeType":"180","messageId":"181","endLine":8,"endColumn":16},{"ruleId":"178","severity":1,"message":"182","line":12,"column":7,"nodeType":"180","messageId":"181","endLine":12,"endColumn":20},{"ruleId":"178","severity":1,"message":"183","line":13,"column":10,"nodeType":"180","messageId":"181","endLine":13,"endColumn":17},{"ruleId":"178","severity":1,"message":"184","line":13,"column":19,"nodeType":"180","messageId":"181","endLine":13,"endColumn":28},{"ruleId":"178","severity":1,"message":"185","line":15,"column":12,"nodeType":"180","messageId":"181","endLine":15,"endColumn":17},{"ruleId":"178","severity":1,"message":"186","line":38,"column":12,"nodeType":"180","messageId":"181","endLine":38,"endColumn":24},{"ruleId":"178","severity":1,"message":"187","line":44,"column":9,"nodeType":"180","messageId":"181","endLine":44,"endColumn":21},{"ruleId":"178","severity":1,"message":"188","line":15,"column":7,"nodeType":"180","messageId":"181","endLine":15,"endColumn":14},{"ruleId":"189","severity":1,"message":"190","line":34,"column":12,"nodeType":"191","messageId":"192","endLine":85,"endColumn":4},{"ruleId":"178","severity":1,"message":"193","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"194","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":19},{"ruleId":"174","severity":1,"message":"175","line":71,"column":19,"nodeType":"176","messageId":"177","endLine":71,"endColumn":21},{"ruleId":"174","severity":1,"message":"175","line":16,"column":37,"nodeType":"176","messageId":"177","endLine":16,"endColumn":39},{"ruleId":"174","severity":1,"message":"175","line":30,"column":42,"nodeType":"176","messageId":"177","endLine":30,"endColumn":44},{"ruleId":"174","severity":1,"message":"175","line":30,"column":82,"nodeType":"176","messageId":"177","endLine":30,"endColumn":84},{"ruleId":"174","severity":1,"message":"175","line":49,"column":34,"nodeType":"176","messageId":"177","endLine":49,"endColumn":36},{"ruleId":"178","severity":1,"message":"195","line":2,"column":16,"nodeType":"180","messageId":"181","endLine":2,"endColumn":25},{"ruleId":"178","severity":1,"message":"196","line":3,"column":10,"nodeType":"180","messageId":"181","endLine":3,"endColumn":21},{"ruleId":"178","severity":1,"message":"197","line":3,"column":23,"nodeType":"180","messageId":"181","endLine":3,"endColumn":34},{"ruleId":"178","severity":1,"message":"198","line":4,"column":10,"nodeType":"180","messageId":"181","endLine":4,"endColumn":22},{"ruleId":"178","severity":1,"message":"199","line":4,"column":23,"nodeType":"180","messageId":"181","endLine":4,"endColumn":36},{"ruleId":"178","severity":1,"message":"200","line":5,"column":9,"nodeType":"180","messageId":"181","endLine":5,"endColumn":14},{"ruleId":"178","severity":1,"message":"201","line":5,"column":16,"nodeType":"180","messageId":"181","endLine":5,"endColumn":25},{"ruleId":"178","severity":1,"message":"202","line":5,"column":27,"nodeType":"180","messageId":"181","endLine":5,"endColumn":30},{"ruleId":"178","severity":1,"message":"203","line":5,"column":32,"nodeType":"180","messageId":"181","endLine":5,"endColumn":35},{"ruleId":"178","severity":1,"message":"199","line":1,"column":23,"nodeType":"180","messageId":"181","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"204","line":2,"column":26,"nodeType":"180","messageId":"181","endLine":2,"endColumn":34},{"ruleId":"178","severity":1,"message":"205","line":4,"column":9,"nodeType":"180","messageId":"181","endLine":4,"endColumn":13},{"ruleId":"206","severity":1,"message":"207","line":21,"column":8,"nodeType":"191","endLine":21,"endColumn":10,"suggestions":"208"},{"ruleId":"174","severity":1,"message":"175","line":22,"column":23,"nodeType":"176","messageId":"177","endLine":22,"endColumn":25},{"ruleId":"174","severity":1,"message":"175","line":22,"column":47,"nodeType":"176","messageId":"177","endLine":22,"endColumn":49},{"ruleId":"174","severity":1,"message":"175","line":27,"column":28,"nodeType":"176","messageId":"177","endLine":27,"endColumn":30},{"ruleId":"170","replacedBy":"209"},{"ruleId":"172","replacedBy":"210"},{"ruleId":"178","severity":1,"message":"211","line":2,"column":27,"nodeType":"180","messageId":"181","endLine":2,"endColumn":35},{"ruleId":"178","severity":1,"message":"212","line":16,"column":12,"nodeType":"180","messageId":"181","endLine":16,"endColumn":17},{"ruleId":"178","severity":1,"message":"213","line":16,"column":19,"nodeType":"180","messageId":"181","endLine":16,"endColumn":27},{"ruleId":"206","severity":1,"message":"214","line":30,"column":8,"nodeType":"191","endLine":30,"endColumn":10,"suggestions":"215"},{"ruleId":"178","severity":1,"message":"216","line":5,"column":9,"nodeType":"180","messageId":"181","endLine":5,"endColumn":15},{"ruleId":"178","severity":1,"message":"217","line":6,"column":8,"nodeType":"180","messageId":"181","endLine":6,"endColumn":13},{"ruleId":"178","severity":1,"message":"218","line":7,"column":19,"nodeType":"180","messageId":"181","endLine":7,"endColumn":27},{"ruleId":"178","severity":1,"message":"204","line":8,"column":9,"nodeType":"180","messageId":"181","endLine":8,"endColumn":17},{"ruleId":"206","severity":1,"message":"219","line":28,"column":8,"nodeType":"191","endLine":28,"endColumn":17,"suggestions":"220"},{"ruleId":"178","severity":1,"message":"195","line":2,"column":16,"nodeType":"180","messageId":"181","endLine":2,"endColumn":25},{"ruleId":"178","severity":1,"message":"196","line":3,"column":10,"nodeType":"180","messageId":"181","endLine":3,"endColumn":21},{"ruleId":"178","severity":1,"message":"197","line":3,"column":23,"nodeType":"180","messageId":"181","endLine":3,"endColumn":34},{"ruleId":"178","severity":1,"message":"198","line":4,"column":10,"nodeType":"180","messageId":"181","endLine":4,"endColumn":22},{"ruleId":"178","severity":1,"message":"199","line":4,"column":23,"nodeType":"180","messageId":"181","endLine":4,"endColumn":36},{"ruleId":"178","severity":1,"message":"221","line":24,"column":7,"nodeType":"180","messageId":"181","endLine":24,"endColumn":12},{"ruleId":"174","severity":1,"message":"175","line":41,"column":44,"nodeType":"176","messageId":"177","endLine":41,"endColumn":46},"no-native-reassign",["222"],"no-negated-in-lhs",["223"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Rephrase' is defined but never used.","Identifier","unusedVar","'chat_messages' is assigned a value but never used.","'showBot' is assigned a value but never used.","'toggleBot' is assigned a value but never used.","'delay' is defined but never used.","'saveMessages' is defined but never used.","'loadMessages' is assigned a value but never used.","'botName' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'Other' is defined but never used.","'MoreOptions' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'loadQuestion' is defined but never used.","'loadQuestions' is defined but never used.","'Table' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'InputQuestion', 'dispatch', and 'howMany'. Either include them or remove the dependency array.",["224"],["222"],["223"],"'getState' is defined but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'InputQuestion' and 'dispatch'. Either include them or remove the dependency array.",["225"],"'Navbar' is defined but never used.","'DGrid' is defined but never used.","'showDocs' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'docID'. Either include them or remove the dependency array.",["226"],"'hello' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [InputQuestion, dispatch, howMany]",{"range":"233","text":"234"},"Update the dependencies array to be: [InputQuestion, dispatch]",{"range":"235","text":"236"},"Update the dependencies array to be: [dispatch, docFull, docID]",{"range":"237","text":"238"},[861,863],"[InputQuestion, dispatch, howMany]",[1064,1066],"[InputQuestion, dispatch]",[791,800],"[dispatch, docFull, docID]"]