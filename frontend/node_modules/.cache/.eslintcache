[{"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/index.js":"1","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/reportWebVitals.js":"2","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/App.js":"3","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/store.js":"4","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/rootReducer.js":"5","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actions.js":"6","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/reducer.js":"7","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actionTypes.js":"8","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Chatbot.js":"9","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js":"10","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js":"11","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MessageParser.js":"12","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/GetStarted/GetStarted.js":"13","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/Other.js":"14","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/InitialOptions/InitialOptions.js":"15","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MoreOptions/MoreOptions.js":"16","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/OtherMore.js":"17","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js":"18","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocGrid/DocGrid.js":"19","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/HomePage/Home.js":"20","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocumentPage/Document.js":"21"},{"size":636,"mtime":1647656779710,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1647008718396,"results":"24","hashOfConfig":"23"},{"size":481,"mtime":1647704643123,"results":"25","hashOfConfig":"23"},{"size":397,"mtime":1647008718396,"results":"26","hashOfConfig":"23"},{"size":229,"mtime":1647008718396,"results":"27","hashOfConfig":"23"},{"size":2345,"mtime":1647657282126,"results":"28","hashOfConfig":"23"},{"size":813,"mtime":1647641591775,"results":"29","hashOfConfig":"23"},{"size":159,"mtime":1647009242056,"results":"30","hashOfConfig":"23"},{"size":508,"mtime":1647008718392,"results":"31","hashOfConfig":"23"},{"size":3818,"mtime":1647031518731,"results":"32","hashOfConfig":"23"},{"size":3491,"mtime":1647276260494,"results":"33","hashOfConfig":"23"},{"size":2120,"mtime":1647106783331,"results":"34","hashOfConfig":"23"},{"size":1650,"mtime":1647008718396,"results":"35","hashOfConfig":"23"},{"size":1494,"mtime":1647107889385,"results":"36","hashOfConfig":"23"},{"size":767,"mtime":1647028659291,"results":"37","hashOfConfig":"23"},{"size":1089,"mtime":1647008718392,"results":"38","hashOfConfig":"23"},{"size":695,"mtime":1647008718396,"results":"39","hashOfConfig":"23"},{"size":1170,"mtime":1647641118015,"results":"40","hashOfConfig":"23"},{"size":982,"mtime":1647704602547,"results":"41","hashOfConfig":"23"},{"size":778,"mtime":1647123496518,"results":"42","hashOfConfig":"23"},{"size":1190,"mtime":1647704652667,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"w8t15h",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/index.js",[],["95","96"],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/reportWebVitals.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/App.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/store.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/rootReducer.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actions.js",["97"],"import * as types from \"./actionTypes\"\nimport axios from \"axios\";\n//axios allows a user to make http request through their browser\nvar API = window.location.host //\"http://127.0.0.1:5000\"\n//talk to model through functions on this page\n\n//for local or remote differentiation\n//console.log(\"API:\",API)\nif (API == 'localhost:3000') {\n    API = 'http://127.0.0.1:5000'\n}\nelse {\n    API = ''\n}\n\n/*\n*** to connect a new api call: ***\n--make a unique action type in actionTypes\n--make a sister function utilizing that actionType here\n--develop a case for that actionType in reducer */\n\nconst getQuestions = (objs) => (\n    {\n    type: types.GET_QS,\n    payload:objs\n});\n\nconst getQuestion = (objs) => (\n    {\n    type: types.GET_SINGLE_Q,\n    payload:objs\n});\n\nconst getDocuments = (docs) => (\n    {\n    type: types.GET_DOCS,\n    payload:docs\n});\n\nconst getDocument = (doc) => (\n    {\n    type: types.GET_SINGLE_DOC,\n    payload:doc\n});\n\n\nexport const loadQuestions = () => {\n    return function(dispatch) {\n        axios.get(`${API}/api/Questions`)\n        .then((resp) =>  dispatch(getQuestions(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}\nexport const loadQuestion = ({InputQuestion,howMany}) => {\n    //InputQuestion = params['InputQuestion']\n    //howMany = params['howMany']\n    //,\"how many:\", InputQuestion[0['howMany']\n    //console.log(\"in loadquestion:\", InputQuestion,\"how many\",howMany)\n    return function(dispatch) {\n        axios.get(`${API}/api/Question`, { params:{\n            input:InputQuestion,\n            many:howMany}\n        })\n        .then((resp) =>  dispatch(getQuestion(resp.data)) )\n        .catch((err) => console.log(\"load question error:\", err))\n     }\n}\n\nexport const loadDocuments = ({InputQuestion}) => {\n    //console.log(\"actionjs:\",InputQuestion)\n    return function(dispatch) {\n        axios.get(`${API}/api/Documents`, { params:{\n            input:InputQuestion}\n        })\n        .then((resp) =>  dispatch(getDocuments(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}\n\nexport const loadDocument = ({docID}) => {\n    return function(dispatch) {\n        axios.get(`${API}/api/Document`, { params:{\n            input:docID}\n        })\n        .then((resp) =>  dispatch(getDocument(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/reducer.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actionTypes.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Chatbot.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js",["98","99"],"\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport InitialOptions from './InitialOptions/InitialOptions'\nimport MoreOptions from \"./MoreOptions/MoreOptions\";\nimport Other from './OtherQandA/Other'\nimport DocSearch from './DocSearch/DocSearch'\n/*\nimport Overview from \"../components/widgets/Overview/Overview\";\nimport MessageParser from \"../components/widgets/MessageParser/MessageParser\";\n/import ActionProviderDocs from \"../components/widgets/ActionProvider/ActionProviderDocs\";\n*/\nconst botName = \"DocsBot\";\n/*Configuration for Chatbot*/\nconst config = {\n  /*'State' are the properties for the Chatbot. If a Chatbot \n  were a classtype‚ these would be its properties */\n  state: {\n    DocumentKeywords:[], //Search terms for document\n    InputQuestion:\"\", //search string for other questions\n    DocumentSearch:-1, //-1 = untouched | 0 = false | 1 = true\n    howManyQs:0, //either 1 or 4 depending on user satisfaction\n    OtherOptions:false //'rephrase' 'yes' 'no' are important in this case\n  },\n  initialMessages: [\n    createChatBotMessage(\n      `Welcome to Dfind! What would you like to find?`, {\n        widget:\"InitialOptions\"\n      }\n    )],\n  widgets: [ //registering components inside of the chatbot-kit\n    { /*Function which grabs a question from mongo*/\n      widgetName: \"Other\",\n      widgetFunc: (props) => <Other{...props} /> ,\n      mapStateToProps: [\"InputQuestion\",\"howManyQs\"],\n\n    },\n    { /*Function which grabs a question from mongo*/\n      widgetName: \"DocSearch\",\n      widgetFunc: (props) => <DocSearch{...props} /> ,\n      mapStateToProps: [\"InputQuestion\"],\n\n    },\n    { /*The first buttons spawned in the chat*/\n      widgetName: \"InitialOptions\",\n      widgetFunc: (props) => <InitialOptions{...props} /> \n    },\n    { /*buttons presented after results.*/\n      widgetName:\"MoreOptions\",\n      widgetFunc: (props) => <MoreOptions{...props} />,\n      mapStateToProps: [\"howManyQs\"],\n    },\n /*   { //may make 'more results' a different widget so that they appear se[erate in the chatbot. either that or results appear outside the chatbot]\n      widgetName:\"MoreResutl\",\n      widgetFunc: (props) => <MoreOptions{...props} />,\n      mapStateToProps: [\"howManyQs\"],\n    },*/\n   /*Example: (don't delete)\n    {\n      widgetName: \"Quiz\",\n      widgetFunc: (props) => <Quiz{...props} /> ,//getting access to actionProvider\n      props:{\n        questions:[\n          {question:\"What is a veteran?\",\n          answer:\"You are,silly.\",\n          id:1},\n          {question:\"What is a disability?\",\n          answer:\"major boo boo.\",\n          id:2}\n\n        ]\n        //list of questions in this format:\n        \n      }\n    }*/,\n    \n  ]\n};\n   /*\n   potential future configurations:\n   \n   botName: botName,\n  lang: \"no\",\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#5ccc9d\",\n    },\n  },\n  initialMessages: [\n    createChatBotMessage(\n      `Hi I'm ${botName}. I’m here to help you explain how I work.`\n    ),\n    createChatBotMessage(\n      \"Here's a quick overview over what I need to function. ask me about the different parts to dive deeper.\",\n      {\n        withAvatar: false,\n        delay: 500,\n        widget: \"overview\",\n      }\n    ),\n  ],\n  state: {\n    gist: \"\",\n  },\n  customComponents: {},\n widgets: [\n    {\n      widgetName: \"overview\",\n      widgetFunc: (props) => <Overview {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n    {\n      widgetName: \"messageParser\",\n      widgetFunc: (props) => <MessageParser {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n   {\n      widgetName: \"actionProviderDocs\",\n      widgetFunc: (props) => <ActionProviderDocs {...props} />,\n      mapStateToProps: [\"gist\"],\n    }\n  ],*/\n\nexport default config;","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js",["100","101"],"import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n    /*createClientMessage,\n    stateRef\n    createCustomMessage,\n    ...rest*/\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    /*this.createClientMessage = createClientMessage;\n     this.stateRef = stateRef;\n    this.createCustomMessage = createCustomMessage;*/\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n    this.setState((state) => ({\n      ...state,\n     // OtherOptions:true,\n      InputQuestion:question\n     }))\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n   /* const message = this.createChatBotMessage(\"docs not supported atm\")\n    this.addMessageToState(message) //adds message to ui\n    this.handleInitialOptions() */\n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      DocumentSearch:true,\n      OtherOptions:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widget‚ it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion:state.InputQuestion +\" \" + question,\n      howManyQs:num\n     })\n    )\n   \n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MessageParser.js",["102","103","104"],"//class which parses through user input in the chatbot\n//'The simplest version is to check for keywords with javascript .includes()'\nclass MessageParser {\n  //we inject chatbot properties (state) + the actionProvider (chatbot class funcs) into message parser\n    constructor(actionProvider, state) {\n      this.actionProvider = actionProvider;\n      this.state = state;\n    }\n    //when a user types and hits search‚ parse is called\n    parse(message) {\n      const lowercase = message.toLowerCase()\n\n      if (lowercase.includes('hello')) {\n        this.actionProvider.greet();\n      }\n      if (this.state.DocumentSearch == -1){ //if user doesn't hasn't chosen 'other' or 'doc'\n        this.actionProvider.handleOtherSetup(lowercase);\n        if (lowercase.includes('other')) {\n          this.state.howManyQs =0\n          this.state.DocumentSearch = 0\n        }\n        else if (lowercase.includes('document')) {\n          this.state.DocumentSearch = 1\n          /* THIS IS TEMPORARY--- CHANGE LATER ---*/\n          //this.actionProvider.handleInitialOptions() \n        }\n      }\n      /* User is NOT searching for docs */\n      else if (this.state.DocumentSearch == false){\n        if (this.state.OtherOptions) {\n          if (lowercase.includes('yes')) {\n            this.actionProvider.handleInitialOptions()\n          }\n          else if (lowercase.includes('more')) {\n            this.actionProvider.handleOther(lowercase,4);\n          }\n          else if (lowercase.includes('no') || lowercase.includes('rephrase') ) {\n            this.actionProvider.handleOtherSetup(lowercase);\n          }\n          else {\n            this.actionProvider.handleConfusion()\n          }\n          return\n        }\n        if (this.state.howManyQs ==0) {\n          this.actionProvider.handleOther(lowercase,1);\n        }\n        else {\n          this.actionProvider.handleOther(lowercase,4);\n        }\n        \n        this.state.DocumentSearch = -1\n      }\n      else { //user is searching for documents\n        this.actionProvider.handleDocuments(lowercase)\n      }\n\n      \n\n    }\n\n   \n  }\n  \n  export default MessageParser;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/GetStarted/GetStarted.js",["105","106"],"import './GetStarted.css'\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadQuestion,loadQuestions } from '../../model/actions';\nimport {Table, Container, Row, Col} from \"react-bootstrap\"\n/**Eventually‚ this will be the getting started box.\n * Currently‚ it just presents 10 q's from the db.\n * this lets us know that the db is up and running.\n */\nfunction GetStarted() {\n    const dispatch = useDispatch();\n    const {objs} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadQuestions());\n    }, [])\n    return (\n        <><Container className='getStarted'>\n                <Row>\n                    <Col nd={8}>\n                        <Table bordered hover>\n                            <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Question</th>\n                                <th>Answer</th>\n                            </tr>\n                            </thead>\n                            {objs && objs.map((item,index) => (\n                                <tbody key={index}>\n                                    <tr>\n                                        <td>{index+1}</td>\n                                        <td>{item.question}</td>\n                                        <td>{item.answer}</td>\n                                    </tr>\n                                    </tbody>\n                            ))}\n                        </Table>\n                    </Col>\n\n                </Row>\n            </Container>\n        </>\n\n    )\n}\n\nexport default GetStarted\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/Other.js",["107","108","109","110","111","112"],"import { loadQuestion,loadQuestions } from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport \"./Other.css\"\nimport OtherMore from \"./OtherMore.js\"\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\nconst Other = (params) => {\n    //we call axios dispatch here\n    var InputQuestion = params['InputQuestion']\n    var howMany = params['howManyQs']\n    //console.log(\"Other | hm\",params)\n    const dispatch = useDispatch();\n    var {obj} = useSelector(state => state.data)\n    \n    useEffect(() => {\n        dispatch(loadQuestion({InputQuestion,howMany}));\n        //console.log(\"obj:\",obj)\n    }, [])\n    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n    if (howMany == 4) {\n        return OtherMore(obj)\n    }\n    //mapping requires key index for each entry\n    return (<>\n            {obj && Object.keys(obj).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{obj[item].question}</b></td>\n                        <td>{obj[item].link}</td>\n                    </tr>\n                </tbody>\n        ))}\n        \n     \n    </>)\n       \n}\n\n\nexport default Other;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/InitialOptions/InitialOptions.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MoreOptions/MoreOptions.js",["113"],"/*React UI component of those 'other' or 'doc' buttons which appear at the beginning.\nconnects each button to their respective function/widget*/\nconst MoreOptions = (props) => {\n    //console.log(\"m.opt:\",props['howManyQs'])\n    var optionsM = [\n        {\n            text:\"Yes\",\n            handler:props.actionProvider.handleInitialOptions,\n            id:1\n        },\n        {\n            text:\"No, Rephrase question.\",\n            handler:props.actionProvider.handleOtherSetup,\n            id:2\n        },\n        {\n            text:\"No, See More Results\",\n            handler:props.actionProvider.handleOther,\n            id:3\n        }\n        \n    ];\n    //rn up to 4 new results are supported. can be changed\n    if (props['howManyQs'] == 4) {\n        optionsM = optionsM.slice(0,2)\n    }\n\n    const buttonsMarkup = optionsM.map((option) => (\n        <button key={option.id} onClick={option.handler} className=\"option-button\">\n            {option.text}\n        </button>\n\n    ));\n\n    return <div className=\"options-container\">{buttonsMarkup}</div>;\n\n}\n\nexport default MoreOptions","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/OtherMore.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js",["114","115"],"import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n//import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\nconst DocSearch = (params) => {\n    //we call axios dispatch here\n    var InputQuestion = params['InputQuestion']\n    \n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        //console.log(\"docs:!\",docs)\n    }, []) //.then(response => console.log(\"response!:\",response.length))\n    return ( <>\n        <b>{docs.length} docs found</b> </>)\n    //mapping requires key index for each entry\n   /* if (docs) {\n        return ( <>\n            {docs && Object.keys(docs).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{docs[item].tags}</b></td>\n                    </tr>\n                </tbody>\n        ))} </>)\n    }*/\n}\n\n\nexport default DocSearch;\n","/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocGrid/DocGrid.js",["116","117","118"],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/HomePage/Home.js",[],"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/DocumentPage/Document.js",["119"],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":9,"column":9,"nodeType":"126","messageId":"127","endLine":9,"endColumn":11},{"ruleId":"128","severity":1,"message":"129","line":13,"column":7,"nodeType":"130","messageId":"131","endLine":13,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":31,"column":12,"nodeType":"134","messageId":"135","endLine":77,"endColumn":4},{"ruleId":"128","severity":1,"message":"136","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"137","line":2,"column":8,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"124","severity":1,"message":"125","line":16,"column":37,"nodeType":"126","messageId":"127","endLine":16,"endColumn":39},{"ruleId":"124","severity":1,"message":"125","line":29,"column":42,"nodeType":"126","messageId":"127","endLine":29,"endColumn":44},{"ruleId":"124","severity":1,"message":"125","line":45,"column":34,"nodeType":"126","messageId":"127","endLine":45,"endColumn":36},{"ruleId":"128","severity":1,"message":"138","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":15,"column":8,"nodeType":"134","endLine":15,"endColumn":10,"suggestions":"141"},{"ruleId":"128","severity":1,"message":"142","line":1,"column":23,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"143","line":2,"column":26,"nodeType":"130","messageId":"131","endLine":2,"endColumn":34},{"ruleId":"139","severity":1,"message":"144","line":19,"column":8,"nodeType":"134","endLine":19,"endColumn":10,"suggestions":"145"},{"ruleId":"124","severity":1,"message":"125","line":20,"column":23,"nodeType":"126","messageId":"127","endLine":20,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":20,"column":47,"nodeType":"126","messageId":"127","endLine":20,"endColumn":49},{"ruleId":"124","severity":1,"message":"125","line":25,"column":17,"nodeType":"126","messageId":"127","endLine":25,"endColumn":19},{"ruleId":"124","severity":1,"message":"125","line":24,"column":28,"nodeType":"126","messageId":"127","endLine":24,"endColumn":30},{"ruleId":"128","severity":1,"message":"143","line":2,"column":26,"nodeType":"130","messageId":"131","endLine":2,"endColumn":34},{"ruleId":"139","severity":1,"message":"146","line":17,"column":8,"nodeType":"134","endLine":17,"endColumn":10,"suggestions":"147"},{"ruleId":"128","severity":1,"message":"148","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":22},{"ruleId":"128","severity":1,"message":"149","line":2,"column":24,"nodeType":"130","messageId":"131","endLine":2,"endColumn":30},{"ruleId":"128","severity":1,"message":"150","line":2,"column":32,"nodeType":"130","messageId":"131","endLine":2,"endColumn":38},{"ruleId":"139","severity":1,"message":"151","line":32,"column":8,"nodeType":"134","endLine":32,"endColumn":17,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'botName' is assigned a value but never used.","Identifier","unusedVar","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'Other' is defined but never used.","'MoreOptions' is defined but never used.","'loadQuestion' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["155"],"'loadQuestions' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'InputQuestion', 'dispatch', and 'howMany'. Either include them or remove the dependency array.",["156"],"React Hook useEffect has missing dependencies: 'InputQuestion' and 'dispatch'. Either include them or remove the dependency array.",["157"],"'MDBContainer' is defined but never used.","'MDBRow' is defined but never used.","'MDBCol' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'docID'. Either include them or remove the dependency array.",["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [dispatch]",{"range":"167","text":"168"},"Update the dependencies array to be: [InputQuestion, dispatch, howMany]",{"range":"169","text":"170"},"Update the dependencies array to be: [InputQuestion, dispatch]",{"range":"171","text":"172"},"Update the dependencies array to be: [dispatch, docFull, docID]",{"range":"173","text":"174"},[581,583],"[dispatch]",[764,766],"[InputQuestion, dispatch, howMany]",[678,680],"[InputQuestion, dispatch]",[872,881],"[dispatch, docFull, docID]"]