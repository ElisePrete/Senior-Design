{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Chatbot.js\",\n    _s = $RefreshSig$();\n\nimport './Chatbot.css';\nimport React, { useState } from \"react\";\nimport Chatbot from \"react-chatbot-kit\";\nimport 'react-chatbot-kit/build/main.css';\nimport config from \"./chatbotConfig\";\nimport MessageParser from \"./MessageParser\";\nimport ActionProvider from \"./ActionProvider\";\nimport Rephrase from \"./Rephrase\";\n/*Chatbot UI component*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CBot() {\n  _s();\n\n  const [showBot, toggleBot] = useState(false);\n\n  function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n  }\n\n  async function saveMessages() {\n    await delay(1000);\n    const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\");\n\n    if (html[0] == undefined) {\n      console.log(\"bouncinsm,\", html.namedItem);\n      return;\n    }\n\n    console.log(\"saved:\", html[0]);\n    localStorage.setItem('chat_messages', html[0].innerHTML);\n  }\n\n  ;\n\n  async function loadMessages() {\n    if (showBot) {\n      //bot is visible and user wants to hide\n      const parsed = localStorage.getItem('chat_messages');\n      const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\");\n      console.log(\"in storage:\", parsed); //console.log(\"h LM:\",html[0].innerHTML)\n\n      if (parsed == 'undefined' || html[0] == undefined) {\n        console.log(\"bouncinlm\");\n        return;\n      }\n\n      document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")[0].innerHTML = parsed;\n    } else {\n      await delay(1000);\n      const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\");\n\n      if (html[0] == undefined) {\n        console.log(\"bouncinsm,\", html.namedItem);\n        return;\n      }\n\n      console.log(\"saved:\", html[0]);\n      localStorage.setItem('chat_messages', html[0].innerHTML);\n    } // await delay(1000);\n\n\n    toggleBot(prev => !prev); //return messages;\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CBot\",\n    children: [showBot && /*#__PURE__*/_jsxDEV(Chatbot, {\n      config: config,\n      messageParser: MessageParser,\n      actionProvider: ActionProvider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => loadMessages(),\n      children: \"Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CBot, \"XZikR9JDxGKMAgwa1QIIzhUCaj4=\");\n\n_c = CBot;\nexport default CBot;\n\nvar _c;\n\n$RefreshReg$(_c, \"CBot\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/Chatbot.js"],"names":["React","useState","Chatbot","config","MessageParser","ActionProvider","Rephrase","CBot","showBot","toggleBot","delay","time","Promise","resolve","setTimeout","saveMessages","html","document","getElementsByClassName","undefined","console","log","namedItem","localStorage","setItem","innerHTML","loadMessages","parsed","getItem","prev"],"mappings":"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","sourcesContent":["import './Chatbot.css'\nimport React, {useState} from \"react\";\nimport Chatbot from \"react-chatbot-kit\";\nimport 'react-chatbot-kit/build/main.css'\nimport config from \"./chatbotConfig\";\nimport MessageParser from \"./MessageParser\"\nimport ActionProvider from \"./ActionProvider\";\nimport Rephrase from \"./Rephrase\"\n/*Chatbot UI component*/\nfunction CBot() {\n  const [showBot, toggleBot] = useState(false);\n  function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n  }\n  \n  async function saveMessages() {\n    await delay(1000);\n    const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")\n    if (html[0] == undefined) { console.log(\"bouncinsm,\", html.namedItem); return}\n    console.log(\"saved:\",html[0])\n    localStorage.setItem('chat_messages', html[0].innerHTML);\n  };\n  async function loadMessages() {\n    if (showBot) { //bot is visible and user wants to hide\n      const parsed = localStorage.getItem('chat_messages')\n      const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")\n      console.log(\"in storage:\", parsed)\n      //console.log(\"h LM:\",html[0].innerHTML)\n      if (parsed == 'undefined' || html[0] == undefined ) { console.log(\"bouncinlm\"); return}\n      document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")[0].innerHTML = parsed\n    }\n    else {\n      await delay(1000);\n      const html = document.getElementsByClassName(\"react-chatbot-kit-chat-message-container\")\n      if (html[0] == undefined) { console.log(\"bouncinsm,\", html.namedItem); return}\n      console.log(\"saved:\",html[0])\n      localStorage.setItem('chat_messages', html[0].innerHTML);\n    }\n   // await delay(1000);\n    \n    toggleBot((prev) => !prev)\n    //return messages;\n  };\n  return (\n    <div  className=\"CBot\">\n      {showBot && (<Chatbot\n       config={config}\n        messageParser={MessageParser}\n        actionProvider={ActionProvider}\n      />)}\n       <button onClick={() => loadMessages()}>Bot</button>\n    </div>\n  );\n}\n\n\n\nexport default CBot;"]},"metadata":{},"sourceType":"module"}