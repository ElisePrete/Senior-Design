{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; //import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DocSearch = params => {\n  _s();\n\n  var [docs, setDocs] = useState([]); //we call axios dispatch here\n\n  var InputQuestion = params['InputQuestion']; //console.log(\"Other | hm\",params)\n\n  const dispatch = useDispatch();\n  var {\n    obj\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n\n    if (obj.length > 1) {\n      console.log(\"docs are happening\");\n    }\n\n    docs = obj;\n    console.log(\"obj:!\", obj);\n  }, []); //.then(response => console.log(\"response!:\",response.length))\n  //var objlen = obj.length\n  //console.log(\"objlen:\",objlen)\n\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n  //mapping requires key index for each entry\n\n  if (obj) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [obj && Object.keys(obj).map((item, i) => /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: obj[item].tags\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)), \" \"]\n    }, void 0, true);\n  }\n}; //<><b>{objlen}</b> docs found\n\n/*<>\n   {obj && Object.keys(obj).map((item,i) => (\n       <tbody key={i}>\n           <tr>\n               <td><b>{obj[item].question}</b></td>\n               <td>{obj[item].link}</td>\n           </tr>\n       </tbody>\n))}\n     \n</*/\n\n\n_s(DocSearch, \"mOLUay2vJOZiOgMM7ehcaMIOtB0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DocSearch;\nexport default DocSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useState","useDispatch","useSelector","DocSearch","params","docs","setDocs","InputQuestion","dispatch","obj","state","data","length","console","log","Object","keys","map","item","i","tags"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;AACA;;AACA;AACA;;;;;AACA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAAA;;AAC1B,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAA9B,CAD0B,CAE1B;;AACA,MAAIO,aAAa,GAAGH,MAAM,CAAC,eAAD,CAA1B,CAH0B,CAI1B;;AACA,QAAMI,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAI;AAACQ,IAAAA;AAAD,MAAQP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAvB;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,QAAQ,CAACX,aAAa,CAAC;AAACU,MAAAA;AAAD,KAAD,CAAd,CAAR;;AACA,QAAIE,GAAG,CAACG,MAAJ,GAAa,CAAjB,EAAoB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AACDT,IAAAA,IAAI,GAAGI,GAAP;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBL,GAApB;AACH,GAPQ,EAON,EAPM,CAAT,CAP0B,CAcnB;AACP;AACA;;AACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AACA,MAAIA,GAAJ,EAAS;AACL,wBAAS;AAAA,iBACJA,GAAG,IAAIM,MAAM,CAACC,IAAP,CAAYP,GAAZ,EAAiBQ,GAAjB,CAAqB,CAACC,IAAD,EAAMC,CAAN,kBACzB;AAAA,+BACI;AAAA,iCACI;AAAA,mCAAI;AAAA,wBAAIV,GAAG,CAACS,IAAD,CAAH,CAAUE;AAAd;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,SAAYD,CAAZ;AAAA;AAAA;AAAA;AAAA,cADI,CADH;AAAA,oBAAT;AAQH;AACJ,CApCD,C,CAsCM;;AACG;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAjDMhB,S;UAKeF,W,EACLC,W;;;KANVC,S;AAqDN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n//import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\nconst DocSearch = (params) => {\n    var [docs, setDocs] = useState([])\n    //we call axios dispatch here\n    var InputQuestion = params['InputQuestion']\n    //console.log(\"Other | hm\",params)\n    const dispatch = useDispatch();\n    var {obj} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        if (obj.length > 1) {\n            console.log(\"docs are happening\")\n        }\n        docs = obj\n        console.log(\"obj:!\",obj)\n    }, []) //.then(response => console.log(\"response!:\",response.length))\n    //var objlen = obj.length\n    //console.log(\"objlen:\",objlen)\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n    //mapping requires key index for each entry\n    if (obj) {\n        return ( <>\n            {obj && Object.keys(obj).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{obj[item].tags}</b></td>\n                    </tr>\n                </tbody>\n        ))} </>)\n    }\n}\n   \n      //<><b>{objlen}</b> docs found\n         /*<>\n            {obj && Object.keys(obj).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{obj[item].question}</b></td>\n                        <td>{obj[item].link}</td>\n                    </tr>\n                </tbody>\n        ))}\n        \n     \n    </*/\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}