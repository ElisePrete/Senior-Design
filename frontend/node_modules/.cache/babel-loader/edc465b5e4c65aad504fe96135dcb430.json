{"ast":null,"code":"import Other from './OtherQandA/Other';\nimport MoreOptions from './MoreOptions/MoreOptions'; //Action provider contains all the 'functions' of the chatbot\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc\n  /*createClientMessage,\n  stateRef\n  createCustomMessage,\n  ...rest*/\n  ) {\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.handleInitialOptions = () => {\n      this.setState(state => ({ ...state,\n        howManyQs: 0,\n        OtherQuestion: \"\"\n      }));\n      this.addMessageToState(this.createChatBotMessage(`What would you like to search next?`, {\n        widget: \"InitialOptions\"\n      }));\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello! :)\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleDocuments = () => {\n      const message = this.createChatBotMessage(\"docs not supported atm\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleOtherSetup = () => {\n      this.setState(state => ({ ...state,\n        DocumentSearch: false,\n        OtherQuestion: \"\"\n      }));\n      const message = this.createChatBotMessage(\"Enter your question:\");\n      this.addMessageToState(message);\n    };\n\n    this.handleOther = (question, num) => {\n      console.log(\"num:\", num); //if handleOther is being called from a widget‚ it means the 'see more results' button was chosen.\n\n      if (!num) {\n        num = 4;\n      }\n\n      this.setState(state => ({ ...state,\n        OtherQuestion: state.OtherQuestion + \" \" + question,\n        howManyQs: num\n      }));\n      var message = this.createChatBotMessage(\"Results found:\", {\n        widget: \"Other\"\n      });\n      this.addMessageToState(message);\n      message = this.createChatBotMessage(\"Have I answered your question?\", {\n        widget: \"MoreOptions\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    /*this.createClientMessage = createClientMessage;\n     this.stateRef = stateRef;\n    this.createCustomMessage = createCustomMessage;*/\n  } //adds message to list of chatbot messages. used in all subsequent funcs\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","ActionProvider","constructor","createChatBotMessage","setStateFunc","addMessageToState","message","setState","prevState","messages","handleInitialOptions","state","howManyQs","OtherQuestion","widget","greet","handleDocuments","handleOtherSetup","DocumentSearch","handleOther","question","num","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CACA;;AACA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CACTC,oBADS,EAETC;AACA;AACJ;AACA;AACA;AANa,IAOT;AAAA,SAQFC,iBARE,GAQmBC,OAAD,IAAa;AAC/B,WAAKC,QAAL,CAAeC,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5BC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAuBH,OAAvB;AAFkB,OAAhB,CAAd;AAID,KAbC;;AAAA,SAeFI,oBAfE,GAeqB,MAAM;AAC3B,WAAKH,QAAL,CAAeI,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBC,QAAAA,SAAS,EAAC,CAFc;AAGxBC,QAAAA,aAAa,EAAE;AAHS,OAAZ,CAAd;AAMA,WAAKR,iBAAL,CAAuB,KAAKF,oBAAL,CACpB,qCADoB,EACkB;AACrCW,QAAAA,MAAM,EAAC;AAD8B,OADlB,CAAvB;AAKD,KA3BC;;AAAA,SA6BFC,KA7BE,GA6BM,MAAM;AACZ,YAAMT,OAAO,GAAG,KAAKH,oBAAL,CAA0B,WAA1B,CAAhB;AACA,WAAKE,iBAAL,CAAuBC,OAAvB,EAFY,CAEoB;AACjC,KAhCC;;AAAA,SAmCFU,eAnCE,GAmCgB,MAAM;AACtB,YAAMV,OAAO,GAAG,KAAKH,oBAAL,CAA0B,wBAA1B,CAAhB;AACA,WAAKE,iBAAL,CAAuBC,OAAvB,EAFsB,CAEU;AACjC,KAtCC;;AAAA,SAyCFW,gBAzCE,GAyCiB,MAAM;AACvB,WAAKV,QAAL,CAAeI,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBO,QAAAA,cAAc,EAAC,KAFS;AAGxBL,QAAAA,aAAa,EAAE;AAHS,OAAZ,CAAd;AAKA,YAAMP,OAAO,GAAG,KAAKH,oBAAL,CAA0B,sBAA1B,CAAhB;AACA,WAAKE,iBAAL,CAAuBC,OAAvB;AACD,KAjDC;;AAAA,SAoDFa,WApDE,GAoDY,CAACC,QAAD,EAAUC,GAAV,KAAkB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB,EAD8B,CAE9B;;AACA,UAAI,CAACA,GAAL,EAAU;AACRA,QAAAA,GAAG,GAAG,CAAN;AACD;;AACD,WAAKd,QAAL,CAAeI,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBE,QAAAA,aAAa,EAACF,KAAK,CAACE,aAAN,GAAqB,GAArB,GAA2BO,QAFjB;AAGxBR,QAAAA,SAAS,EAACS;AAHc,OAAZ,CAAd;AAMA,UAAIf,OAAO,GAAG,KAAKH,oBAAL,CAA0B,gBAA1B,EAA2C;AAAEW,QAAAA,MAAM,EAAC;AAAT,OAA3C,CAAd;AACA,WAAKT,iBAAL,CAAuBC,OAAvB;AACAA,MAAAA,OAAO,GAAI,KAAKH,oBAAL,CAA0B,gCAA1B,EAA6D;AAAEW,QAAAA,MAAM,EAAC;AAAT,OAA7D,CAAX;AACA,WAAKT,iBAAL,CAAuBC,OAAvB;AACD,KApEC;;AACA,SAAKH,oBAAL,GAA4BA,oBAA5B;AACA,SAAKI,QAAL,GAAgBH,YAAhB;AACA;AACJ;AACA;AACG,GAdkB,CAenB;;;AAfmB;;AA+ErB,eAAeH,cAAf","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n    /*createClientMessage,\n    stateRef\n    createCustomMessage,\n    ...rest*/\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    /*this.createClientMessage = createClientMessage;\n     this.stateRef = stateRef;\n    this.createCustomMessage = createCustomMessage;*/\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n\n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      OtherQuestion: \"\"\n    }))\n\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n\n  //function to fetch docs\n  handleDocuments = () => {\n    const message = this.createChatBotMessage(\"docs not supported atm\")\n    this.addMessageToState(message) //adds message to ui\n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      DocumentSearch:false,\n      OtherQuestion: \"\"\n    }))\n    const message = this.createChatBotMessage(\"Enter your question:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    console.log(\"num:\", num)\n    //if handleOther is being called from a widget‚ it means the 'see more results' button was chosen.\n    if (!num) {\n      num = 4\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherQuestion:state.OtherQuestion +\" \" + question,\n      howManyQs:num\n     })\n    )\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:\"MoreOptions\" })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}