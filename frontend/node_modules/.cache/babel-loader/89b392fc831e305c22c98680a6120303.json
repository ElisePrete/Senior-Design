{"ast":null,"code":"import { getObject } from '../Chatbot/utils';\n\nclass WidgetRegistry {\n  constructor(setStateFunc, actionProvider) {\n    this.addWidget = (_ref, parentProps) => {\n      let {\n        widgetName,\n        widgetFunc,\n        mapStateToProps,\n        props\n      } = _ref;\n      this[widgetName] = {\n        widget: widgetFunc,\n        props,\n        mapStateToProps,\n        parentProps: { ...parentProps\n        }\n      };\n    };\n\n    this.getWidget = (widgetName, options) => {\n      const widgetObject = this[widgetName];\n      if (!widgetObject) return;\n      let props = {\n        scrollIntoView: options.scrollIntoView,\n        ...widgetObject.parentProps,\n        ...getObject(widgetObject.props),\n        ...this.mapStateToProps(widgetObject.mapStateToProps, options),\n        setState: this.setState,\n        actionProvider: this.actionProvider || options.actions,\n        actions: options.actions,\n        state: options,\n        payload: options.payload\n      };\n      const widget = widgetObject.widget(props);\n\n      if (widget) {\n        return widget;\n      }\n\n      return null;\n    };\n\n    this.mapStateToProps = (props, state) => {\n      if (!props) return;\n      return props.reduce((acc, prop) => {\n        acc[prop] = state[prop];\n        return acc;\n      }, {});\n    };\n\n    this.setState = setStateFunc;\n    this.actionProvider = actionProvider;\n  }\n\n}\n\nexport default WidgetRegistry;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/WidgetRegistry/WidgetRegistry.js"],"names":["getObject","WidgetRegistry","constructor","setStateFunc","actionProvider","addWidget","parentProps","widgetName","widgetFunc","mapStateToProps","props","widget","getWidget","options","widgetObject","scrollIntoView","setState","actions","state","payload","reduce","acc","prop"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;;AAEA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,YAAD,EAAeC,cAAf,EAA+B;AAAA,SAK1CC,SAL0C,GAK9B,OAEVC,WAFU,KAGP;AAAA,UAFH;AAAEC,QAAAA,UAAF;AAAcC,QAAAA,UAAd;AAA0BC,QAAAA,eAA1B;AAA2CC,QAAAA;AAA3C,OAEG;AACH,WAAKH,UAAL,IAAmB;AACjBI,QAAAA,MAAM,EAAEH,UADS;AAEjBE,QAAAA,KAFiB;AAGjBD,QAAAA,eAHiB;AAIjBH,QAAAA,WAAW,EAAE,EAAE,GAAGA;AAAL;AAJI,OAAnB;AAMD,KAfyC;;AAAA,SAiB1CM,SAjB0C,GAiB9B,CAACL,UAAD,EAAaM,OAAb,KAAyB;AACnC,YAAMC,YAAY,GAAG,KAAKP,UAAL,CAArB;AAEA,UAAI,CAACO,YAAL,EAAmB;AAEnB,UAAIJ,KAAK,GAAG;AACVK,QAAAA,cAAc,EAAEF,OAAO,CAACE,cADd;AAEV,WAAGD,YAAY,CAACR,WAFN;AAGV,WAAGN,SAAS,CAACc,YAAY,CAACJ,KAAd,CAHF;AAIV,WAAG,KAAKD,eAAL,CAAqBK,YAAY,CAACL,eAAlC,EAAmDI,OAAnD,CAJO;AAKVG,QAAAA,QAAQ,EAAE,KAAKA,QALL;AAMVZ,QAAAA,cAAc,EAAE,KAAKA,cAAL,IAAuBS,OAAO,CAACI,OANrC;AAOVA,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OAPP;AAQVC,QAAAA,KAAK,EAAEL,OARG;AASVM,QAAAA,OAAO,EAAEN,OAAO,CAACM;AATP,OAAZ;AAYA,YAAMR,MAAM,GAAGG,YAAY,CAACH,MAAb,CAAoBD,KAApB,CAAf;;AAEA,UAAIC,MAAJ,EAAY;AACV,eAAOA,MAAP;AACD;;AAED,aAAO,IAAP;AACD,KAzCyC;;AAAA,SA2C1CF,eA3C0C,GA2CxB,CAACC,KAAD,EAAQQ,KAAR,KAAkB;AAClC,UAAI,CAACR,KAAL,EAAY;AAEZ,aAAOA,KAAK,CAACU,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe;AACjCD,QAAAA,GAAG,CAACC,IAAD,CAAH,GAAYJ,KAAK,CAACI,IAAD,CAAjB;AACA,eAAOD,GAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID,KAlDyC;;AACxC,SAAKL,QAAL,GAAgBb,YAAhB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACD;;AAJkB;;AAsDrB,eAAeH,cAAf","sourcesContent":["import { getObject } from '../Chatbot/utils';\n\nclass WidgetRegistry {\n  constructor(setStateFunc, actionProvider) {\n    this.setState = setStateFunc;\n    this.actionProvider = actionProvider;\n  }\n\n  addWidget = (\n    { widgetName, widgetFunc, mapStateToProps, props },\n    parentProps\n  ) => {\n    this[widgetName] = {\n      widget: widgetFunc,\n      props,\n      mapStateToProps,\n      parentProps: { ...parentProps },\n    };\n  };\n\n  getWidget = (widgetName, options) => {\n    const widgetObject = this[widgetName];\n\n    if (!widgetObject) return;\n\n    let props = {\n      scrollIntoView: options.scrollIntoView,\n      ...widgetObject.parentProps,\n      ...getObject(widgetObject.props),\n      ...this.mapStateToProps(widgetObject.mapStateToProps, options),\n      setState: this.setState,\n      actionProvider: this.actionProvider || options.actions,\n      actions: options.actions,\n      state: options,\n      payload: options.payload,\n    };\n\n    const widget = widgetObject.widget(props);\n\n    if (widget) {\n      return widget;\n    }\n\n    return null;\n  };\n\n  mapStateToProps = (props, state) => {\n    if (!props) return;\n\n    return props.reduce((acc, prop) => {\n      acc[prop] = state[prop];\n      return acc;\n    }, {});\n  };\n}\n\nexport default WidgetRegistry;\n"]},"metadata":{},"sourceType":"module"}