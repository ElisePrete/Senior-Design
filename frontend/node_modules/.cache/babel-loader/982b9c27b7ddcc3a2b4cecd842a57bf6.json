{"ast":null,"code":"import Other from './OtherQandA/Other';\nimport MoreOptions from './MoreOptions/MoreOptions';\nimport saveMessages from './Chatbot';\nimport { useEffect } from 'react'; //Action provider contains all the 'functions' of the chatbot\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.chat_messages = [];\n\n    this.addMessageToState = message => {\n      const localmessages = [...this.chat_messages, message]; //this.chat_messages = localmessages\n\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n      doThis(localmessages);\n    };\n\n    this.handleInitialOptions = () => {\n      this.setState(state => ({ ...state,\n        howManyQs: 0,\n        InputQuestion: \"\",\n        handleOther: false,\n        DocumentSearch: -1\n      }));\n      this.addMessageToState(this.createChatBotMessage(`What would you like to search next?`, {\n        widget: \"InitialOptions\"\n      }));\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello! :)\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleConfusion = () => {\n      const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleDocuments = question => {\n      this.setState(state => ({ ...state,\n        InputQuestion: question\n      }));\n      var message = this.createChatBotMessage(\"Docs found:\", {\n        widget: \"DocSearch\"\n      });\n      this.addMessageToState(message);\n      message = this.createChatBotMessage(\"Type to search for more documents or...\", {\n        widget: \"DocOptions\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.handleExampleQ = () => {\n      var message = this.createChatBotMessage({\n        widget: \"ExampleQs\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.handleOtherSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        OtherOptions: false,\n        DocumentSearch: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What would you like to know about the claims process?\");\n      this.addMessageToState(message);\n    };\n\n    this.handleDocSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        DocumentSearch: true,\n        OtherOptions: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What are you searching for?:\");\n      this.addMessageToState(message);\n    };\n\n    this.handleOther = (question, num) => {\n      //console.log(\"num:\", num)\n      var message = this.createChatBotMessage(\"Results found:\", {\n        widget: \"Other\"\n      });\n      this.addMessageToState(message); //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n\n      var otherWidget = \"MoreOptions\";\n\n      if (!num) {\n        num = 4; // otherWidget = \"MoreResults\" *not sure about this chief*\n      }\n\n      this.setState(state => ({ ...state,\n        OtherOptions: true,\n        InputQuestion: question,\n        howManyQs: num\n      }));\n      message = this.createChatBotMessage(\"Have I answered your question?\", {\n        widget: otherWidget\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  } //adds message to list of chatbot messages. used in all subsequent funcs\n\n\n}\n\nexport default ActionProvider;\n\nfunction doThis(messages) {\n  saveMessages(messages, \"\");\n}","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","saveMessages","useEffect","ActionProvider","constructor","createChatBotMessage","setStateFunc","chat_messages","addMessageToState","message","localmessages","setState","prevState","messages","doThis","handleInitialOptions","state","howManyQs","InputQuestion","handleOther","DocumentSearch","widget","greet","handleConfusion","handleDocuments","question","handleExampleQ","handleOtherSetup","OtherOptions","handleDocSetup","num","otherWidget"],"mappings":"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","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\nimport saveMessages from './Chatbot'\nimport { useEffect } from 'react';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  chat_messages = []\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    \n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  addMessageToState = (message) => { \n    const localmessages = [...this.chat_messages,message]\n    //this.chat_messages = localmessages\n\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }\n    ));\n    doThis(localmessages)\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  \n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion:question\n     }))\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Type to search for more documents or...\" , { widget:\"DocOptions\" })\n    this.addMessageToState(message)\n    \n  }\n  handleExampleQ = () => {\n    var message = this.createChatBotMessage( {widget:\"ExampleQs\" })\n     this.addMessageToState(message)\n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  //Prefaces Document Search\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      DocumentSearch:true,\n      OtherOptions:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion: question,\n      howManyQs:num\n     })\n    )\n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n\n\nfunction doThis(messages) {\n  saveMessages(messages,\"\")\n}"]},"metadata":{},"sourceType":"module"}