{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport Other from './OtherQandA/Other';\nimport MoreOptions from './MoreOptions/MoreOptions';\nimport { loadDocuments } from '../../model/actions'; //Action provider contains all the 'functions' of the chatbot\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    var _s = $RefreshSig$();\n\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.handleInitialOptions = () => {\n      this.setState(state => ({ ...state,\n        howManyQs: 0,\n        InputQuestion: \"\",\n        handleOther: false,\n        DocumentSearch: -1\n      }));\n      this.addMessageToState(this.createChatBotMessage(`What would you like to search next?`, {\n        widget: \"InitialOptions\"\n      }));\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello! :)\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleConfusion = () => {\n      const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleDocuments = _s(question => {\n      _s();\n\n      var InputQuestion = params['InputQuestion']; //must call dispatch or else results will stay at zero\n\n      const dispatch = useDispatch();\n      const docs = docGetter();\n      this.setState(state => ({ ...state,\n        InputQuestion: docs.length\n      }));\n      var message = this.createChatBotMessage(\"Docs found:\", {\n        widget: \"DocSearch\"\n      });\n      this.addMessageToState(message);\n      message = this.createChatBotMessage(\"Type to search for more documents or...\", {\n        widget: \"DocOptions\"\n      });\n      this.addMessageToState(message);\n    }, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", true);\n\n    this.handleExampleQ = () => {\n      var message = this.createChatBotMessage({\n        widget: \"ExampleQs\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.handleOtherSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        OtherOptions: false,\n        DocumentSearch: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What would you like to know about the claims process?\");\n      this.addMessageToState(message);\n    };\n\n    this.handleDocSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        DocumentSearch: true,\n        OtherOptions: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What are you searching for?:\");\n      this.addMessageToState(message);\n    };\n\n    this.handleOther = (question, num) => {\n      //console.log(\"num:\", num)\n      var message = this.createChatBotMessage(\"Results found:\", {\n        widget: \"Other\"\n      });\n      this.addMessageToState(message); //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n\n      var otherWidget = \"MoreOptions\";\n\n      if (!num) {\n        num = 4; // otherWidget = \"MoreResults\" *not sure about this chief*\n      }\n\n      this.setState(state => ({ ...state,\n        OtherOptions: true,\n        InputQuestion: question,\n        howManyQs: num\n      }));\n      message = this.createChatBotMessage(\"Have I answered your question?\", {\n        widget: otherWidget\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  } //adds message to list of chatbot messages. used in all subsequent funcs\n\n\n}\n\nfunction docGetter(InputQuestion) {\n  _s2();\n\n  var {\n    docs\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n  }, []); //.then(response => console.log(\"response!:\",response.length))\n\n  return docs.length;\n}\n\n_s2(docGetter, \"srUkO9UPN+7A7+Pyjlk9k1gYYIw=\", true);\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","loadDocuments","ActionProvider","constructor","createChatBotMessage","setStateFunc","addMessageToState","message","setState","prevState","messages","handleInitialOptions","state","howManyQs","InputQuestion","handleOther","DocumentSearch","widget","greet","handleConfusion","handleDocuments","question","params","dispatch","useDispatch","docs","docGetter","length","handleExampleQ","handleOtherSetup","OtherOptions","handleDocSetup","num","otherWidget","useSelector","data","useEffect"],"mappings":"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","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\nimport { loadDocuments} from '../../model/actions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n    \n     var InputQuestion = params['InputQuestion']\n     //must call dispatch or else results will stay at zero\n     const dispatch = useDispatch();\n    const docs = docGetter()\n     this.setState((state) => ({\n      ...state,\n      InputQuestion:docs.length\n     }))\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Type to search for more documents or...\" , { widget:\"DocOptions\" })\n    this.addMessageToState(message)\n    \n  }\n  handleExampleQ = () => {\n    var message = this.createChatBotMessage( {widget:\"ExampleQs\" })\n    this.addMessageToState(message)\n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  //Prefaces Document Search\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      DocumentSearch:true,\n      OtherOptions:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion: question,\n      howManyQs:num\n     })\n    )\n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\n\nfunction docGetter(InputQuestion) {\n  var {docs} = useSelector(state => state.data)\n  useEffect(() => {\n      dispatch(loadDocuments({InputQuestion}));\n  }, []) //.then(response => console.log(\"response!:\",response.length))\n  return docs.length\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}