{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/ChatbotMessage/ChatbotMessage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ConditionallyRender from 'react-conditionally-render';\nimport ChatbotMessageAvatar from './ChatBotMessageAvatar/ChatbotMessageAvatar';\nimport Loader from '../Loader/Loader';\nimport './ChatbotMessage.css';\nimport { callIfExists } from '../Chat/chatUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatbotMessage = _ref => {\n  _s();\n\n  let {\n    message,\n    withAvatar = true,\n    loading,\n    messages,\n    customComponents,\n    setState,\n    customStyles,\n    delay,\n    id\n  } = _ref;\n  const [show, toggleShow] = useState(false);\n  useEffect(() => {\n    let timeoutId;\n\n    const disableLoading = (messages, setState) => {\n      let defaultDisableTime = 750;\n      if (delay) defaultDisableTime += delay;\n      timeoutId = setTimeout(() => {\n        const newMessages = [...messages];\n        const message = newMessages.find(message => message.id === id);\n        if (!message) return;\n        message.loading = false;\n        message.delay = undefined;\n        setState(state => {\n          const freshMessages = state.messages;\n          const messageIdx = freshMessages.findIndex(message => message.id === id);\n          freshMessages[messageIdx] = message;\n          return { ...state,\n            messages: freshMessages\n          };\n        });\n      }, defaultDisableTime);\n    };\n\n    disableLoading(messages, setState);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [delay, id]);\n  useEffect(() => {\n    if (delay) {\n      setTimeout(() => toggleShow(true), delay);\n    } else {\n      toggleShow(true);\n    }\n  }, [delay]);\n  const chatBoxCustomStyles = {\n    backgroundColor: ''\n  };\n  const arrowCustomStyles = {\n    borderRightColor: ''\n  };\n\n  if (customStyles) {\n    chatBoxCustomStyles.backgroundColor = customStyles.backgroundColor;\n    arrowCustomStyles.borderRightColor = customStyles.backgroundColor;\n  }\n\n  return /*#__PURE__*/_jsxDEV(ConditionallyRender, {\n    condition: show,\n    show: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"react-chatbot-kit-chat-bot-message-container\",\n      children: [/*#__PURE__*/_jsxDEV(ConditionallyRender, {\n        condition: withAvatar,\n        show: /*#__PURE__*/_jsxDEV(ConditionallyRender, {\n          condition: !!(customComponents === null || customComponents === void 0 ? void 0 : customComponents.botAvatar),\n          show: callIfExists(customComponents === null || customComponents === void 0 ? void 0 : customComponents.botAvatar),\n          elseShow: /*#__PURE__*/_jsxDEV(ChatbotMessageAvatar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ConditionallyRender, {\n        condition: !!(customComponents === null || customComponents === void 0 ? void 0 : customComponents.botChatMessage),\n        show: callIfExists(customComponents === null || customComponents === void 0 ? void 0 : customComponents.botChatMessage, {\n          message,\n          loader: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 23\n          }, this)\n        }),\n        elseShow: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react-chatbot-kit-chat-bot-message\",\n          style: chatBoxCustomStyles,\n          children: [/*#__PURE__*/_jsxDEV(ConditionallyRender, {\n            condition: loading,\n            show: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 25\n            }, this),\n            elseShow: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ConditionallyRender, {\n            condition: withAvatar,\n            show: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"react-chatbot-kit-chat-bot-message-arrow\",\n              style: arrowCustomStyles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatbotMessage, \"EHhb5drvd2Ro9kCFQ8PSQlboQ4o=\");\n\n_c = ChatbotMessage;\nexport default ChatbotMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatbotMessage\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/ChatbotMessage/ChatbotMessage.tsx"],"names":["React","useEffect","useState","ConditionallyRender","ChatbotMessageAvatar","Loader","callIfExists","ChatbotMessage","message","withAvatar","loading","messages","customComponents","setState","customStyles","delay","id","show","toggleShow","timeoutId","disableLoading","defaultDisableTime","setTimeout","newMessages","find","undefined","state","freshMessages","messageIdx","findIndex","clearTimeout","chatBoxCustomStyles","backgroundColor","arrowCustomStyles","borderRightColor","botAvatar","botChatMessage","loader"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ConditionallyRender from 'react-conditionally-render';\n\nimport ChatbotMessageAvatar from './ChatBotMessageAvatar/ChatbotMessageAvatar';\nimport Loader from '../Loader/Loader';\n\nimport './ChatbotMessage.css';\nimport { callIfExists } from '../Chat/chatUtils';\nimport { ICustomComponents, ICustomStyles } from '../../interfaces/IConfig';\n\ninterface IChatbotMessageProps {\n  message: string;\n  withAvatar?: boolean;\n  loading?: boolean;\n  messages: any[];\n  delay?: number;\n  id: number;\n  setState?: React.Dispatch<React.SetStateAction<any>>;\n  customComponents?: ICustomComponents;\n  customStyles: { backgroundColor: string };\n}\nconst ChatbotMessage = ({\n  message,\n  withAvatar = true,\n  loading,\n  messages,\n  customComponents,\n  setState,\n  customStyles,\n  delay,\n  id,\n}: IChatbotMessageProps) => {\n  const [show, toggleShow] = useState(false);\n\n  useEffect(() => {\n    let timeoutId: any;\n    const disableLoading = (\n      messages: any[],\n      setState: React.Dispatch<React.SetStateAction<any>>\n    ) => {\n      let defaultDisableTime = 750;\n      if (delay) defaultDisableTime += delay;\n\n      timeoutId = setTimeout(() => {\n        const newMessages = [...messages];\n        const message = newMessages.find((message) => message.id === id);\n\n        if (!message) return;\n        message.loading = false;\n        message.delay = undefined;\n\n        setState((state: any) => {\n          const freshMessages = state.messages;\n          const messageIdx = freshMessages.findIndex(\n            (message: any) => message.id === id\n          );\n          freshMessages[messageIdx] = message;\n\n          return { ...state, messages: freshMessages };\n        });\n      }, defaultDisableTime);\n    };\n\n    disableLoading(messages, setState);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [delay, id]);\n\n  useEffect(() => {\n    if (delay) {\n      setTimeout(() => toggleShow(true), delay);\n    } else {\n      toggleShow(true);\n    }\n  }, [delay]);\n\n  const chatBoxCustomStyles = { backgroundColor: '' };\n  const arrowCustomStyles = { borderRightColor: '' };\n\n  if (customStyles) {\n    chatBoxCustomStyles.backgroundColor = customStyles.backgroundColor;\n    arrowCustomStyles.borderRightColor = customStyles.backgroundColor;\n  }\n\n  return (\n    <ConditionallyRender\n      condition={show}\n      show={\n        <div className=\"react-chatbot-kit-chat-bot-message-container\">\n          <ConditionallyRender\n            condition={withAvatar}\n            show={\n              <ConditionallyRender\n                condition={!!customComponents?.botAvatar}\n                show={callIfExists(customComponents?.botAvatar)}\n                elseShow={<ChatbotMessageAvatar />}\n              />\n            }\n          />\n\n          <ConditionallyRender\n            condition={!!customComponents?.botChatMessage}\n            show={callIfExists(customComponents?.botChatMessage, {\n              message,\n              loader: <Loader />,\n            })}\n            elseShow={\n              <div\n                className=\"react-chatbot-kit-chat-bot-message\"\n                style={chatBoxCustomStyles}\n              >\n                <ConditionallyRender\n                  condition={loading}\n                  show={<Loader />}\n                  elseShow={<span>{message}</span>}\n                />\n                <ConditionallyRender\n                  condition={withAvatar}\n                  show={\n                    <div\n                      className=\"react-chatbot-kit-chat-bot-message-arrow\"\n                      style={arrowCustomStyles}\n                    ></div>\n                  }\n                />\n              </div>\n            }\n          />\n        </div>\n      }\n    />\n  );\n};\n\nexport default ChatbotMessage;\n"]},"metadata":{},"sourceType":"module"}