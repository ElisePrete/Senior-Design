{"ast":null,"code":"import _slicedToArray from\"/home/lizz/spring2022/dfind/Senior-Design/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{loadDocuments}from'../../../model/actions';import React,{useEffect,getState}from'react';import{useDispatch,useSelector}from'react-redux';/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Count=function Count(count){// var {docs} = useSelector(state => state.data)\n//count = docs.length\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[\" \",/*#__PURE__*/_jsxs(\"b\",{className:\"results\",children:[count,\" docs found\"]}),\" \"]});};var DocSearch=/*#__PURE__*/React.memo(function(props){var _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),count=_React$useState2[0],setCount=_React$useState2[1];//const [next, setNext]  = React.useState(true);\nconsole.log(\"prps ds:\",props);var InputQuestion=props['InputQuestion'];//must call dispatch or else results will stay at zero\nvar dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.data;}),docs=_useSelector.docs;useEffect(function(){dispatch(loadDocuments({InputQuestion:InputQuestion}));//  await dispatch(loadDocuments({InputQuestion})).then(() => setCount(docs.length) );\n//One update too late\n},[]);// while(docs.length == count) {console.log(\"counte:\", count, \"l:\", docs.length)}\n//  setCount(docs.length)\nreturn Count(docs.length);// const count = docs.length\n//return Count(count)\n// setCount(docs.length)\n});export default DocSearch;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","getState","useDispatch","useSelector","Count","count","DocSearch","memo","props","useState","setCount","console","log","InputQuestion","dispatch","state","data","docs","length"],"mappings":"qIAAA,OAASA,aAAT,KAA6B,wBAA7B,CACA,MAAOC,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA;AACA,8C,kGAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,CACtB;AACC;AACA,mBAAS,4CAAG,WAAG,SAAS,CAAC,SAAb,WAAwBA,KAAxB,iBAAH,OAAT,CACH,CAJD,CAOA,GAAMC,CAAAA,SAAS,cAAGP,KAAK,CAACQ,IAAN,CAAW,SAACC,KAAD,CAAW,CACpC,oBAA0BT,KAAK,CAACU,QAAN,CAAe,CAAf,CAA1B,oDAAOJ,KAAP,qBAAcK,QAAd,qBACA;AACAC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBJ,KAAxB,EACA,GAAIK,CAAAA,aAAa,CAAGL,KAAK,CAAC,eAAD,CAAzB,CACA;AACA,GAAMM,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CACA,iBAAaC,WAAW,CAAC,SAAAY,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAV,EAAN,CAAxB,CAAKC,IAAL,cAAKA,IAAL,CAECjB,SAAS,CAAE,UAAM,CAEhBc,QAAQ,CAAChB,aAAa,CAAC,CAACe,aAAa,CAAbA,aAAD,CAAD,CAAd,CAAR,CACA;AAEG;AACJ,CANS,CAMP,EANO,CAAT,CAOF;AACD;AACE,MAAOT,CAAAA,KAAK,CAACa,IAAI,CAACC,MAAN,CAAZ,CAED;AACC;AACD;AAEF,CAxBiB,CAAlB,CA2BA,cAAeZ,CAAAA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect, getState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nconst Count = (count) => {\n   // var {docs} = useSelector(state => state.data)\n    //count = docs.length\n    return ( <> <b className='results'>{count} docs found</b> </> )\n}\n\n\nconst DocSearch = React.memo((props) => {\n    const [count, setCount] = React.useState(0);\n    //const [next, setNext]  = React.useState(true);\n    console.log(\"prps ds:\", props)\n    var InputQuestion = props['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    \n     useEffect( () => {\n\n      dispatch(loadDocuments({InputQuestion}))\n      //  await dispatch(loadDocuments({InputQuestion})).then(() => setCount(docs.length) );\n       \n         //One update too late\n    }, []) \n   // while(docs.length == count) {console.log(\"counte:\", count, \"l:\", docs.length)}\n  //  setCount(docs.length)\n    return Count(docs.length)\n    \n   // const count = docs.length\n    //return Count(count)\n   // setCount(docs.length)\n    \n})\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}