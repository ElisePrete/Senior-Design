{"ast":null,"code":"import Other from './OtherQandA/Other';\nimport MoreOptions from './MoreOptions/MoreOptions'; //Action provider contains all the 'functions' of the chatbot\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc\n  /*createClientMessage,\n  stateRef\n  createCustomMessage,\n  ...rest*/\n  ) {\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.handleInitialOptions = () => {\n      this.setState(state => ({ ...state,\n        howManyQs: 0,\n        InputQuestion: \"\",\n        handleOther: false,\n        DocumentSearch: -1\n      }));\n      this.addMessageToState(this.createChatBotMessage(`What would you like to search next?`, {\n        widget: \"InitialOptions\"\n      }));\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello! :)\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleConfusion = () => {\n      const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleDocuments = question => {\n      this.setState(state => ({ ...state,\n        // OtherOptions:true,\n        InputQuestion: question,\n        showDocs: true\n      }));\n      var message = this.createChatBotMessage(\"Docs found:\", {\n        widget: \"DocSearch\"\n      });\n      this.addMessageToState(message);\n      /* const message = this.createChatBotMessage(\"docs not supported atm\")\n       this.addMessageToState(message) //adds message to ui\n       this.handleInitialOptions() */\n\n      message = this.createChatBotMessage(\"?\", {\n        widget: \"DocOptions\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.handleOtherSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        OtherOptions: false,\n        DocumentSearch: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What would you like to know about the claims process?\");\n      this.addMessageToState(message);\n    };\n\n    this.handleDocSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        DocumentSearch: true,\n        OtherOptions: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What are you searching for?:\");\n      this.addMessageToState(message);\n    };\n\n    this.handleOther = (question, num) => {\n      //console.log(\"num:\", num)\n      var message = this.createChatBotMessage(\"Results found:\", {\n        widget: \"Other\"\n      });\n      this.addMessageToState(message); //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n\n      var otherWidget = \"MoreOptions\";\n\n      if (!num) {\n        num = 4; // otherWidget = \"MoreResults\" *not sure about this chief*\n      }\n\n      this.setState(state => ({ ...state,\n        OtherOptions: true,\n        InputQuestion: state.InputQuestion + \" \" + question,\n        howManyQs: num\n      }));\n      message = this.createChatBotMessage(\"Have I answered your question?\", {\n        widget: otherWidget\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    /*this.createClientMessage = createClientMessage;\n     this.stateRef = stateRef;\n    this.createCustomMessage = createCustomMessage;*/\n  } //adds message to list of chatbot messages. used in all subsequent funcs\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","ActionProvider","constructor","createChatBotMessage","setStateFunc","addMessageToState","message","setState","prevState","messages","handleInitialOptions","state","howManyQs","InputQuestion","handleOther","DocumentSearch","widget","greet","handleConfusion","handleDocuments","question","showDocs","handleOtherSetup","OtherOptions","handleDocSetup","num","otherWidget"],"mappings":"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","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n    /*createClientMessage,\n    stateRef\n    createCustomMessage,\n    ...rest*/\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    /*this.createClientMessage = createClientMessage;\n     this.stateRef = stateRef;\n    this.createCustomMessage = createCustomMessage;*/\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n    this.setState((state) => ({\n      ...state,\n     // OtherOptions:true,\n      InputQuestion:question,\n      showDocs:true\n     }))\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n   /* const message = this.createChatBotMessage(\"docs not supported atm\")\n    this.addMessageToState(message) //adds message to ui\n    this.handleInitialOptions() */\n    message =  this.createChatBotMessage(\"?\" , { widget:\"DocOptions\" })\n    this.addMessageToState(message)\n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      DocumentSearch:true,\n      OtherOptions:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion:state.InputQuestion +\" \" + question,\n      howManyQs:num\n     })\n    )\n   \n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}