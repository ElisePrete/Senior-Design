{"ast":null,"code":"//class which parses through user input in the chatbot\n//'The simplest version is to check for keywords with javascript .includes()'\nclass MessageParser {\n  //we inject chatbot properties (state) + the actionProvider (chatbot class funcs) into message parser\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  } //when a user types and hits search‚ parse is called\n\n\n  parse(message) {\n    const lowercase = message.toLowerCase();\n\n    if (lowercase.includes('hello')) {\n      this.actionProvider.greet();\n    }\n\n    if (this.state.DocumentSearch == -1) {\n      //if user doesn't hasn't chosen 'other' or 'doc'\n      if (lowercase.includes('other')) {\n        this.state.howManyQs = 0;\n        this.actionProvider.handleOtherSetup(lowercase);\n        this.state.DocumentSearch = 0;\n      } else if (lowercase.includes('document')) {\n        this.state.DocumentSearch = 1;\n      }\n    } else if (this.state.DocumentSearch == 0) {\n      if (this.state.howManyQs == 0) {\n        this.actionProvider.handleOther(lowercase, 1);\n      } else {\n        this.actionProvider.handleOther(lowercase, 4);\n      }\n\n      this.state.DocumentSearch = -1;\n    }\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MessageParser.js"],"names":["MessageParser","constructor","actionProvider","state","parse","message","lowercase","toLowerCase","includes","greet","DocumentSearch","howManyQs","handleOtherSetup","handleOther"],"mappings":"AAAA;AACA;AACA,MAAMA,aAAN,CAAoB;AAClB;AACEC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,KAAjB,EAAwB;AACjC,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD,GALe,CAMhB;;;AACAC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACb,UAAMC,SAAS,GAAGD,OAAO,CAACE,WAAR,EAAlB;;AAEA,QAAID,SAAS,CAACE,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/B,WAAKN,cAAL,CAAoBO,KAApB;AACD;;AACD,QAAI,KAAKN,KAAL,CAAWO,cAAX,IAA6B,CAAC,CAAlC,EAAoC;AAAE;AACpC,UAAIJ,SAAS,CAACE,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/B,aAAKL,KAAL,CAAWQ,SAAX,GAAsB,CAAtB;AACA,aAAKT,cAAL,CAAoBU,gBAApB,CAAqCN,SAArC;AACA,aAAKH,KAAL,CAAWO,cAAX,GAA4B,CAA5B;AACD,OAJD,MAKK,IAAIJ,SAAS,CAACE,QAAV,CAAmB,UAAnB,CAAJ,EAAoC;AACvC,aAAKL,KAAL,CAAWO,cAAX,GAA4B,CAA5B;AACD;AACF,KATD,MAUK,IAAI,KAAKP,KAAL,CAAWO,cAAX,IAA6B,CAAjC,EAAoC;AACvC,UAAI,KAAKP,KAAL,CAAWQ,SAAX,IAAuB,CAA3B,EAA8B;AAC5B,aAAKT,cAAL,CAAoBW,WAApB,CAAgCP,SAAhC,EAA0C,CAA1C;AAED,OAHD,MAIK;AACH,aAAKJ,cAAL,CAAoBW,WAApB,CAAgCP,SAAhC,EAA0C,CAA1C;AACD;;AAED,WAAKH,KAAL,CAAWO,cAAX,GAA4B,CAAC,CAA7B;AACD;AAIF;;AArCe;;AA0ClB,eAAeV,aAAf","sourcesContent":["//class which parses through user input in the chatbot\n//'The simplest version is to check for keywords with javascript .includes()'\nclass MessageParser {\n  //we inject chatbot properties (state) + the actionProvider (chatbot class funcs) into message parser\n    constructor(actionProvider, state) {\n      this.actionProvider = actionProvider;\n      this.state = state;\n    }\n    //when a user types and hits search‚ parse is called\n    parse(message) {\n      const lowercase = message.toLowerCase()\n\n      if (lowercase.includes('hello')) {\n        this.actionProvider.greet();\n      }\n      if (this.state.DocumentSearch == -1){ //if user doesn't hasn't chosen 'other' or 'doc'\n        if (lowercase.includes('other')) {\n          this.state.howManyQs =0\n          this.actionProvider.handleOtherSetup(lowercase);\n          this.state.DocumentSearch = 0\n        }\n        else if (lowercase.includes('document')) {\n          this.state.DocumentSearch = 1\n        }\n      }\n      else if (this.state.DocumentSearch == 0 ){\n        if (this.state.howManyQs ==0) {\n          this.actionProvider.handleOther(lowercase,1);\n        \n        }\n        else {\n          this.actionProvider.handleOther(lowercase,4);\n        }\n        \n        this.state.DocumentSearch = -1\n      }\n\n      \n\n    }\n\n   \n  }\n  \n  export default MessageParser;\n"]},"metadata":{},"sourceType":"module"}