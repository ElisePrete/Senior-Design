{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { pure } from 'recompose';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar DocSearch = params => {\n  _s();\n\n  var InputQuestion = params['InputQuestion']; //must call dispatch or else results will stay at zero\n\n  const dispatch = useDispatch();\n  var {\n    docs\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n  }, []); //.then(response => console.log(\"response!:\",response.length))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n      children: [docs.length, \" docs found\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n\n_s(DocSearch, \"RM+6Em/LKIJ/HZpiF/pHZdbAtGI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DocSearch;\nexport default DocSearch(pure);\n\nvar _c;\n\n$RefreshReg$(_c, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useDispatch","useSelector","pure","DocSearch","params","InputQuestion","dispatch","docs","state","data","length"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,WAArB;AACA;AACA;;;;;AACA,IAAIC,SAAS,GAAIC,MAAD,IAAY;AAAA;;AACxB,MAAIC,aAAa,GAAGD,MAAM,CAAC,eAAD,CAA1B,CADwB,CAExB;;AACA,QAAME,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAI;AAACO,IAAAA;AAAD,MAASN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACT,aAAa,CAAC;AAACQ,MAAAA;AAAD,KAAD,CAAd,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT,CALwB,CAOjB;;AACP,sBAAS;AAAA,iCAAG;AAAA,iBAAIE,IAAI,CAACG,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA,kBAAT;AACH,CATD;;GAAIP,S;UAGiBH,W,EACJC,W;;;KAJbE,S;AAYJ,eAAeA,SAAS,CAACD,IAAD,CAAxB","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { pure } from 'recompose';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\nvar DocSearch = (params) => {\n    var InputQuestion = params['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n    }, []) //.then(response => console.log(\"response!:\",response.length))\n    return ( <> <b>{docs.length} docs found</b> </> )\n}\n\n\nexport default DocSearch(pure);\n"]},"metadata":{},"sourceType":"module"}