{"ast":null,"code":"export const uniqueId = () => {\n  return Math.round(Date.now() * Math.random());\n};\nexport const botMessage = message => {\n  if (message.type === 'bot') {\n    return true;\n  }\n\n  return false;\n};\nexport const userMessage = message => {\n  if (message.type === 'user') {\n    return true;\n  }\n\n  return false;\n};\nexport const customMessage = (message, customMessages) => {\n  const customMessage = customMessages[message.type];\n\n  if (customMessage) {\n    return true;\n  }\n\n  return false;\n};\nexport const createChatMessage = (message, type) => {\n  return {\n    message: message,\n    type: type,\n    id: uniqueId()\n  };\n};\nexport const createChatBotMessage = (message, options) => {\n  return { ...createChatMessage(message, 'bot'),\n    ...options,\n    loading: true\n  };\n};\nexport const createCustomMessage = (message, type, options) => {\n  return { ...createChatMessage(message, type),\n    ...options\n  };\n};\nexport const createClientMessage = (message, options) => {\n  return { ...createChatMessage(message, 'user'),\n    ...options\n  };\n};\nexport const callIfExists = function (func) {\n  if (func) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return func(...args);\n  }\n};","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/Chat/chatUtils.ts"],"names":["uniqueId","Math","round","Date","now","random","botMessage","message","type","userMessage","customMessage","customMessages","createChatMessage","id","createChatBotMessage","options","loading","createCustomMessage","createClientMessage","callIfExists","func","args"],"mappings":"AAMA,OAAO,MAAMA,QAAQ,GAAG,MAAM;AAC5B,SAAOC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAaH,IAAI,CAACI,MAAL,EAAxB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAuB;AAC/C,MAAIA,OAAO,CAACC,IAAR,KAAiB,KAArB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CALM;AAOP,OAAO,MAAMC,WAAW,GAAIF,OAAD,IAAuB;AAChD,MAAIA,OAAO,CAACC,IAAR,KAAiB,MAArB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CALM;AAOP,OAAO,MAAME,aAAa,GAAG,CAACH,OAAD,EAAoBI,cAApB,KAA4C;AACvE,QAAMD,aAAa,GAAGC,cAAc,CAACJ,OAAO,CAACC,IAAT,CAApC;;AAEA,MAAIE,aAAJ,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAPM;AASP,OAAO,MAAME,iBAAiB,GAAG,CAACL,OAAD,EAAkBC,IAAlB,KAAmC;AAClE,SAAO;AACLD,IAAAA,OAAO,EAAEA,OADJ;AAELC,IAAAA,IAAI,EAAEA,IAFD;AAGLK,IAAAA,EAAE,EAAEb,QAAQ;AAHP,GAAP;AAKD,CANM;AAQP,OAAO,MAAMc,oBAAoB,GAAG,CAClCP,OADkC,EAElCQ,OAFkC,KAG/B;AACH,SAAO,EACL,GAAGH,iBAAiB,CAACL,OAAD,EAAU,KAAV,CADf;AAEL,OAAGQ,OAFE;AAGLC,IAAAA,OAAO,EAAE;AAHJ,GAAP;AAKD,CATM;AAWP,OAAO,MAAMC,mBAAmB,GAAG,CACjCV,OADiC,EAEjCC,IAFiC,EAGjCO,OAHiC,KAI9B;AACH,SAAO,EAAE,GAAGH,iBAAiB,CAACL,OAAD,EAAUC,IAAV,CAAtB;AAAuC,OAAGO;AAA1C,GAAP;AACD,CANM;AAQP,OAAO,MAAMG,mBAAmB,GAAG,CACjCX,OADiC,EAEjCQ,OAFiC,KAG9B;AACH,SAAO,EAAE,GAAGH,iBAAiB,CAACL,OAAD,EAAU,MAAV,CAAtB;AAAyC,OAAGQ;AAA5C,GAAP;AACD,CALM;AAOP,OAAO,MAAMI,YAAY,GAAG,UAACC,IAAD,EAA6B;AACvD,MAAIA,IAAJ,EAAU;AAAA,sCAD+BC,IAC/B;AAD+BA,MAAAA,IAC/B;AAAA;;AACR,WAAOD,IAAI,CAAC,GAAGC,IAAJ,CAAX;AACD;AACF,CAJM","sourcesContent":["import {\n  IBaseMessage,\n  IMessage,\n  IMessageOptions,\n} from '../../interfaces/IMessages';\n\nexport const uniqueId = () => {\n  return Math.round(Date.now() * Math.random());\n};\n\nexport const botMessage = (message: IMessage) => {\n  if (message.type === 'bot') {\n    return true;\n  }\n  return false;\n};\n\nexport const userMessage = (message: IMessage) => {\n  if (message.type === 'user') {\n    return true;\n  }\n  return false;\n};\n\nexport const customMessage = (message: IMessage, customMessages: any) => {\n  const customMessage = customMessages[message.type];\n\n  if (customMessage) {\n    return true;\n  }\n  return false;\n};\n\nexport const createChatMessage = (message: string, type: string) => {\n  return {\n    message: message,\n    type: type,\n    id: uniqueId(),\n  };\n};\n\nexport const createChatBotMessage = (\n  message: string,\n  options: IMessageOptions\n) => {\n  return {\n    ...createChatMessage(message, 'bot'),\n    ...options,\n    loading: true,\n  };\n};\n\nexport const createCustomMessage = (\n  message: string,\n  type: string,\n  options: IMessageOptions\n) => {\n  return { ...createChatMessage(message, type), ...options };\n};\n\nexport const createClientMessage = (\n  message: string,\n  options: IMessageOptions\n) => {\n  return { ...createChatMessage(message, 'user'), ...options };\n};\n\nexport const callIfExists = (func: any, ...args: any) => {\n  if (func) {\n    return func(...args);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}