{"ast":null,"code":"import Other from './OtherQandA/Other';\nimport MoreOptions from './MoreOptions/MoreOptions'; //Action provider contains all the 'functions' of the chatbot\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.getStateRefDocs = () => {\n      return this.stateRef.docs;\n    };\n\n    this.setStateRefDocs = bool => {\n      this.stateRef.docs = bool;\n    };\n\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.handleInitialOptions = () => {\n      this.setState(state => ({ ...state,\n        howManyQs: 0,\n        InputQuestion: \"\",\n        handleOther: false,\n        DocumentSearch: -1\n      }));\n      this.addMessageToState(this.createChatBotMessage(`What would you like to search next?`, {\n        widget: \"InitialOptions\"\n      }));\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello! :)\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleConfusion = () => {\n      const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleDocuments = question => {\n      this.setState(state => ({ ...state,\n        InputQuestion: question\n      }));\n      this.setStateRefDocs(true);\n      var message = this.createChatBotMessage(\"Docs found:\", {\n        widget: \"DocSearch\"\n      });\n      this.addMessageToState(message);\n      message = this.createChatBotMessage(\"Type to search for more documents or...\", {\n        widget: \"DocOptions\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.handleExampleQ = (question, index) => {\n      //if index is event, it is a document dependent question. otherwise, it is 'other'\n      const tempmessage = \"Let me find the answer to '\" + String(question) + \"'...\";\n      const message = this.createChatBotMessage(tempmessage);\n      this.addMessageToState(message);\n\n      if (index % 2 == 0) {\n        this.handleDocuments(question);\n      } else {\n        this.handleOther(question, 1);\n      }\n    };\n\n    this.handleOtherSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        OtherOptions: false,\n        DocumentSearch: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What would you like to know about the claims process?\");\n      this.addMessageToState(message);\n    };\n\n    this.handleDocSetup = () => {\n      this.setState(state => ({ ...state,\n        InputQuestion: \"\",\n        DocumentSearch: true,\n        OtherOptions: false,\n        howManyQs: 0\n      }));\n      const message = this.createChatBotMessage(\"What are you searching for?:\");\n      this.addMessageToState(message);\n    };\n\n    this.handleOther = (question, num) => {\n      //console.log(\"num:\", num)\n      var message = this.createChatBotMessage(\"Results found:\", {\n        widget: \"Other\"\n      });\n      this.addMessageToState(message); //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n\n      var otherWidget = \"MoreOptions\";\n\n      if (!num) {\n        num = 4; // otherWidget = \"MoreResults\" *not sure about this chief*\n      }\n\n      this.setState(state => ({ ...state,\n        OtherOptions: true,\n        InputQuestion: state.InputQuestion + \" \" + question,\n        howManyQs: num\n      }));\n      message = this.createChatBotMessage(\"Have I answered your question?\", {\n        widget: otherWidget\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.stateRef = {\n      docs: false\n    };\n  } //adds message to list of chatbot messages. used in all subsequent funcs\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","ActionProvider","constructor","createChatBotMessage","setStateFunc","getStateRefDocs","stateRef","docs","setStateRefDocs","bool","addMessageToState","message","setState","prevState","messages","handleInitialOptions","state","howManyQs","InputQuestion","handleOther","DocumentSearch","widget","greet","handleConfusion","handleDocuments","question","handleExampleQ","index","tempmessage","String","handleOtherSetup","OtherOptions","handleDocSetup","num","otherWidget"],"mappings":"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","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    \n    this.stateRef = {docs:false};\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  getStateRefDocs = () => {\n    return this.stateRef.docs\n  }\n  setStateRefDocs = (bool) => {\n    this.stateRef.docs = bool\n  }\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n     this.setState((state) => ({\n      ...state,\n      InputQuestion:question\n     }))\n    this.setStateRefDocs(true)\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Type to search for more documents or...\" , { widget:\"DocOptions\" })\n    this.addMessageToState(message)\n    \n  }\n  //function to send example quesiton to chatbot\n  handleExampleQ = (question, index) => {\n    //if index is event, it is a document dependent question. otherwise, it is 'other'\n    const tempmessage = \"Let me find the answer to '\" + String(question) + \"'...\"\n    const message =  this.createChatBotMessage(tempmessage)\n    this.addMessageToState(message)\n    if (index % 2 == 0) {\n      this.handleDocuments(question)\n    }\n    else {\n      this.handleOther(question,1)\n    }\n    \n    \n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  //Prefaces Document Search\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      DocumentSearch:true,\n      OtherOptions:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion:state.InputQuestion +\" \" + question,\n      howManyQs:num\n     })\n    )\n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}