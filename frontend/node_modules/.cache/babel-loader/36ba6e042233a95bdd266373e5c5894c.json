{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/Chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ConditionallyRender from 'react-conditionally-render';\nimport UserChatMessage from '../UserChatMessage/UserChatMessage';\nimport ChatbotMessage from '../ChatbotMessage/ChatbotMessage';\nimport { botMessage, userMessage, customMessage, createChatMessage } from './chatUtils';\nimport ChatIcon from \"../../assets/icons/paper-plane.svg\";\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst Chat = _ref => {\n  _s();\n\n  let {\n    state,\n    setState,\n    widgetRegistry,\n    messageParser,\n    parse,\n    customComponents,\n    actionProvider,\n    botName,\n    customStyles,\n    headerText,\n    customMessages,\n    placeholderText,\n    validator,\n    setMessageContainerRef,\n    disableScrollToBottom,\n    messageHistory,\n    actions\n  } = _ref;\n  const {\n    messages\n  } = state;\n  const chatContainerRef = useRef(null);\n  const [input, setInputValue] = useState('');\n\n  const scrollIntoView = () => {\n    setTimeout(() => {\n      if (chatContainerRef.current) {\n        var _chatContainerRef$cur;\n\n        chatContainerRef.current.scrollTop = chatContainerRef === null || chatContainerRef === void 0 ? void 0 : (_chatContainerRef$cur = chatContainerRef.current) === null || _chatContainerRef$cur === void 0 ? void 0 : _chatContainerRef$cur.scrollHeight;\n      }\n    }, 50);\n  };\n\n  useEffect(() => {\n    if (disableScrollToBottom) return;\n    scrollIntoView();\n  });\n  useEffect(() => {\n    setMessageContainerRef(chatContainerRef);\n  }, [chatContainerRef.current]);\n\n  const showAvatar = (messages, index) => {\n    if (index === 0) return true;\n    const lastMessage = messages[index - 1];\n\n    if (lastMessage.type === 'bot' && !lastMessage.widget) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const renderMessages = () => {\n    return messages.map((messageObject, index) => {\n      if (botMessage(messageObject)) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: renderChatbotMessage(messageObject, index)\n        }, messageObject.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (userMessage(messageObject)) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: renderUserMessage(messageObject)\n        }, messageObject.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (customMessage(messageObject, customMessages)) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: renderCustomMessage(messageObject)\n        }, messageObject.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  };\n\n  const renderCustomMessage = messageObject => {\n    const customMessage = customMessages[messageObject.type];\n    const props = {\n      setState,\n      state,\n      scrollIntoView,\n      actionProvider,\n      payload: messageObject.payload,\n      actions\n    };\n\n    if (messageObject.widget) {\n      const widget = widgetRegistry.getWidget(messageObject.widget, { ...state,\n        scrollIntoView,\n        payload: messageObject.payload,\n        actions\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [customMessage(props), widget ? widget : null]\n      }, void 0, true);\n    }\n\n    return customMessage(props);\n  };\n\n  const renderUserMessage = messageObject => {\n    const widget = widgetRegistry.getWidget(messageObject.widget, { ...state,\n      scrollIntoView,\n      payload: messageObject.payload,\n      actions\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserChatMessage, {\n        message: messageObject.message,\n        customComponents: customComponents\n      }, messageObject.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), widget ? widget : null]\n    }, void 0, true);\n  };\n\n  const renderChatbotMessage = (messageObject, index) => {\n    let withAvatar;\n\n    if (messageObject.withAvatar) {\n      withAvatar = messageObject.withAvatar;\n    } else {\n      withAvatar = showAvatar(messages, index);\n    }\n\n    const chatbotMessageProps = { ...messageObject,\n      setState,\n      state,\n      customComponents,\n      widgetRegistry,\n      messages,\n      actions\n    };\n\n    if (messageObject.widget) {\n      const widget = widgetRegistry.getWidget(chatbotMessageProps.widget, { ...state,\n        scrollIntoView,\n        payload: messageObject.payload,\n        actions\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_createElement(ChatbotMessage, {\n          customStyles: customStyles.botMessageBox,\n          withAvatar: withAvatar,\n          ...chatbotMessageProps,\n          key: messageObject.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/_jsxDEV(ConditionallyRender, {\n          condition: !chatbotMessageProps.loading,\n          show: widget ? widget : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ChatbotMessage, {\n      customStyles: customStyles.botMessageBox,\n      withAvatar: withAvatar,\n      ...chatbotMessageProps,\n      customComponents: customComponents,\n      messages: messages,\n      setState: setState\n    }, messageObject.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validator && typeof validator === 'function') {\n      if (validator(input)) {\n        handleValidMessage();\n\n        if (parse) {\n          return parse(input);\n        }\n\n        messageParser.parse(input);\n      }\n    } else {\n      handleValidMessage();\n\n      if (parse) {\n        return parse(input);\n      }\n\n      messageParser.parse(input);\n    }\n  };\n\n  const handleValidMessage = () => {\n    setState(state => ({ ...state,\n      messages: [...state.messages, createChatMessage(input, 'user')]\n    }));\n    scrollIntoView();\n    setInputValue('');\n  };\n\n  const customButtonStyle = {\n    backgroundColor: ''\n  };\n\n  if (customStyles && customStyles.chatButton) {\n    customButtonStyle.backgroundColor = customStyles.chatButton.backgroundColor;\n  }\n\n  let header = `Conversation with ${botName}`;\n\n  if (headerText) {\n    header = headerText;\n  }\n\n  let placeholder = 'Write your message here';\n\n  if (placeholderText) {\n    placeholder = placeholderText;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"react-chatbot-kit-chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"react-chatbot-kit-chat-inner-container\",\n      children: [/*#__PURE__*/_jsxDEV(ConditionallyRender, {\n        condition: !!customComponents.header,\n        show: customComponents.header && customComponents.header(actionProvider),\n        elseShow: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react-chatbot-kit-chat-header\",\n          children: header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"react-chatbot-kit-chat-message-container\",\n        ref: chatContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(ConditionallyRender, {\n          condition: typeof messageHistory === 'string' && Boolean(messageHistory),\n          show: /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: messageHistory\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            paddingBottom: '15px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"react-chatbot-kit-chat-input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"react-chatbot-kit-chat-input-form\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"react-chatbot-kit-chat-input\",\n            placeholder: placeholder,\n            value: input,\n            onChange: e => setInputValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"react-chatbot-kit-chat-btn-send\",\n            style: customButtonStyle,\n            children: /*#__PURE__*/_jsxDEV(ChatIcon, {\n              className: \"react-chatbot-kit-chat-btn-send-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"J7KcBwVFrjTkeuaVBFPlQjRGWuI=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/Chat/Chat.tsx"],"names":["React","useState","useRef","useEffect","ConditionallyRender","UserChatMessage","ChatbotMessage","botMessage","userMessage","customMessage","createChatMessage","Chat","state","setState","widgetRegistry","messageParser","parse","customComponents","actionProvider","botName","customStyles","headerText","customMessages","placeholderText","validator","setMessageContainerRef","disableScrollToBottom","messageHistory","actions","messages","chatContainerRef","input","setInputValue","scrollIntoView","setTimeout","current","scrollTop","scrollHeight","showAvatar","index","lastMessage","type","widget","renderMessages","map","messageObject","renderChatbotMessage","id","renderUserMessage","renderCustomMessage","props","payload","getWidget","message","withAvatar","chatbotMessageProps","botMessageBox","loading","handleSubmit","e","preventDefault","handleValidMessage","customButtonStyle","backgroundColor","chatButton","header","placeholder","Boolean","__html","paddingBottom","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, SetStateAction } from 'react';\nimport ConditionallyRender from 'react-conditionally-render';\n\nimport UserChatMessage from '../UserChatMessage/UserChatMessage';\nimport ChatbotMessage from '../ChatbotMessage/ChatbotMessage';\n\nimport {\n  botMessage,\n  userMessage,\n  customMessage,\n  createChatMessage,\n} from './chatUtils';\n\nimport ChatIcon from '../../assets/icons/paper-plane.svg';\n\nimport './Chat.css';\nimport {\n  ICustomComponents,\n  ICustomMessage,\n  ICustomStyles,\n} from '../../interfaces/IConfig';\nimport { IMessage } from '../../interfaces/IMessages';\nimport { string } from 'prop-types';\n\ninterface IChatProps {\n  setState: React.Dispatch<SetStateAction<any>>;\n  widgetRegistry: any;\n  messageParser: any;\n  actionProvider: any;\n  customComponents: ICustomComponents;\n  botName: string;\n  customStyles: ICustomStyles;\n  headerText: string;\n  customMessages: ICustomMessage;\n  placeholderText: string;\n  validator: (input: string) => Boolean;\n  state: any;\n  setMessageContainerRef: React.Dispatch<SetStateAction<any>>;\n  disableScrollToBottom: boolean;\n  messageHistory: IMessage[] | string;\n  parse?: (message: string) => void;\n  actions?: object;\n}\n\nconst Chat = ({\n  state,\n  setState,\n  widgetRegistry,\n  messageParser,\n  parse,\n  customComponents,\n  actionProvider,\n  botName,\n  customStyles,\n  headerText,\n  customMessages,\n  placeholderText,\n  validator,\n  setMessageContainerRef,\n  disableScrollToBottom,\n  messageHistory,\n  actions,\n}: IChatProps) => {\n  const { messages } = state;\n  const chatContainerRef = useRef(null);\n\n  const [input, setInputValue] = useState('');\n\n  const scrollIntoView = () => {\n    setTimeout(() => {\n      if (chatContainerRef.current) {\n        chatContainerRef.current.scrollTop =\n          chatContainerRef?.current?.scrollHeight;\n      }\n    }, 50);\n  };\n\n  useEffect(() => {\n    if (disableScrollToBottom) return;\n    scrollIntoView();\n  });\n\n  useEffect(() => {\n    setMessageContainerRef(chatContainerRef);\n  }, [chatContainerRef.current]);\n\n  const showAvatar = (messages: any[], index: number) => {\n    if (index === 0) return true;\n\n    const lastMessage = messages[index - 1];\n\n    if (lastMessage.type === 'bot' && !lastMessage.widget) {\n      return false;\n    }\n    return true;\n  };\n\n  const renderMessages = () => {\n    return messages.map((messageObject: IMessage, index: number) => {\n      if (botMessage(messageObject)) {\n        return (\n          <React.Fragment key={messageObject.id}>\n            {renderChatbotMessage(messageObject, index)}\n          </React.Fragment>\n        );\n      }\n\n      if (userMessage(messageObject)) {\n        return (\n          <React.Fragment key={messageObject.id}>\n            {renderUserMessage(messageObject)}\n          </React.Fragment>\n        );\n      }\n\n      if (customMessage(messageObject, customMessages)) {\n        return (\n          <React.Fragment key={messageObject.id}>\n            {renderCustomMessage(messageObject)}\n          </React.Fragment>\n        );\n      }\n    });\n  };\n\n  const renderCustomMessage = (messageObject: IMessage) => {\n    const customMessage = customMessages[messageObject.type];\n\n    const props = {\n      setState,\n      state,\n      scrollIntoView,\n      actionProvider,\n      payload: messageObject.payload,\n      actions,\n    };\n\n    if (messageObject.widget) {\n      const widget = widgetRegistry.getWidget(messageObject.widget, {\n        ...state,\n        scrollIntoView,\n        payload: messageObject.payload,\n        actions,\n      });\n      return (\n        <>\n          {customMessage(props)}\n          {widget ? widget : null}\n        </>\n      );\n    }\n\n    return customMessage(props);\n  };\n\n  const renderUserMessage = (messageObject: IMessage) => {\n    const widget = widgetRegistry.getWidget(messageObject.widget, {\n      ...state,\n      scrollIntoView,\n      payload: messageObject.payload,\n      actions,\n    });\n    return (\n      <>\n        <UserChatMessage\n          message={messageObject.message}\n          key={messageObject.id}\n          customComponents={customComponents}\n        />\n        {widget ? widget : null}\n      </>\n    );\n  };\n\n  const renderChatbotMessage = (messageObject: IMessage, index: number) => {\n    let withAvatar;\n    if (messageObject.withAvatar) {\n      withAvatar = messageObject.withAvatar;\n    } else {\n      withAvatar = showAvatar(messages, index);\n    }\n\n    const chatbotMessageProps = {\n      ...messageObject,\n      setState,\n      state,\n      customComponents,\n      widgetRegistry,\n      messages,\n      actions,\n    };\n\n    if (messageObject.widget) {\n      const widget = widgetRegistry.getWidget(chatbotMessageProps.widget, {\n        ...state,\n        scrollIntoView,\n        payload: messageObject.payload,\n        actions,\n      });\n      return (\n        <>\n          <ChatbotMessage\n            customStyles={customStyles.botMessageBox}\n            withAvatar={withAvatar}\n            {...chatbotMessageProps}\n            key={messageObject.id}\n          />\n          <ConditionallyRender\n            condition={!chatbotMessageProps.loading}\n            show={widget ? widget : null}\n          />\n        </>\n      );\n    }\n\n    return (\n      <ChatbotMessage\n        customStyles={customStyles.botMessageBox}\n        key={messageObject.id}\n        withAvatar={withAvatar}\n        {...chatbotMessageProps}\n        customComponents={customComponents}\n        messages={messages}\n        setState={setState}\n      />\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (validator && typeof validator === 'function') {\n      if (validator(input)) {\n        handleValidMessage();\n        if (parse) {\n          return parse(input);\n        }\n        messageParser.parse(input);\n      }\n    } else {\n      handleValidMessage();\n      if (parse) {\n        return parse(input);\n      }\n      messageParser.parse(input);\n    }\n  };\n\n  const handleValidMessage = () => {\n    setState((state: any) => ({\n      ...state,\n      messages: [...state.messages, createChatMessage(input, 'user')],\n    }));\n\n    scrollIntoView();\n    setInputValue('');\n  };\n\n  const customButtonStyle = { backgroundColor: '' };\n  if (customStyles && customStyles.chatButton) {\n    customButtonStyle.backgroundColor = customStyles.chatButton.backgroundColor;\n  }\n\n  let header = `Conversation with ${botName}`;\n  if (headerText) {\n    header = headerText;\n  }\n\n  let placeholder = 'Write your message here';\n  if (placeholderText) {\n    placeholder = placeholderText;\n  }\n\n  return (\n    <div className=\"react-chatbot-kit-chat-container\">\n      <div className=\"react-chatbot-kit-chat-inner-container\">\n        <ConditionallyRender\n          condition={!!customComponents.header}\n          show={\n            customComponents.header && customComponents.header(actionProvider)\n          }\n          elseShow={\n            <div className=\"react-chatbot-kit-chat-header\">{header}</div>\n          }\n        />\n\n        <div\n          className=\"react-chatbot-kit-chat-message-container\"\n          ref={chatContainerRef}\n        >\n          <ConditionallyRender\n            condition={\n              typeof messageHistory === 'string' && Boolean(messageHistory)\n            }\n            show={\n              <div\n                dangerouslySetInnerHTML={{ __html: messageHistory as string }}\n              />\n            }\n          />\n\n          {renderMessages()}\n          <div style={{ paddingBottom: '15px' }} />\n        </div>\n\n        <div className=\"react-chatbot-kit-chat-input-container\">\n          <form\n            className=\"react-chatbot-kit-chat-input-form\"\n            onSubmit={handleSubmit}\n          >\n            <input\n              className=\"react-chatbot-kit-chat-input\"\n              placeholder={placeholder}\n              value={input}\n              onChange={(e) => setInputValue(e.target.value)}\n            />\n            <button\n              className=\"react-chatbot-kit-chat-btn-send\"\n              style={customButtonStyle}\n            >\n              <ChatIcon className=\"react-chatbot-kit-chat-btn-send-icon\" />\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}