{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DocSearch = props => {\n  _s();\n\n  const [count, setCount] = React.useState(0); //const [next, setNext]  = React.useState(true);\n\n  console.log(\"prps ds:\", props);\n  var InputQuestion = props['InputQuestion']; //must call dispatch or else results will stay at zero\n\n  const dispatch = useDispatch();\n  var {\n    docs\n  } = useSelector(state => state.data);\n\n  if (count == 0) {\n    props.actionProvider.setStateRef(false);\n  }\n\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    })); //setCount(docs.length) //One update too late\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n      children: [count, \" docs found\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n\n_s(DocSearch, \"uHS++B+FVtyIYDpUqdo+3fuquiw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DocSearch;\nexport default DocSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useDispatch","useSelector","DocSearch","props","count","setCount","useState","console","log","InputQuestion","dispatch","docs","state","data","actionProvider","setStateRef"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA;AACA;;;;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,QAAN,CAAe,CAAf,CAA1B,CADyB,CAEzB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,KAAxB;AACA,MAAIM,aAAa,GAAGN,KAAK,CAAC,eAAD,CAAzB,CAJyB,CAKzB;;AACA,QAAMO,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAI;AAACW,IAAAA;AAAD,MAASV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;;AACA,MAAIT,KAAK,IAAI,CAAb,EAAgB;AACZD,IAAAA,KAAK,CAACW,cAAN,CAAqBC,WAArB,CAAiC,KAAjC;AACH;;AACDhB,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,QAAQ,CAACb,aAAa,CAAC;AAACY,MAAAA;AAAD,KAAD,CAAd,CAAR,CADY,CAGZ;AACH,GAJQ,EAIN,EAJM,CAAT;AAKA,sBAAS;AAAA,iCAAG;AAAA,iBAAIL,KAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA,kBAAT;AACH,CAjBD;;GAAMF,S;UAMeF,W,EACJC,W;;;KAPXC,S;AAoBN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\nconst DocSearch = (props) => {\n    const [count, setCount] = React.useState(0);\n    //const [next, setNext]  = React.useState(true);\n    console.log(\"prps ds:\", props)\n    var InputQuestion = props['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    if (count == 0) {\n        props.actionProvider.setStateRef(false)\n    }\n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        \n        //setCount(docs.length) //One update too late\n    }, [])\n    return ( <> <b>{count} docs found</b> </> )\n}\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}