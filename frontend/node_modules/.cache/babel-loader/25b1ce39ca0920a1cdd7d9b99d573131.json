{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport \"./Other.css\";\nimport OtherMore from \"./OtherMore.js\";\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Other = params => {\n  _s();\n\n  //we call axios dispatch here\n  var InputQuestion = params['InputQuestion']; //console.log(\"Other | hm\",params)\n\n  const dispatch = useDispatch();\n  var {\n    obj\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n  }, []);\n  var objlen = length(obj);\n  console.log(\"objlen:\", objlen);\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n  //mapping requires key index for each entry\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: objlen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), \" docs found\"]\n  }, void 0, true)\n  /*<>\n     {obj && Object.keys(obj).map((item,i) => (\n         <tbody key={i}>\n             <tr>\n                 <td><b>{obj[item].question}</b></td>\n                 <td>{obj[item].link}</td>\n             </tr>\n         </tbody>\n  ))}\n       \n  </*/\n  ;\n};\n\n_s(Other, \"+23bocEW8l2HOVCXQrrC9ERIUJA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Other;\nexport default Other;\n\nvar _c;\n\n$RefreshReg$(_c, \"Other\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useState","useDispatch","useSelector","OtherMore","Other","params","InputQuestion","dispatch","obj","state","data","objlen","length","console","log"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA;AACA;;;;;AACA,MAAMC,KAAK,GAAIC,MAAD,IAAY;AAAA;;AACtB;AACA,MAAIC,aAAa,GAAGD,MAAM,CAAC,eAAD,CAA1B,CAFsB,CAGtB;;AACA,QAAME,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAI;AAACO,IAAAA;AAAD,MAAQN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAvB;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,QAAQ,CAACV,aAAa,CAAC;AAACS,MAAAA;AAAD,KAAD,CAAd,CAAR;AAEH,GAHQ,EAGN,EAHM,CAAT;AAIA,MAAIK,MAAM,GAAGC,MAAM,CAACJ,GAAD,CAAnB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBH,MAAtB;AACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AACA,sBACE;AAAA,4BAAE;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAF;AAAA;AACG;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZI;AAeH,CApCD;;GAAMP,K;UAIeH,W,EACLC,W;;;KALVE,K;AAuCN,eAAeA,KAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport \"./Other.css\"\nimport OtherMore from \"./OtherMore.js\"\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\nconst Other = (params) => {\n    //we call axios dispatch here\n    var InputQuestion = params['InputQuestion']\n    //console.log(\"Other | hm\",params)\n    const dispatch = useDispatch();\n    var {obj} = useSelector(state => state.data)\n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        \n    }, [])\n    var objlen = length(obj)\n    console.log(\"objlen:\",objlen)\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n    //mapping requires key index for each entry\n    return ( \n      <><b>{objlen}</b> docs found</> \n         /*<>\n            {obj && Object.keys(obj).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{obj[item].question}</b></td>\n                        <td>{obj[item].link}</td>\n                    </tr>\n                </tbody>\n        ))}\n        \n     \n    </*/)\n       \n}\n\n\nexport default Other;\n"]},"metadata":{},"sourceType":"module"}