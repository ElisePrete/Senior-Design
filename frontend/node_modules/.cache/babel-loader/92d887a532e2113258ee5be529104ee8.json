{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Count = count => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n      className: \"results\",\n      children: [count, \" docs found\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n\n_c = Count;\nconst DocSearch = /*#__PURE__*/React.memo(_c2 = _s(props => {\n  _s();\n\n  const [count, setCount] = React.useState(0); //const [next, setNext]  = React.useState(true);\n\n  console.log(\"prps ds:\", props);\n  var InputQuestion = props['InputQuestion']; //must call dispatch or else results will stay at zero\n\n  const dispatch = useDispatch();\n  var {\n    docs\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    })); //One update too late\n  }, []);\n  const value = getState().docs; //<-- returns the state of your reducer, you can follow this up with whatever value you want to check\n\n  if (value) {\n    setCount(docs.length);\n    return Count(count);\n  } // const count = docs.length\n  //return Count(count)\n  // setCount(docs.length)\n\n}, \"uHS++B+FVtyIYDpUqdo+3fuquiw=\", false, function () {\n  return [useDispatch, useSelector];\n}));\n_c3 = DocSearch;\nexport default DocSearch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Count\");\n$RefreshReg$(_c2, \"DocSearch$React.memo\");\n$RefreshReg$(_c3, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useDispatch","useSelector","Count","count","DocSearch","memo","props","setCount","useState","console","log","InputQuestion","dispatch","docs","state","data","value","getState","length"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA;AACA;;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,sBAAS;AAAA,iCAAG;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA,iBAAwBA,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA,kBAAT;AACH,CAFD;;KAAMD,K;AAKN,MAAME,SAAS,gBAAGN,KAAK,CAACO,IAAN,UAAYC,KAAD,IAAW;AAAA;;AACpC,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBT,KAAK,CAACU,QAAN,CAAe,CAAf,CAA1B,CADoC,CAEpC;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,KAAxB;AACA,MAAIK,aAAa,GAAGL,KAAK,CAAC,eAAD,CAAzB,CAJoC,CAKpC;;AACA,QAAMM,QAAQ,GAAGZ,WAAW,EAA5B;AACA,MAAI;AAACa,IAAAA;AAAD,MAASZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACf,aAAa,CAAC;AAACc,MAAAA;AAAD,KAAD,CAAd,CAAR,CADY,CAGX;AACJ,GAJQ,EAIN,EAJM,CAAT;AAKA,QAAMK,KAAK,GAAGC,QAAQ,GAAGJ,IAAzB,CAdoC,CAcN;;AAC9B,MAAGG,KAAH,EAAS;AACLT,IAAAA,QAAQ,CAACM,IAAI,CAACK,MAAN,CAAR;AACA,WAAOhB,KAAK,CAACC,KAAD,CAAZ;AACH,GAlBmC,CAmBrC;AACC;AACD;;AAEF,CAvBiB;AAAA,UAMGH,WANH,EAODC,WAPC;AAAA,GAAlB;MAAMG,S;AA0BN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nconst Count = (count) => {\n    return ( <> <b className='results'>{count} docs found</b> </> )\n}\n\n\nconst DocSearch = React.memo((props) => {\n    const [count, setCount] = React.useState(0);\n    //const [next, setNext]  = React.useState(true);\n    console.log(\"prps ds:\", props)\n    var InputQuestion = props['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    \n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        \n         //One update too late\n    }, [])\n    const value = getState().docs //<-- returns the state of your reducer, you can follow this up with whatever value you want to check\n    if(value){\n        setCount(docs.length)\n        return Count(count)\n    }\n   // const count = docs.length\n    //return Count(count)\n   // setCount(docs.length)\n    \n})\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}