{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; //import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\n\nconst DocSearch = params => {\n  _s();\n\n  // var [docs, setDocs] = useState([])\n  //we call axios dispatch here\n  var InputQuestion = params['InputQuestion'];\n  const dispatch = useDispatch();\n  var {\n    docs\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n\n    if (docs.length > 1) {\n      console.log(\"docs are happening\");\n    }\n\n    docs = docs;\n    console.log(\"docs:!\", docs);\n  }, [docs]); //.then(response => console.log(\"response!:\",response.length))\n  //var docslen = docs.length\n  //console.log(\"docslen:\",docslen)\n\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(docs)\n    }*/\n  //mapping requires key index for each entry\n\n  /* if (docs) {\n       return ( <>\n           {docs && Object.keys(docs).map((item,i) => (\n               <tbody key={i}>\n                   <tr>\n                       <td><b>{docs[item].tags}</b></td>\n                   </tr>\n               </tbody>\n       ))} </>)\n   }*/\n}; //<><b>{docslen}</b> docs found\n\n/*<>\n   {docs && docsect.keys(docs).map((item,i) => (\n       <tbody key={i}>\n           <tr>\n               <td><b>{docs[item].question}</b></td>\n               <td>{docs[item].link}</td>\n           </tr>\n       </tbody>\n))}\n     \n</*/\n\n\n_s(DocSearch, \"RM+6Em/LKIJ/HZpiF/pHZdbAtGI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DocSearch;\nexport default DocSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useState","useDispatch","useSelector","DocSearch","params","InputQuestion","dispatch","docs","state","data","length","console","log"],"mappings":";;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;AACA;;AACA;AACA;;AACA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAAA;;AAC3B;AACC;AACA,MAAIC,aAAa,GAAGD,MAAM,CAAC,eAAD,CAA1B;AAEA,QAAME,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAI;AAACM,IAAAA;AAAD,MAASL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AAGAV,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACT,aAAa,CAAC;AAACQ,MAAAA;AAAD,KAAD,CAAd,CAAR;;AACA,QAAIE,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AACDL,IAAAA,IAAI,GAAGA,IAAP;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBL,IAArB;AACH,GAPQ,EAON,CAACA,IAAD,CAPM,CAAT,CAT0B,CAgBf;AACX;AACA;;AACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAtCD,C,CAwCM;;AACG;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnDMJ,S;UAKeF,W,EACJC,W;;;KANXC,S;AAuDN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n//import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\nconst DocSearch = (params) => {\n   // var [docs, setDocs] = useState([])\n    //we call axios dispatch here\n    var InputQuestion = params['InputQuestion']\n    \n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    \n    \n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        if (docs.length > 1) {\n            console.log(\"docs are happening\")\n        }\n        docs = docs\n        console.log(\"docs:!\",docs)\n    }, [docs]) //.then(response => console.log(\"response!:\",response.length))\n    //var docslen = docs.length\n    //console.log(\"docslen:\",docslen)\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(docs)\n    }*/\n    //mapping requires key index for each entry\n   /* if (docs) {\n        return ( <>\n            {docs && Object.keys(docs).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{docs[item].tags}</b></td>\n                    </tr>\n                </tbody>\n        ))} </>)\n    }*/\n}\n   \n      //<><b>{docslen}</b> docs found\n         /*<>\n            {docs && docsect.keys(docs).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{docs[item].question}</b></td>\n                        <td>{docs[item].link}</td>\n                    </tr>\n                </tbody>\n        ))}\n        \n     \n    </*/\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}