{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Count = count => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n      className: \"results\",\n      children: [count, \" docs found\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n\n_c = Count;\nconst DocSearch = /*#__PURE__*/React.memo(_c2 = _s(props => {\n  _s();\n\n  //const [count, setCount] = React.useState(0);\n  //const [next, setNext]  = React.useState(true);\n  console.log(\"prps ds:\", props);\n  var InputQuestion = props['InputQuestion']; //must call dispatch or else results will stay at zero\n\n  const dispatch = useDispatch();\n  var {\n    docs\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    })); //One update too late\n  }, []);\n  const count = docs.length;\n  return Count(count); // setCount(docs.length)\n}, \"RM+6Em/LKIJ/HZpiF/pHZdbAtGI=\", false, function () {\n  return [useDispatch, useSelector];\n}));\n_c3 = DocSearch;\nexport default DocSearch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Count\");\n$RefreshReg$(_c2, \"DocSearch$React.memo\");\n$RefreshReg$(_c3, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useDispatch","useSelector","Count","count","DocSearch","memo","props","console","log","InputQuestion","dispatch","docs","state","data","length"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA;AACA;;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,sBAAS;AAAA,iCAAG;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA,iBAAwBA,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA,kBAAT;AACH,CAFD;;KAAMD,K;AAKN,MAAME,SAAS,gBAAGN,KAAK,CAACO,IAAN,UAAYC,KAAD,IAAW;AAAA;;AACpC;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,KAAxB;AACA,MAAIG,aAAa,GAAGH,KAAK,CAAC,eAAD,CAAzB,CAJoC,CAKpC;;AACA,QAAMI,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAI;AAACW,IAAAA;AAAD,MAASV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,QAAQ,CAACb,aAAa,CAAC;AAACY,MAAAA;AAAD,KAAD,CAAd,CAAR,CADY,CAGX;AACJ,GAJQ,EAIN,EAJM,CAAT;AAKA,QAAMN,KAAK,GAAGQ,IAAI,CAACG,MAAnB;AACA,SAAOZ,KAAK,CAACC,KAAD,CAAZ,CAfoC,CAgBrC;AAEF,CAlBiB;AAAA,UAMGH,WANH,EAODC,WAPC;AAAA,GAAlB;MAAMG,S;AAqBN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nconst Count = (count) => {\n    return ( <> <b className='results'>{count} docs found</b> </> )\n}\n\n\nconst DocSearch = React.memo((props) => {\n    //const [count, setCount] = React.useState(0);\n    //const [next, setNext]  = React.useState(true);\n    console.log(\"prps ds:\", props)\n    var InputQuestion = props['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    \n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        \n         //One update too late\n    }, [])\n    const count = docs.length\n    return Count(count)\n   // setCount(docs.length)\n    \n})\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}