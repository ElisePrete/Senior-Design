{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/Chatbot/Chatbot.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Chat from '../Chat/Chat';\nimport ChatbotError from '../ChatbotError/ChatbotError';\nimport { getCustomStyles, getCustomComponents, getBotName, getCustomMessages, isConstructor } from './utils';\nimport useChatbot from '../../hooks/useChatbot';\nimport { createChatBotMessage } from '../..';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chatbot = _ref => {\n  _s();\n\n  let {\n    actionProvider,\n    messageParser,\n    config,\n    headerText,\n    placeholderText,\n    saveMessages,\n    messageHistory,\n    runInitialMessagesWithHistory,\n    disableScrollToBottom,\n    validator,\n    ...rest\n  } = _ref;\n  const {\n    configurationError,\n    invalidPropsError,\n    ActionProvider,\n    MessageParser,\n    widgetRegistry,\n    actionProv,\n    messagePars,\n    state,\n    setState,\n    setMessageContainerRef\n  } = useChatbot({\n    config,\n    actionProvider,\n    messageParser,\n    messageHistory,\n    saveMessages,\n    runInitialMessagesWithHistory,\n    ...rest\n  });\n\n  if (configurationError) {\n    return /*#__PURE__*/_jsxDEV(ChatbotError, {\n      message: configurationError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (invalidPropsError.length) {\n    return /*#__PURE__*/_jsxDEV(ChatbotError, {\n      message: invalidPropsError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n\n  const customStyles = getCustomStyles(config);\n  const customComponents = getCustomComponents(config);\n  const botName = getBotName(config);\n  const customMessages = getCustomMessages(config);\n\n  if (isConstructor(ActionProvider) && isConstructor(MessageParser)) {\n    return /*#__PURE__*/_jsxDEV(Chat, {\n      state: state,\n      setState: setState,\n      widgetRegistry: widgetRegistry,\n      actionProvider: actionProv,\n      messageParser: messagePars,\n      customMessages: customMessages,\n      customComponents: { ...customComponents\n      },\n      botName: botName,\n      customStyles: { ...customStyles\n      },\n      headerText: headerText,\n      placeholderText: placeholderText,\n      setMessageContainerRef: setMessageContainerRef,\n      validator: validator,\n      messageHistory: messageHistory,\n      disableScrollToBottom: disableScrollToBottom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ActionProvider, {\n      setState: setState,\n      createChatBotMessage: createChatBotMessage,\n      children: /*#__PURE__*/_jsxDEV(MessageParser, {\n        children: /*#__PURE__*/_jsxDEV(Chat, {\n          state: state,\n          setState: setState,\n          widgetRegistry: widgetRegistry,\n          actionProvider: ActionProvider,\n          messageParser: MessageParser,\n          customMessages: customMessages,\n          customComponents: { ...customComponents\n          },\n          botName: botName,\n          customStyles: { ...customStyles\n          },\n          headerText: headerText,\n          placeholderText: placeholderText,\n          setMessageContainerRef: setMessageContainerRef,\n          validator: validator,\n          messageHistory: messageHistory,\n          disableScrollToBottom: disableScrollToBottom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Chatbot, \"83+6LyXcZ4Ze7G9HSDYCq3Z3/vM=\", false, function () {\n  return [useChatbot];\n});\n\n_c = Chatbot;\nexport default Chatbot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/components/Chatbot/Chatbot.tsx"],"names":["React","Chat","ChatbotError","getCustomStyles","getCustomComponents","getBotName","getCustomMessages","isConstructor","useChatbot","createChatBotMessage","Chatbot","actionProvider","messageParser","config","headerText","placeholderText","saveMessages","messageHistory","runInitialMessagesWithHistory","disableScrollToBottom","validator","rest","configurationError","invalidPropsError","ActionProvider","MessageParser","widgetRegistry","actionProv","messagePars","state","setState","setMessageContainerRef","length","customStyles","customComponents","botName","customMessages"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Chat from '../Chat/Chat';\n\nimport ChatbotError from '../ChatbotError/ChatbotError';\n\nimport IConfig from '../../interfaces/IConfig';\n\nimport {\n  getCustomStyles,\n  getCustomComponents,\n  getBotName,\n  getCustomMessages,\n  isConstructor,\n} from './utils';\n\nimport useChatbot from '../../hooks/useChatbot';\nimport { IMessage } from '../../interfaces/IMessages';\nimport { createChatBotMessage } from '../..';\n\ninterface IChatbotProps {\n  actionProvider: any;\n  messageParser: any;\n  config: IConfig;\n  headerText?: string;\n  placeholderText?: string;\n  saveMessages?: (ref: any) => any;\n  messageHistory?: IMessage[] | string;\n  validator?: (input: string) => Boolean;\n  runInitialMessagesWithHistory?: Boolean;\n  disableScrollToBottom?: boolean;\n}\n\nconst Chatbot = ({\n  actionProvider,\n  messageParser,\n  config,\n  headerText,\n  placeholderText,\n  saveMessages,\n  messageHistory,\n  runInitialMessagesWithHistory,\n  disableScrollToBottom,\n  validator,\n  ...rest\n}: IChatbotProps) => {\n  const {\n    configurationError,\n    invalidPropsError,\n    ActionProvider,\n    MessageParser,\n    widgetRegistry,\n    actionProv,\n    messagePars,\n    state,\n    setState,\n    setMessageContainerRef,\n  } = useChatbot({\n    config,\n    actionProvider,\n    messageParser,\n    messageHistory,\n    saveMessages,\n    runInitialMessagesWithHistory,\n    ...rest,\n  });\n\n  if (configurationError) {\n    return <ChatbotError message={configurationError} />;\n  }\n\n  if (invalidPropsError.length) {\n    return <ChatbotError message={invalidPropsError} />;\n  }\n\n  const customStyles = getCustomStyles(config);\n  const customComponents = getCustomComponents(config);\n  const botName = getBotName(config);\n  const customMessages = getCustomMessages(config);\n\n  if (isConstructor(ActionProvider) && isConstructor(MessageParser)) {\n    return (\n      <Chat\n        state={state}\n        setState={setState}\n        widgetRegistry={widgetRegistry}\n        actionProvider={actionProv}\n        messageParser={messagePars}\n        customMessages={customMessages}\n        customComponents={{ ...customComponents }}\n        botName={botName}\n        customStyles={{ ...customStyles }}\n        headerText={headerText}\n        placeholderText={placeholderText}\n        setMessageContainerRef={setMessageContainerRef}\n        validator={validator}\n        messageHistory={messageHistory}\n        disableScrollToBottom={disableScrollToBottom}\n      />\n    );\n  } else {\n    return (\n      <ActionProvider\n        setState={setState}\n        createChatBotMessage={createChatBotMessage}\n      >\n        <MessageParser>\n          <Chat\n            state={state}\n            setState={setState}\n            widgetRegistry={widgetRegistry}\n            actionProvider={ActionProvider}\n            messageParser={MessageParser}\n            customMessages={customMessages}\n            customComponents={{ ...customComponents }}\n            botName={botName}\n            customStyles={{ ...customStyles }}\n            headerText={headerText}\n            placeholderText={placeholderText}\n            setMessageContainerRef={setMessageContainerRef}\n            validator={validator}\n            messageHistory={messageHistory}\n            disableScrollToBottom={disableScrollToBottom}\n          />\n        </MessageParser>\n      </ActionProvider>\n    );\n  }\n};\n\nexport default Chatbot;\n"]},"metadata":{},"sourceType":"module"}