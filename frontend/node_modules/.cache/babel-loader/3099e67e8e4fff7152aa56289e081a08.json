{"ast":null,"code":"import Other from './OtherQandA/Other';\nimport MoreOptions from './MoreOptions/MoreOptions'; //Action provider contains all the 'functions' of the chatbot\n\nclass ActionProvider {\n  constructor(_createChatBotMessage, setStateFunc, stateRef\n  /*createClientMessage,\n  \n  createCustomMessage,\n  ...rest*/\n  ) {\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.handleInitialOptions = () => {\n      createChatBotMessage(`What would you like to search next?`, {\n        widget: \"InitialOptions\"\n      });\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello!\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleDocuments = () => {\n      const message = this.createChatBotMessage(\"docs not supported atm\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleOtherSetup = () => {\n      this.setState(state => ({ ...state,\n        DocumentSearch: false,\n        OtherQuestion: \"\"\n      }));\n      const message = this.createChatBotMessage(\"Enter your question:\");\n      this.addMessageToState(message);\n    };\n\n    this.handleOther = (question, num) => {\n      console.log(\"num:\", num);\n\n      if (!num) {\n        num = 4;\n      } //console.log(\"ap:\",question)\n\n\n      this.setState(state => ({ ...state,\n        OtherQuestion: state.OtherQuestion + \" \" + question,\n        howManyQs: num\n      }));\n      var message = this.createChatBotMessage(\"Results found:\", {\n        widget: \"Other\"\n      });\n      this.addMessageToState(message);\n      message = this.createChatBotMessage(\"Have I answered your question?\", {\n        widget: \"MoreOptions\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = _createChatBotMessage;\n    this.setState = setStateFunc;\n    this.stateRef = stateRef;\n    /*this.createClientMessage = createClientMessage;\n    \n    this.createCustomMessage = createCustomMessage;*/\n  } //adds message to list of chatbot messages. used in all subsequent funcs\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","ActionProvider","constructor","createChatBotMessage","setStateFunc","stateRef","addMessageToState","message","setState","prevState","messages","handleInitialOptions","widget","greet","handleDocuments","handleOtherSetup","state","DocumentSearch","OtherQuestion","handleOther","question","num","console","log","howManyQs"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CACA;;AACA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CACTC,qBADS,EAETC,YAFS,EAGTC;AACA;AACJ;AACA;AACA;AAPa,IAQT;AAAA,SASFC,iBATE,GASmBC,OAAD,IAAa;AAC/B,WAAKC,QAAL,CAAeC,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5BC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAuBH,OAAvB;AAFkB,OAAhB,CAAd;AAID,KAdC;;AAAA,SAeFI,oBAfE,GAeqB,MAAM;AAC3BR,MAAAA,oBAAoB,CACjB,qCADiB,EACqB;AACrCS,QAAAA,MAAM,EAAC;AAD8B,OADrB,CAApB;AAKD,KArBC;;AAAA,SAsBFC,KAtBE,GAsBM,MAAM;AACZ,YAAMN,OAAO,GAAG,KAAKJ,oBAAL,CAA0B,QAA1B,CAAhB;AACA,WAAKG,iBAAL,CAAuBC,OAAvB,EAFY,CAEoB;AACjC,KAzBC;;AAAA,SA4BFO,eA5BE,GA4BgB,MAAM;AACtB,YAAMP,OAAO,GAAG,KAAKJ,oBAAL,CAA0B,wBAA1B,CAAhB;AACA,WAAKG,iBAAL,CAAuBC,OAAvB,EAFsB,CAEU;AACjC,KA/BC;;AAAA,SAiCFQ,gBAjCE,GAiCiB,MAAM;AACvB,WAAKP,QAAL,CAAeQ,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBC,QAAAA,cAAc,EAAC,KAFS;AAGxBC,QAAAA,aAAa,EAAE;AAHS,OAAZ,CAAd;AAKA,YAAMX,OAAO,GAAG,KAAKJ,oBAAL,CAA0B,sBAA1B,CAAhB;AACA,WAAKG,iBAAL,CAAuBC,OAAvB;AACD,KAzCC;;AAAA,SA4CFY,WA5CE,GA4CY,CAACC,QAAD,EAAUC,GAAV,KAAkB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;;AACA,UAAI,CAACA,GAAL,EAAU;AACRA,QAAAA,GAAG,GAAG,CAAN;AACD,OAJ6B,CAK9B;;;AACA,WAAKb,QAAL,CAAeQ,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBE,QAAAA,aAAa,EAACF,KAAK,CAACE,aAAN,GAAqB,GAArB,GAA2BE,QAFjB;AAGxBI,QAAAA,SAAS,EAACH;AAHc,OAAZ,CAAd;AAMA,UAAId,OAAO,GAAG,KAAKJ,oBAAL,CAA0B,gBAA1B,EACd;AACES,QAAAA,MAAM,EAAC;AADT,OADc,CAAd;AAIA,WAAKN,iBAAL,CAAuBC,OAAvB;AACAA,MAAAA,OAAO,GAAI,KAAKJ,oBAAL,CAA0B,gCAA1B,EACX;AACES,QAAAA,MAAM,EAAC;AADT,OADW,CAAX;AAMA,WAAKN,iBAAL,CAAuBC,OAAvB;AACD,KApEC;;AACA,SAAKJ,oBAAL,GAA4BA,qBAA5B;AACA,SAAKK,QAAL,GAAgBJ,YAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA;AACJ;AACA;AACG,GAhBkB,CAiBnB;;;AAjBmB;;AAgFrB,eAAeJ,cAAf","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc,\n    stateRef\n    /*createClientMessage,\n    \n    createCustomMessage,\n    ...rest*/\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.stateRef = stateRef;\n    /*this.createClientMessage = createClientMessage;\n    \n    this.createCustomMessage = createCustomMessage;*/\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  handleInitialOptions = () => {\n    createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\"\n      }\n    )\n  }\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello!\")\n    this.addMessageToState(message) //adds message to ui\n  }\n\n  //function to fetch docs\n  handleDocuments = () => {\n    const message = this.createChatBotMessage(\"docs not supported atm\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      DocumentSearch:false,\n      OtherQuestion: \"\"\n    }))\n    const message = this.createChatBotMessage(\"Enter your question:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    console.log(\"num:\", num)\n    if (!num) {\n      num = 4\n    }\n    //console.log(\"ap:\",question)\n    this.setState((state) => ({\n      ...state,\n      OtherQuestion:state.OtherQuestion +\" \" + question,\n      howManyQs:num\n     })\n    )\n    var message = this.createChatBotMessage(\"Results found:\",\n    {\n      widget:\"Other\"\n    })\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Have I answered your question?\" ,\n    {\n      widget:\"MoreOptions\"\n    }\n    )\n    \n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}