{"ast":null,"code":"// ActionProvider starter code\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc\n  /*createClientMessage,\n  stateRef,\n  createCustomMessage,\n  ...rest*/\n  ) {\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello!\");\n      this.addMessageToState(message); //adds message to ui\n    };\n\n    this.handleOther = question => {\n      this.setState(state => ({ ...state,\n        DocumentSearch: false\n      }));\n      const message = this.createChatBotMessage(\"Is this your question?\", {\n        widget: \"QandA\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.handleOtherQuiz = () => {\n      const message = this.createChatBotMessage(\"Q's found:\", {\n        widget: \"Quiz\"\n      });\n      this.addMessageToState(message);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    /*this.createClientMessage = createClientMessage;\n    this.stateRef = stateRef;\n    this.createCustomMessage = createCustomMessage;*/\n  }\n\n} //use the setState() method to change the state object. \n//It ensures that the component has been updated and calls for re-rendering of the component.\n\n\nexport default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","addMessageToState","message","setState","prevState","messages","greet","handleOther","question","state","DocumentSearch","widget","handleOtherQuiz"],"mappings":"AACE;AACA,MAAMA,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CACVC,oBADU,EAEVC;AACA;AACL;AACA;AACA;AANe,IAOV;AAAA,SAOFC,iBAPE,GAOmBC,OAAD,IAAa;AAChC,WAAKC,QAAL,CAAeC,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5BC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAuBH,OAAvB;AAFkB,OAAhB,CAAd;AAIA,KAZC;;AAAA,SAcFI,KAdE,GAcM,MAAM;AACb,YAAMJ,OAAO,GAAG,KAAKH,oBAAL,CAA0B,QAA1B,CAAhB;AACA,WAAKE,iBAAL,CAAuBC,OAAvB,EAFa,CAEmB;AAChC,KAjBC;;AAAA,SAoBFK,WApBE,GAoBaC,QAAD,IAAc;AAC1B,WAAKL,QAAL,CAAeM,KAAD,KAAY,EACxB,GAAGA,KADqB;AAEzBC,QAAAA,cAAc,EAAC;AAFU,OAAZ,CAAd;AAIA,YAAMR,OAAO,GAAG,KAAKH,oBAAL,CAA0B,wBAA1B,EAChB;AACEY,QAAAA,MAAM,EAAC;AADT,OADgB,CAAhB;AAKA,WAAKV,iBAAL,CAAuBC,OAAvB;AACA,KA/BA;;AAAA,SAkCFU,eAlCE,GAkCgB,MAAM;AACvB,YAAMV,OAAO,GAAG,KAAKH,oBAAL,CAA0B,YAA1B,EAChB;AACEY,QAAAA,MAAM,EAAC;AADT,OADgB,CAAhB;AAID,WAAKV,iBAAL,CAAuBC,OAAvB;AACA,KAxCE;;AACA,SAAKH,oBAAL,GAA4BA,oBAA5B;AACA,SAAKI,QAAL,GAAgBH,YAAhB;AACA;AACL;AACA;AACI;;AAdmB,C,CAmDtB;AACA;;;AACA,eAAeH,cAAf","sourcesContent":["  \n  // ActionProvider starter code\n  class ActionProvider {\n    constructor(\n     createChatBotMessage,\n     setStateFunc \n     /*createClientMessage,\n     stateRef,\n     createCustomMessage,\n     ...rest*/\n   ) {\n     this.createChatBotMessage = createChatBotMessage;\n     this.setState = setStateFunc;\n     /*this.createClientMessage = createClientMessage;\n     this.stateRef = stateRef;\n     this.createCustomMessage = createCustomMessage;*/\n   }\n   addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n   };\n\n   greet = () => {\n    const message = this.createChatBotMessage(\"Hello!\")\n    this.addMessageToState(message) //adds message to ui\n   }\n\n   //handlers\n   handleOther = (question) => {\n     this.setState((state) => ({\n       ...state,\n      DocumentSearch:false\n     }))\n     const message = this.createChatBotMessage(\"Is this your question?\",\n     {\n       widget:\"QandA\"\n     }\n     )\n     this.addMessageToState(message)\n    }\n\n\n   handleOtherQuiz = () => {\n    const message = this.createChatBotMessage(\"Q's found:\", \n    {\n      widget:\"Quiz\"\n    });\n   this.addMessageToState(message)\n  }\n\n }\n //use the setState() method to change the state object. \n //It ensures that the component has been updated and calls for re-rendering of the component.\n export default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}