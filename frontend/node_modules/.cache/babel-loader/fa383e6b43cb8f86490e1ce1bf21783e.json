{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect, getState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Count = count => {\n  _s();\n\n  var {\n    docs\n  } = useSelector(state => state.data);\n  count = docs.length;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n      className: \"results\",\n      children: [count, \" docs found\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n\n_s(Count, \"OkaZ0DWSMhLGfSoIYwl3/eC66l4=\", false, function () {\n  return [useSelector];\n});\n\n_c = Count;\nconst DocSearch = /*#__PURE__*/React.memo(_c2 = _s2(props => {\n  _s2();\n\n  const [count, setCount] = React.useState(0); //const [next, setNext]  = React.useState(true);\n\n  console.log(\"prps ds:\", props);\n  var InputQuestion = props['InputQuestion']; //must call dispatch or else results will stay at zero\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    })); //One update too late\n  }, []); // while(docs.length == count) {console.log(\"counte:\", count, \"l:\", docs.length)}\n\n  setCount(docs.length);\n  return Count(count); // const count = docs.length\n  //return Count(count)\n  // setCount(docs.length)\n}, \"M0spaks+7EmP/FNZMtoVntOxM/g=\", false, function () {\n  return [useDispatch];\n}));\n_c3 = DocSearch;\nexport default DocSearch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Count\");\n$RefreshReg$(_c2, \"DocSearch$React.memo\");\n$RefreshReg$(_c3, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","getState","useDispatch","useSelector","Count","count","docs","state","data","length","DocSearch","memo","props","setCount","useState","console","log","InputQuestion","dispatch"],"mappings":";;;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA;AACA;;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACrB,MAAI;AAACC,IAAAA;AAAD,MAASH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AACAH,EAAAA,KAAK,GAAGC,IAAI,CAACG,MAAb;AACA,sBAAS;AAAA,iCAAG;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA,iBAAwBJ,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA,kBAAT;AACH,CAJD;;GAAMD,K;UACWD,W;;;KADXC,K;AAON,MAAMM,SAAS,gBAAGX,KAAK,CAACY,IAAN,WAAYC,KAAD,IAAW;AAAA;;AACpC,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBd,KAAK,CAACe,QAAN,CAAe,CAAf,CAA1B,CADoC,CAEpC;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,KAAxB;AACA,MAAIK,aAAa,GAAGL,KAAK,CAAC,eAAD,CAAzB,CAJoC,CAKpC;;AACA,QAAMM,QAAQ,GAAGhB,WAAW,EAA5B;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,QAAQ,CAACpB,aAAa,CAAC;AAACmB,MAAAA;AAAD,KAAD,CAAd,CAAR,CADY,CAGX;AACJ,GAJQ,EAIN,EAJM,CAAT,CAToC,CAcrC;;AACCJ,EAAAA,QAAQ,CAACP,IAAI,CAACG,MAAN,CAAR;AACA,SAAOL,KAAK,CAACC,KAAD,CAAZ,CAhBoC,CAkBrC;AACC;AACD;AAEF,CAtBiB;AAAA,UAMGH,WANH;AAAA,GAAlB;MAAMQ,S;AAyBN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect, getState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nconst Count = (count) => {\n    var {docs} = useSelector(state => state.data)\n    count = docs.length\n    return ( <> <b className='results'>{count} docs found</b> </> )\n}\n\n\nconst DocSearch = React.memo((props) => {\n    const [count, setCount] = React.useState(0);\n    //const [next, setNext]  = React.useState(true);\n    console.log(\"prps ds:\", props)\n    var InputQuestion = props['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    \n    \n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        \n         //One update too late\n    }, [])\n   // while(docs.length == count) {console.log(\"counte:\", count, \"l:\", docs.length)}\n    setCount(docs.length)\n    return Count(count)\n    \n   // const count = docs.length\n    //return Count(count)\n   // setCount(docs.length)\n    \n})\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}