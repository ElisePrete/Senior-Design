{"ast":null,"code":"import _objectSpread from\"/home/lizz/spring2022/dfind/Senior-Design/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import{createChatBotMessage}from\"react-chatbot-kit\";import InitialOptions from'./InitialOptions/InitialOptions';import MoreOptions from\"./MoreOptions/MoreOptions\";import DocOptions from\"./DocOptions/DocOptions\";import Other from'./OtherQandA/Other';import DocSearch from'./DocSearch/DocSearch';import GetStarted from'./GetStarted/GetStarted';/*\nimport Overview from \"../components/widgets/Overview/Overview\";\nimport MessageParser from \"../components/widgets/MessageParser/MessageParser\";\n/import ActionProviderDocs from \"../components/widgets/ActionProvider/ActionProviderDocs\";\n*/import{jsx as _jsx}from\"react/jsx-runtime\";var botName=\"DocsBot\";/*Configuration for Chatbot*/var config={/*'State' are the properties for the Chatbot. If a Chatbot \n  were a classtype‚ these would be its properties */state:{DocumentKeywords:[],//Search terms for document\nInputQuestion:\"\",//search string for other questions\nDocumentSearch:-1,//-1 = untouched | 0 = false | 1 = true\nhowManyQs:0,//either 1 or 4 depending on user satisfaction\nOtherOptions:false//'rephrase' 'yes' 'no' are important in this case\n},initialMessages:[createChatBotMessage(\"Welcome To Dfind! My name is Betty.\",{widget:\"GetStarted\"}),createChatBotMessage(\"How can I help you today? Pick an option below:\",{widget:\"InitialOptions\",delay:500})],widgets:[//registering components inside of the chatbot-kit\n{/*Function which grabs a question from mongo*/widgetName:\"Other\",widgetFunc:function widgetFunc(props){return/*#__PURE__*/_jsx(Other,_objectSpread({},props));},mapStateToProps:[\"InputQuestion\",\"howManyQs\"]},{/*Function which grabs a Docs from mongo*/widgetName:\"DocSearch\",widgetFunc:function widgetFunc(props){return/*#__PURE__*/_jsx(DocSearch,_objectSpread({},props));},mapStateToProps:[\"InputQuestion\"]},{/*The first buttons spawned in the chat*/widgetName:\"InitialOptions\",widgetFunc:function widgetFunc(props){return/*#__PURE__*/_jsx(InitialOptions,_objectSpread({},props));}},{/*buttons presented after claims results.*/widgetName:\"MoreOptions\",widgetFunc:function widgetFunc(props){return/*#__PURE__*/_jsx(MoreOptions,_objectSpread({},props));},mapStateToProps:[\"howManyQs\"]},{/*buttons presented after doc results.*/widgetName:\"DocOptions\",widgetFunc:function widgetFunc(props){return/*#__PURE__*/_jsx(DocOptions,_objectSpread({},props));}// mapStateToProps: [\"howManyQs\"],\n},{/*buttons presented after claims results.*/widgetName:\"GetStarted\",widgetFunc:function widgetFunc(props){return/*#__PURE__*/_jsx(GetStarted,_objectSpread({},props));},mapStateToProps:[\"DocumentSearch\"]}/*Example: (don't delete)\n    {\n      widgetName: \"Quiz\",\n      widgetFunc: (props) => <Quiz{...props} /> ,//getting access to actionProvider\n      props:{\n        questions:[\n          {question:\"What is a veteran?\",\n          answer:\"You are,silly.\",\n          id:1},\n          {question:\"What is a disability?\",\n          answer:\"major boo boo.\",\n          id:2}\n\n        ]\n        //list of questions in this format:\n        \n      }\n    }*/,,]};/*\n   potential future configurations:\n   \n   botName: botName,\n  lang: \"no\",\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#5ccc9d\",\n    },\n  },\n  initialMessages: [\n    createChatBotMessage(\n      `Hi I'm ${botName}. I’m here to help you explain how I work.`\n    ),\n    createChatBotMessage(\n      \"Here's a quick overview over what I need to function. ask me about the different parts to dive deeper.\",\n      {\n        withAvatar: false,\n        delay: 500,\n        widget: \"overview\",\n      }\n    ),\n  ],\n  state: {\n    gist: \"\",\n  },\n  customComponents: {},\n widgets: [\n    {\n      widgetName: \"overview\",\n      widgetFunc: (props) => <Overview {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n    {\n      widgetName: \"messageParser\",\n      widgetFunc: (props) => <MessageParser {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n   {\n      widgetName: \"actionProviderDocs\",\n      widgetFunc: (props) => <ActionProviderDocs {...props} />,\n      mapStateToProps: [\"gist\"],\n    }\n  ],*/export default config;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js"],"names":["React","createChatBotMessage","InitialOptions","MoreOptions","DocOptions","Other","DocSearch","GetStarted","botName","config","state","DocumentKeywords","InputQuestion","DocumentSearch","howManyQs","OtherOptions","initialMessages","widget","delay","widgets","widgetName","widgetFunc","props","mapStateToProps"],"mappings":"oIACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,oBAAT,KAAqC,mBAArC,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,2BAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,uBAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA;AACA;AACA;AACA;AACA,E,2CACA,GAAMC,CAAAA,OAAO,CAAG,SAAhB,CACA,6BACA,GAAMC,CAAAA,MAAM,CAAG,CACb;AACF,oDACEC,KAAK,CAAE,CACLC,gBAAgB,CAAC,EADZ,CACgB;AACrBC,aAAa,CAAC,EAFT,CAEa;AAClBC,cAAc,CAAC,CAAC,CAHX,CAGc;AACnBC,SAAS,CAAC,CAJL,CAIQ;AACbC,YAAY,CAAC,KAAM;AALd,CAHM,CAUbC,eAAe,CAAE,CACff,oBAAoB,CAAC,qCAAD,CAAwC,CAACgB,MAAM,CAAC,YAAR,CAAxC,CADL,CAEfhB,oBAAoB,mDACiC,CAChDgB,MAAM,CAAC,gBADyC,CAEhDC,KAAK,CAAC,GAF0C,CADjC,CAFL,CAVJ,CAkBbC,OAAO,CAAE,CAAE;AACT,CAAE,8CACAC,UAAU,CAAE,OADd,CAEEC,UAAU,CAAE,oBAACC,KAAD,qBAAW,KAAC,KAAD,kBAAUA,KAAV,EAAX,EAFd,CAGEC,eAAe,CAAE,CAAC,eAAD,CAAiB,WAAjB,CAHnB,CADO,CAOP,CAAE,0CACAH,UAAU,CAAE,WADd,CAEEC,UAAU,CAAE,oBAACC,KAAD,qBAAW,KAAC,SAAD,kBAAcA,KAAd,EAAX,EAFd,CAGEC,eAAe,CAAE,CAAC,eAAD,CAHnB,CAPO,CAaP,CAAE,yCACAH,UAAU,CAAE,gBADd,CAEEC,UAAU,CAAE,oBAACC,KAAD,qBAAW,KAAC,cAAD,kBAAmBA,KAAnB,EAAX,EAFd,CAbO,CAiBP,CAAE,2CACAF,UAAU,CAAC,aADb,CAEEC,UAAU,CAAE,oBAACC,KAAD,qBAAW,KAAC,WAAD,kBAAgBA,KAAhB,EAAX,EAFd,CAGEC,eAAe,CAAE,CAAC,WAAD,CAHnB,CAjBO,CAsBP,CAAE,wCACFH,UAAU,CAAC,YADX,CAEAC,UAAU,CAAE,oBAACC,KAAD,qBAAW,KAAC,UAAD,kBAAeA,KAAf,EAAX,EACb;AAHC,CAtBO,CA2BT,CAAE,2CACFF,UAAU,CAAC,YADX,CAEAC,UAAU,CAAE,oBAACC,KAAD,qBAAW,KAAC,UAAD,kBAAeA,KAAf,EAAX,EAFZ,CAGAC,eAAe,CAAE,CAAC,gBAAD,CAHjB,CAKC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAjDW,GAlBI,CAAf,CAuEG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAEA,cAAed,CAAAA,MAAf","sourcesContent":["\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport InitialOptions from './InitialOptions/InitialOptions'\nimport MoreOptions from \"./MoreOptions/MoreOptions\";\nimport DocOptions from \"./DocOptions/DocOptions\";\nimport Other from './OtherQandA/Other'\nimport DocSearch from './DocSearch/DocSearch'\nimport GetStarted from './GetStarted/GetStarted'\n/*\nimport Overview from \"../components/widgets/Overview/Overview\";\nimport MessageParser from \"../components/widgets/MessageParser/MessageParser\";\n/import ActionProviderDocs from \"../components/widgets/ActionProvider/ActionProviderDocs\";\n*/\nconst botName = \"DocsBot\";\n/*Configuration for Chatbot*/\nconst config = {\n  /*'State' are the properties for the Chatbot. If a Chatbot \n  were a classtype‚ these would be its properties */\n  state: {\n    DocumentKeywords:[], //Search terms for document\n    InputQuestion:\"\", //search string for other questions\n    DocumentSearch:-1, //-1 = untouched | 0 = false | 1 = true\n    howManyQs:0, //either 1 or 4 depending on user satisfaction\n    OtherOptions:false //'rephrase' 'yes' 'no' are important in this case\n  },\n  initialMessages: [\n    createChatBotMessage(\"Welcome To Dfind! My name is Betty.\", {widget:\"GetStarted\"}),\n    createChatBotMessage(\n      `How can I help you today? Pick an option below:`, {\n         widget:\"InitialOptions\",\n         delay:500\n      }\n    )],\n  widgets: [ //registering components inside of the chatbot-kit\n    { /*Function which grabs a question from mongo*/\n      widgetName: \"Other\",\n      widgetFunc: (props) => <Other{...props} /> ,\n      mapStateToProps: [\"InputQuestion\",\"howManyQs\"],\n\n    },\n    { /*Function which grabs a Docs from mongo*/\n      widgetName: \"DocSearch\",\n      widgetFunc: (props) => <DocSearch{...props} /> ,\n      mapStateToProps: [\"InputQuestion\"],\n\n    },\n    { /*The first buttons spawned in the chat*/\n      widgetName: \"InitialOptions\",\n      widgetFunc: (props) => <InitialOptions{...props} /> \n    },\n    { /*buttons presented after claims results.*/\n      widgetName:\"MoreOptions\",\n      widgetFunc: (props) => <MoreOptions{...props} />,\n      mapStateToProps: [\"howManyQs\"],\n    },\n    { /*buttons presented after doc results.*/\n    widgetName:\"DocOptions\",\n    widgetFunc: (props) => <DocOptions{...props} />,\n   // mapStateToProps: [\"howManyQs\"],\n  },\n  { /*buttons presented after claims results.*/\n  widgetName:\"GetStarted\",\n  widgetFunc: (props) => <GetStarted{...props} />,\n  mapStateToProps: [\"DocumentSearch\"],\n},\n   /*Example: (don't delete)\n    {\n      widgetName: \"Quiz\",\n      widgetFunc: (props) => <Quiz{...props} /> ,//getting access to actionProvider\n      props:{\n        questions:[\n          {question:\"What is a veteran?\",\n          answer:\"You are,silly.\",\n          id:1},\n          {question:\"What is a disability?\",\n          answer:\"major boo boo.\",\n          id:2}\n\n        ]\n        //list of questions in this format:\n        \n      }\n    }*/,\n    \n  ]\n};\n   /*\n   potential future configurations:\n   \n   botName: botName,\n  lang: \"no\",\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#5ccc9d\",\n    },\n  },\n  initialMessages: [\n    createChatBotMessage(\n      `Hi I'm ${botName}. I’m here to help you explain how I work.`\n    ),\n    createChatBotMessage(\n      \"Here's a quick overview over what I need to function. ask me about the different parts to dive deeper.\",\n      {\n        withAvatar: false,\n        delay: 500,\n        widget: \"overview\",\n      }\n    ),\n  ],\n  state: {\n    gist: \"\",\n  },\n  customComponents: {},\n widgets: [\n    {\n      widgetName: \"overview\",\n      widgetFunc: (props) => <Overview {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n    {\n      widgetName: \"messageParser\",\n      widgetFunc: (props) => <MessageParser {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n   {\n      widgetName: \"actionProviderDocs\",\n      widgetFunc: (props) => <ActionProviderDocs {...props} />,\n      mapStateToProps: [\"gist\"],\n    }\n  ],*/\n\nexport default config;"]},"metadata":{},"sourceType":"module"}