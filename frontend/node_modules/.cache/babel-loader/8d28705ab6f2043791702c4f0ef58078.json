{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js\";\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport InitialOptions from './InitialOptions/InitialOptions';\nimport MoreOptions from \"./MoreOptions/MoreOptions\";\nimport DocOptions from \"./DocOptions/DocOptions\";\nimport Other from './OtherQandA/Other';\nimport DocSearch from './DocSearch/DocSearch';\nimport GetStarted from './GetStarted/GetStarted';\n/*\nimport Overview from \"../components/widgets/Overview/Overview\";\nimport MessageParser from \"../components/widgets/MessageParser/MessageParser\";\n/import ActionProviderDocs from \"../components/widgets/ActionProvider/ActionProviderDocs\";\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst botName = \"DocsBot\";\n/*Configuration for Chatbot*/\n\nconst config = {\n  /*'State' are the properties for the Chatbot. If a Chatbot \n  were a classtype‚ these would be its properties */\n  state: {\n    DocumentKeywords: [],\n    //Search terms for document\n    InputQuestion: \"\",\n    //search string for other questions\n    DocumentSearch: -1,\n    //-1 = untouched | 0 = false | 1 = true\n    howManyQs: 0,\n    //either 1 or 4 depending on user satisfaction\n    OtherOptions: false //'rephrase' 'yes' 'no' are important in this case\n\n  },\n  initialMessages: [createChatBotMessage(\"Welcome To Dfind!\", {\n    widget: \"GetStarted\"\n  }), createChatBotMessage(`Are you interested in searching for documents or asking a general question about disability claims?`, {\n    widget: \"InitialOptions\"\n  })],\n  widgets: [//registering components inside of the chatbot-kit\n  {\n    /*Function which grabs a question from mongo*/\n    widgetName: \"Other\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Other, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"InputQuestion\", \"howManyQs\"]\n  }, {\n    /*Function which grabs a Docs from mongo*/\n    widgetName: \"DocSearch\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(DocSearch, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"InputQuestion\"]\n  }, {\n    /*The first buttons spawned in the chat*/\n    widgetName: \"InitialOptions\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(InitialOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 30\n    }, this)\n  }, {\n    /*buttons presented after claims results.*/\n    widgetName: \"MoreOptions\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(MoreOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"howManyQs\"]\n  }, {\n    /*buttons presented after doc results.*/\n    widgetName: \"DocOptions\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(DocOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 28\n    }, this) // mapStateToProps: [\"howManyQs\"],\n\n  }, {\n    /*buttons presented after claims results.*/\n    widgetName: \"GetStarted\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(GetStarted, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 26\n    }, this),\n    mapStateToProps: [\"DocumentSearch\"]\n  }\n  /*Example: (don't delete)\n   {\n     widgetName: \"Quiz\",\n     widgetFunc: (props) => <Quiz{...props} /> ,//getting access to actionProvider\n     props:{\n       questions:[\n         {question:\"What is a veteran?\",\n         answer:\"You are,silly.\",\n         id:1},\n         {question:\"What is a disability?\",\n         answer:\"major boo boo.\",\n         id:2}\n        ]\n       //list of questions in this format:\n       \n     }\n   }*/\n  ,,]\n};\n/*\npotential future configurations:\n\nbotName: botName,\nlang: \"no\",\ncustomStyles: {\n botMessageBox: {\n   backgroundColor: \"#376B7E\",\n },\n chatButton: {\n   backgroundColor: \"#5ccc9d\",\n },\n},\ninitialMessages: [\n createChatBotMessage(\n   `Hi I'm ${botName}. I’m here to help you explain how I work.`\n ),\n createChatBotMessage(\n   \"Here's a quick overview over what I need to function. ask me about the different parts to dive deeper.\",\n   {\n     withAvatar: false,\n     delay: 500,\n     widget: \"overview\",\n   }\n ),\n],\nstate: {\n gist: \"\",\n},\ncustomComponents: {},\nwidgets: [\n {\n   widgetName: \"overview\",\n   widgetFunc: (props) => <Overview {...props} />,\n   mapStateToProps: [\"gist\"],\n },\n {\n   widgetName: \"messageParser\",\n   widgetFunc: (props) => <MessageParser {...props} />,\n   mapStateToProps: [\"gist\"],\n },\n{\n   widgetName: \"actionProviderDocs\",\n   widgetFunc: (props) => <ActionProviderDocs {...props} />,\n   mapStateToProps: [\"gist\"],\n }\n],*/\n\nexport default config;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/chatbotConfig.js"],"names":["React","createChatBotMessage","InitialOptions","MoreOptions","DocOptions","Other","DocSearch","GetStarted","botName","config","state","DocumentKeywords","InputQuestion","DocumentSearch","howManyQs","OtherOptions","initialMessages","widget","widgets","widgetName","widgetFunc","props","mapStateToProps"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA;;AACA,MAAMC,MAAM,GAAG;AACb;AACF;AACEC,EAAAA,KAAK,EAAE;AACLC,IAAAA,gBAAgB,EAAC,EADZ;AACgB;AACrBC,IAAAA,aAAa,EAAC,EAFT;AAEa;AAClBC,IAAAA,cAAc,EAAC,CAAC,CAHX;AAGc;AACnBC,IAAAA,SAAS,EAAC,CAJL;AAIQ;AACbC,IAAAA,YAAY,EAAC,KALR,CAKc;;AALd,GAHM;AAUbC,EAAAA,eAAe,EAAE,CACff,oBAAoB,CAAC,mBAAD,EAAsB;AAACgB,IAAAA,MAAM,EAAC;AAAR,GAAtB,CADL,EAEfhB,oBAAoB,CACjB,qGADiB,EACqF;AACpGgB,IAAAA,MAAM,EAAC;AAD6F,GADrF,CAFL,CAVJ;AAiBbC,EAAAA,OAAO,EAAE,CAAE;AACT;AAAE;AACAC,IAAAA,UAAU,EAAE,OADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,KAAD,OAAUA;AAAV;AAAA;AAAA;AAAA;AAAA,YAFzB;AAGEC,IAAAA,eAAe,EAAE,CAAC,eAAD,EAAiB,WAAjB;AAHnB,GADO,EAOP;AAAE;AACAH,IAAAA,UAAU,EAAE,WADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,SAAD,OAAcA;AAAd;AAAA;AAAA;AAAA;AAAA,YAFzB;AAGEC,IAAAA,eAAe,EAAE,CAAC,eAAD;AAHnB,GAPO,EAaP;AAAE;AACAH,IAAAA,UAAU,EAAE,gBADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,cAAD,OAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA;AAFzB,GAbO,EAiBP;AAAE;AACAF,IAAAA,UAAU,EAAC,aADb;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,WAAD,OAAgBA;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFzB;AAGEC,IAAAA,eAAe,EAAE,CAAC,WAAD;AAHnB,GAjBO,EAsBP;AAAE;AACFH,IAAAA,UAAU,EAAC,YADX;AAEAC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,UAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA,YAFvB,CAGD;;AAHC,GAtBO,EA2BT;AAAE;AACFF,IAAAA,UAAU,EAAC,YADX;AAEAC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,UAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA,YAFvB;AAGAC,IAAAA,eAAe,EAAE,CAAC,gBAAD;AAHjB;AAKC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDW;AAjBI,CAAf;AAsEG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeb,MAAf","sourcesContent":["\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport InitialOptions from './InitialOptions/InitialOptions'\nimport MoreOptions from \"./MoreOptions/MoreOptions\";\nimport DocOptions from \"./DocOptions/DocOptions\";\nimport Other from './OtherQandA/Other'\nimport DocSearch from './DocSearch/DocSearch'\nimport GetStarted from './GetStarted/GetStarted'\n/*\nimport Overview from \"../components/widgets/Overview/Overview\";\nimport MessageParser from \"../components/widgets/MessageParser/MessageParser\";\n/import ActionProviderDocs from \"../components/widgets/ActionProvider/ActionProviderDocs\";\n*/\nconst botName = \"DocsBot\";\n/*Configuration for Chatbot*/\nconst config = {\n  /*'State' are the properties for the Chatbot. If a Chatbot \n  were a classtype‚ these would be its properties */\n  state: {\n    DocumentKeywords:[], //Search terms for document\n    InputQuestion:\"\", //search string for other questions\n    DocumentSearch:-1, //-1 = untouched | 0 = false | 1 = true\n    howManyQs:0, //either 1 or 4 depending on user satisfaction\n    OtherOptions:false //'rephrase' 'yes' 'no' are important in this case\n  },\n  initialMessages: [\n    createChatBotMessage(\"Welcome To Dfind!\", {widget:\"GetStarted\"}),\n    createChatBotMessage(\n      `Are you interested in searching for documents or asking a general question about disability claims?`, {\n         widget:\"InitialOptions\",\n      }\n    )],\n  widgets: [ //registering components inside of the chatbot-kit\n    { /*Function which grabs a question from mongo*/\n      widgetName: \"Other\",\n      widgetFunc: (props) => <Other{...props} /> ,\n      mapStateToProps: [\"InputQuestion\",\"howManyQs\"],\n\n    },\n    { /*Function which grabs a Docs from mongo*/\n      widgetName: \"DocSearch\",\n      widgetFunc: (props) => <DocSearch{...props} /> ,\n      mapStateToProps: [\"InputQuestion\"],\n\n    },\n    { /*The first buttons spawned in the chat*/\n      widgetName: \"InitialOptions\",\n      widgetFunc: (props) => <InitialOptions{...props} /> \n    },\n    { /*buttons presented after claims results.*/\n      widgetName:\"MoreOptions\",\n      widgetFunc: (props) => <MoreOptions{...props} />,\n      mapStateToProps: [\"howManyQs\"],\n    },\n    { /*buttons presented after doc results.*/\n    widgetName:\"DocOptions\",\n    widgetFunc: (props) => <DocOptions{...props} />,\n   // mapStateToProps: [\"howManyQs\"],\n  },\n  { /*buttons presented after claims results.*/\n  widgetName:\"GetStarted\",\n  widgetFunc: (props) => <GetStarted{...props} />,\n  mapStateToProps: [\"DocumentSearch\"],\n},\n   /*Example: (don't delete)\n    {\n      widgetName: \"Quiz\",\n      widgetFunc: (props) => <Quiz{...props} /> ,//getting access to actionProvider\n      props:{\n        questions:[\n          {question:\"What is a veteran?\",\n          answer:\"You are,silly.\",\n          id:1},\n          {question:\"What is a disability?\",\n          answer:\"major boo boo.\",\n          id:2}\n\n        ]\n        //list of questions in this format:\n        \n      }\n    }*/,\n    \n  ]\n};\n   /*\n   potential future configurations:\n   \n   botName: botName,\n  lang: \"no\",\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#5ccc9d\",\n    },\n  },\n  initialMessages: [\n    createChatBotMessage(\n      `Hi I'm ${botName}. I’m here to help you explain how I work.`\n    ),\n    createChatBotMessage(\n      \"Here's a quick overview over what I need to function. ask me about the different parts to dive deeper.\",\n      {\n        withAvatar: false,\n        delay: 500,\n        widget: \"overview\",\n      }\n    ),\n  ],\n  state: {\n    gist: \"\",\n  },\n  customComponents: {},\n widgets: [\n    {\n      widgetName: \"overview\",\n      widgetFunc: (props) => <Overview {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n    {\n      widgetName: \"messageParser\",\n      widgetFunc: (props) => <MessageParser {...props} />,\n      mapStateToProps: [\"gist\"],\n    },\n   {\n      widgetName: \"actionProviderDocs\",\n      widgetFunc: (props) => <ActionProviderDocs {...props} />,\n      mapStateToProps: [\"gist\"],\n    }\n  ],*/\n\nexport default config;"]},"metadata":{},"sourceType":"module"}