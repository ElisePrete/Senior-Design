{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; //import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DocSearch = params => {\n  _s();\n\n  const [docs, setDocs] = useState([]); //we call axios dispatch here\n\n  var InputQuestion = params['InputQuestion']; //console.log(\"Other | hm\",params)\n\n  const dispatch = useDispatch();\n  docs = setDocs(useSelector(state => state.data));\n  var obj = docs;\n  useEffect(() => {\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n\n    if (docs.length > 1) {\n      console.log(\"docs are happening\");\n    }\n\n    console.log(\"obj:!\", obj);\n  }, [docs]); //.then(response => console.log(\"response!:\",response.length))\n  //var objlen = obj.length\n  //console.log(\"objlen:\",objlen)\n\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n  //mapping requires key index for each entry\n\n  if (obj) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: obj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this), \" docs found\"]\n    }, void 0, true);\n  }\n}; //<><b>{objlen}</b> docs found\n\n/*<>\n   {obj && Object.keys(obj).map((item,i) => (\n       <tbody key={i}>\n           <tr>\n               <td><b>{obj[item].question}</b></td>\n               <td>{obj[item].link}</td>\n           </tr>\n       </tbody>\n))}\n     \n</*/\n\n\n_s(DocSearch, \"Kri7itiOO7EJeYblrKh8LIaAqZU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DocSearch;\nexport default DocSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useState","useDispatch","useSelector","DocSearch","params","docs","setDocs","InputQuestion","dispatch","state","data","obj","length","console","log"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;AACA;;AACA;AACA;;;;;AACA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAD0B,CAE1B;;AACA,MAAIO,aAAa,GAAGH,MAAM,CAAC,eAAD,CAA1B,CAH0B,CAI1B;;AACA,QAAMI,QAAQ,GAAGP,WAAW,EAA5B;AACAI,EAAAA,IAAI,GAAGC,OAAO,CAACJ,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAZ,CAAd;AACA,MAAIC,GAAG,GAAGN,IAAV;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,QAAQ,CAACX,aAAa,CAAC;AAACU,MAAAA;AAAD,KAAD,CAAd,CAAR;;AACA,QAAIF,IAAI,CAACO,MAAL,GAAc,CAAlB,EAAqB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AACDD,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,GAApB;AACH,GANQ,EAMN,CAACN,IAAD,CANM,CAAT,CAR0B,CAcf;AACX;AACA;;AACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AACA,MAAIM,GAAJ,EAAS;AACL,wBACI;AAAA,8BAAE;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAAF;AAAA,oBADJ;AAEH;AACJ,CA9BD,C,CAgCM;;AACG;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA3CMR,S;UAKeF,W,EACFC,W;;;KANbC,S;AA+CN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n//import \"./Other.css\"\n//import OtherMore from \"./OtherMore.js\"\n/*React UI component version (js and html) of the Other Q and A popup which appears when a \nuser asks a question independent of docs*/\nconst DocSearch = (params) => {\n    const [docs, setDocs] = useState([])\n    //we call axios dispatch here\n    var InputQuestion = params['InputQuestion']\n    //console.log(\"Other | hm\",params)\n    const dispatch = useDispatch();\n    docs = setDocs(useSelector(state => state.data))\n    var obj = docs\n    useEffect(() => {\n        dispatch(loadDocuments({InputQuestion}));\n        if (docs.length > 1) {\n            console.log(\"docs are happening\")\n        }\n        console.log(\"obj:!\",obj)\n    }, [docs]) //.then(response => console.log(\"response!:\",response.length))\n    //var objlen = obj.length\n    //console.log(\"objlen:\",objlen)\n  /*    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody></tbody>)\n    }\n    //preventing first result from resurfacing when new results are shown. only 4 extra results are supported atm\n  if (howMany == 4) {\n        return OtherMore(obj)\n    }*/\n    //mapping requires key index for each entry\n    if (obj) {\n        return (\n            <><b>{obj}</b> docs found</> )\n    }\n}\n   \n      //<><b>{objlen}</b> docs found\n         /*<>\n            {obj && Object.keys(obj).map((item,i) => (\n                <tbody key={i}>\n                    <tr>\n                        <td><b>{obj[item].question}</b></td>\n                        <td>{obj[item].link}</td>\n                    </tr>\n                </tbody>\n        ))}\n        \n     \n    </*/\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}