{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport axios from \"axios\"; //axios allows a user to make http request through their browser\n\nvar API = window.location.host; //\"http://127.0.0.1:5000\"\n//talk to model through functions on this page\n//for local or remote differentiation\n//console.log(\"API:\",API)\n\nif (API == 'localhost:3000') {\n  API = 'http://127.0.0.1:5000';\n} else {\n  API = '';\n}\n/*\n*** to connect a new api call: ***\n--make a unique action type in actionTypes\n--make a sister function utilizing that actionType here\n--develop a case for that actionType in reducer */\n\n\nconst getQuestions = objs => ({\n  type: types.GET_QS,\n  payload: objs\n});\n\nconst getQuestion = objs => ({\n  type: types.GET_SINGLE_Q,\n  payload: obj\n});\n\nconst getDocuments = docs => ({\n  type: types.GET_DOCS,\n  payload: docs\n});\n\nconst getDocument = doc => ({\n  type: types.GET_SINGLE_DOC,\n  payload: doc\n});\n\nexport const loadQuestions = () => {\n  return function (dispatch) {\n    axios.get(`${API}/api/Questions`).then(resp => dispatch(getQuestions(resp.data))).catch(err => console.log(\"error:\", err));\n  };\n};\nexport const loadQuestion = _ref => {\n  let {\n    InputQuestion,\n    howMany\n  } = _ref;\n  //InputQuestion = params['InputQuestion']\n  //howMany = params['howMany']\n  //,\"how many:\", InputQuestion[0['howMany']\n  //console.log(\"in loadquestion:\", InputQuestion,\"how many\",howMany)\n  return function (dispatch) {\n    axios.get(`${API}/api/Question`, {\n      params: {\n        input: InputQuestion,\n        many: howMany\n      }\n    }).then(resp => dispatch(getQuestion(resp.data))).catch(err => console.log(\"load question error:\", err));\n  };\n};\nexport const loadDocuments = _ref2 => {\n  let {\n    InputQuestion\n  } = _ref2;\n  //console.log(\"actionjs:\",InputQuestion)\n  return function (dispatch) {\n    axios.get(`${API}/api/Documents`, {\n      params: {\n        input: InputQuestion\n      }\n    }).then(resp => dispatch(getDocuments(resp.data))).catch(err => console.log(\"error:\", err));\n  };\n};\nexport const loadDocument = _ref3 => {\n  let {\n    docID\n  } = _ref3;\n  return function (dispatch) {\n    axios.get(`${API}/api/Document`, {\n      params: {\n        input: docID\n      }\n    }).then(resp => dispatch(getDocument(resp.data))).catch(err => console.log(\"error:\", err));\n  };\n};","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/model/actions.js"],"names":["types","axios","API","window","location","host","getQuestions","objs","type","GET_QS","payload","getQuestion","GET_SINGLE_Q","obj","getDocuments","docs","GET_DOCS","getDocument","doc","GET_SINGLE_DOC","loadQuestions","dispatch","get","then","resp","data","catch","err","console","log","loadQuestion","InputQuestion","howMany","params","input","many","loadDocuments","loadDocument","docID"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,IAAIC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA1B,C,CAA+B;AAC/B;AAEA;AACA;;AACA,IAAIH,GAAG,IAAI,gBAAX,EAA6B;AACzBA,EAAAA,GAAG,GAAG,uBAAN;AACH,CAFD,MAGK;AACDA,EAAAA,GAAG,GAAG,EAAN;AACH;AAED;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,YAAY,GAAIC,IAAD,KACjB;AACAC,EAAAA,IAAI,EAAER,KAAK,CAACS,MADZ;AAEAC,EAAAA,OAAO,EAACH;AAFR,CADiB,CAArB;;AAMA,MAAMI,WAAW,GAAIJ,IAAD,KAChB;AACAC,EAAAA,IAAI,EAAER,KAAK,CAACY,YADZ;AAEAF,EAAAA,OAAO,EAACG;AAFR,CADgB,CAApB;;AAMA,MAAMC,YAAY,GAAIC,IAAD,KACjB;AACAP,EAAAA,IAAI,EAAER,KAAK,CAACgB,QADZ;AAEAN,EAAAA,OAAO,EAACK;AAFR,CADiB,CAArB;;AAMA,MAAME,WAAW,GAAIC,GAAD,KAChB;AACAV,EAAAA,IAAI,EAAER,KAAK,CAACmB,cADZ;AAEAT,EAAAA,OAAO,EAACQ;AAFR,CADgB,CAApB;;AAOA,OAAO,MAAME,aAAa,GAAG,MAAM;AAC/B,SAAO,UAASC,QAAT,EAAmB;AACtBpB,IAAAA,KAAK,CAACqB,GAAN,CAAW,GAAEpB,GAAI,gBAAjB,EACCqB,IADD,CACOC,IAAD,IAAWH,QAAQ,CAACf,YAAY,CAACkB,IAAI,CAACC,IAAN,CAAb,CADzB,EAECC,KAFD,CAEQC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB,CAFhB;AAGF,GAJF;AAKH,CANM;AAOP,OAAO,MAAMG,YAAY,GAAG,QAA6B;AAAA,MAA5B;AAACC,IAAAA,aAAD;AAAeC,IAAAA;AAAf,GAA4B;AACrD;AACA;AACA;AACA;AACA,SAAO,UAASX,QAAT,EAAmB;AACtBpB,IAAAA,KAAK,CAACqB,GAAN,CAAW,GAAEpB,GAAI,eAAjB,EAAiC;AAAE+B,MAAAA,MAAM,EAAC;AACtCC,QAAAA,KAAK,EAACH,aADgC;AAEtCI,QAAAA,IAAI,EAACH;AAFiC;AAAT,KAAjC,EAICT,IAJD,CAIOC,IAAD,IAAWH,QAAQ,CAACV,WAAW,CAACa,IAAI,CAACC,IAAN,CAAZ,CAJzB,EAKCC,KALD,CAKQC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAApC,CALhB;AAMF,GAPF;AAQH,CAbM;AAeP,OAAO,MAAMS,aAAa,GAAG,SAAqB;AAAA,MAApB;AAACL,IAAAA;AAAD,GAAoB;AAC9C;AACA,SAAO,UAASV,QAAT,EAAmB;AACtBpB,IAAAA,KAAK,CAACqB,GAAN,CAAW,GAAEpB,GAAI,gBAAjB,EAAkC;AAAE+B,MAAAA,MAAM,EAAC;AACvCC,QAAAA,KAAK,EAACH;AADiC;AAAT,KAAlC,EAGCR,IAHD,CAGOC,IAAD,IAAWH,QAAQ,CAACP,YAAY,CAACU,IAAI,CAACC,IAAN,CAAb,CAHzB,EAICC,KAJD,CAIQC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB,CAJhB;AAKF,GANF;AAOH,CATM;AAWP,OAAO,MAAMU,YAAY,GAAG,SAAa;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AACrC,SAAO,UAASjB,QAAT,EAAmB;AACtBpB,IAAAA,KAAK,CAACqB,GAAN,CAAW,GAAEpB,GAAI,eAAjB,EAAiC;AAAE+B,MAAAA,MAAM,EAAC;AACtCC,QAAAA,KAAK,EAACI;AADgC;AAAT,KAAjC,EAGCf,IAHD,CAGOC,IAAD,IAAWH,QAAQ,CAACJ,WAAW,CAACO,IAAI,CAACC,IAAN,CAAZ,CAHzB,EAICC,KAJD,CAIQC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB,CAJhB;AAKF,GANF;AAOH,CARM","sourcesContent":["import * as types from \"./actionTypes\"\nimport axios from \"axios\";\n//axios allows a user to make http request through their browser\nvar API = window.location.host //\"http://127.0.0.1:5000\"\n//talk to model through functions on this page\n\n//for local or remote differentiation\n//console.log(\"API:\",API)\nif (API == 'localhost:3000') {\n    API = 'http://127.0.0.1:5000'\n}\nelse {\n    API = ''\n}\n\n/*\n*** to connect a new api call: ***\n--make a unique action type in actionTypes\n--make a sister function utilizing that actionType here\n--develop a case for that actionType in reducer */\n\nconst getQuestions = (objs) => (\n    {\n    type: types.GET_QS,\n    payload:objs\n});\n\nconst getQuestion = (objs) => (\n    {\n    type: types.GET_SINGLE_Q,\n    payload:obj\n});\n\nconst getDocuments = (docs) => (\n    {\n    type: types.GET_DOCS,\n    payload:docs\n});\n\nconst getDocument = (doc) => (\n    {\n    type: types.GET_SINGLE_DOC,\n    payload:doc\n});\n\n\nexport const loadQuestions = () => {\n    return function(dispatch) {\n        axios.get(`${API}/api/Questions`)\n        .then((resp) =>  dispatch(getQuestions(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}\nexport const loadQuestion = ({InputQuestion,howMany}) => {\n    //InputQuestion = params['InputQuestion']\n    //howMany = params['howMany']\n    //,\"how many:\", InputQuestion[0['howMany']\n    //console.log(\"in loadquestion:\", InputQuestion,\"how many\",howMany)\n    return function(dispatch) {\n        axios.get(`${API}/api/Question`, { params:{\n            input:InputQuestion,\n            many:howMany}\n        })\n        .then((resp) =>  dispatch(getQuestion(resp.data)) )\n        .catch((err) => console.log(\"load question error:\", err))\n     }\n}\n\nexport const loadDocuments = ({InputQuestion}) => {\n    //console.log(\"actionjs:\",InputQuestion)\n    return function(dispatch) {\n        axios.get(`${API}/api/Documents`, { params:{\n            input:InputQuestion}\n        })\n        .then((resp) =>  dispatch(getDocuments(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}\n\nexport const loadDocument = ({docID}) => {\n    return function(dispatch) {\n        axios.get(`${API}/api/Document`, { params:{\n            input:docID}\n        })\n        .then((resp) =>  dispatch(getDocument(resp.data)) )\n        .catch((err) => console.log(\"error:\", err))\n     }\n}"]},"metadata":{},"sourceType":"module"}