{"ast":null,"code":"import{loadQuestion,loadQuestions}from'../../../model/actions';import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{Link}from\"react-router-dom\";import\"./Other.css\";import OtherMore from'./OtherMore';/*React Widget which shows document-independent Results. Currently wonky:\n- 'More results' widget changes all previous result components\n- 'More results' also display original first result\nimport OtherMore from \"./OtherMore.js\" <- OtherMore component fixes the latter but not the former. removed atm */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Other=function Other(params){var InputQuestion=params['InputQuestion'];var howMany=params['howManyQs'];var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.data;}),obj=_useSelector.obj;var toFrom=[0,1];useEffect(function(){dispatch(loadQuestion({InputQuestion:InputQuestion,howMany:howMany}));//console.log(\"obj:\",obj)\n},[]);if(InputQuestion==undefined||howMany==undefined){// console.log(\"returned empty div\")\nreturn/*#__PURE__*/_jsx(\"tbody\",{children:\"No results found, please rephrase\"});}//preventing many result from resurfacing when new results are shown. only 4 extra results are supported atm\nif(howMany==4){toFrom=[1,undefined];}return NoReRender(obj,toFrom);};export default Other;var NoReRender=function NoReRender(arr,toFrom){console.log(\"nrr:\",toFrom);return/*#__PURE__*/_jsxs(_Fragment,{children:[arr&&Object.keys(arr).slice(toFrom[0],toFrom[1]).map(function(item,i){return/*#__PURE__*/_jsxs(\"tbody\",{className:\"link\",children:[/*#__PURE__*/_jsx(\"a\",{className:\"qNa\",href:arr[item].link,children:/*#__PURE__*/_jsxs(\"b\",{className:\"question\",children:[\" \",arr[item].question]})}),/*#__PURE__*/_jsx(\"br\",{})]},i);}),\" \"]});};","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/OtherQandA/Other.js"],"names":["loadQuestion","loadQuestions","React","useEffect","useState","useDispatch","useSelector","Link","OtherMore","Other","params","InputQuestion","howMany","dispatch","state","data","obj","toFrom","undefined","NoReRender","arr","console","log","Object","keys","slice","map","item","i","link","question"],"mappings":"AAAA,OAASA,YAAT,CAAsBC,aAAtB,KAA2C,wBAA3C,CACA,MAAOC,CAAAA,KAAP,EAAeC,SAAf,CAAyBC,QAAzB,KAAwC,OAAxC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAAQC,IAAR,KAAmB,kBAAnB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA;AACA;AACA;AACA,iH,6IACA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,MAAD,CAAY,CACtB,GAAIC,CAAAA,aAAa,CAAGD,MAAM,CAAC,eAAD,CAA1B,CACA,GAAIE,CAAAA,OAAO,CAAGF,MAAM,CAAC,WAAD,CAApB,CACA,GAAMG,CAAAA,QAAQ,CAAGR,WAAW,EAA5B,CACA,iBAAYC,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAV,EAAN,CAAvB,CAAKC,GAAL,cAAKA,GAAL,CACA,GAAIC,CAAAA,MAAM,CAAG,CAAC,CAAD,CAAG,CAAH,CAAb,CACAd,SAAS,CAAC,UAAM,CACZU,QAAQ,CAACb,YAAY,CAAC,CAACW,aAAa,CAAbA,aAAD,CAAeC,OAAO,CAAPA,OAAf,CAAD,CAAb,CAAR,CACA;AACH,CAHQ,CAGN,EAHM,CAAT,CAIA,GAAID,aAAa,EAAIO,SAAjB,EAA8BN,OAAO,EAAIM,SAA7C,CAAwD,CACrD;AACC,mBAAQ,4DAAR,CACH,CACD;AACA,GAAIN,OAAO,EAAI,CAAf,CAAkB,CACdK,MAAM,CAAG,CAAC,CAAD,CAAIC,SAAJ,CAAT,CACH,CACD,MAAOC,CAAAA,UAAU,CAACH,GAAD,CAAMC,MAAN,CAAjB,CACH,CAnBD,CAsBA,cAAeR,CAAAA,KAAf,CAEA,GAAMU,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAKH,MAAL,CAAgB,CAC/BI,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoBL,MAApB,EACA,mBAAQ,2BAAGG,GAAG,EAAIG,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,KAAjB,CAAuBR,MAAM,CAAC,CAAD,CAA7B,CAAkCA,MAAM,CAAC,CAAD,CAAxC,EAA6CS,GAA7C,CAAiD,SAACC,IAAD,CAAMC,CAAN,qBAC/D,eAAe,SAAS,CAAC,MAAzB,wBACI,UAAG,SAAS,CAAC,KAAb,CAAmB,IAAI,CAAER,GAAG,CAACO,IAAD,CAAH,CAAUE,IAAnC,uBAAyC,WAAG,SAAS,CAAC,UAAb,eAA0BT,GAAG,CAACO,IAAD,CAAH,CAAUG,QAApC,GAAzC,EADJ,cACkG,aADlG,GAAYF,CAAZ,CAD+D,EAAjD,CAAV,OAAR,CAKH,CAPD","sourcesContent":["import { loadQuestion,loadQuestions } from '../../../model/actions';\nimport React, {useEffect,useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {Link} from \"react-router-dom\";\nimport \"./Other.css\"\nimport OtherMore from './OtherMore';\n/*React Widget which shows document-independent Results. Currently wonky:\n- 'More results' widget changes all previous result components\n- 'More results' also display original first result\nimport OtherMore from \"./OtherMore.js\" <- OtherMore component fixes the latter but not the former. removed atm */\nconst Other = (params) => {\n    var InputQuestion = params['InputQuestion']\n    var howMany = params['howManyQs']\n    const dispatch = useDispatch();\n    var {obj} = useSelector(state => state.data)\n    var toFrom = [0,1]\n    useEffect(() => {\n        dispatch(loadQuestion({InputQuestion,howMany}));\n        //console.log(\"obj:\",obj)\n    }, [])\n    if (InputQuestion == undefined || howMany == undefined) {\n       // console.log(\"returned empty div\")\n        return (<tbody>No results found, please rephrase</tbody>)\n    }\n    //preventing many result from resurfacing when new results are shown. only 4 extra results are supported atm\n    if (howMany == 4) {\n        toFrom = [1, undefined]\n    }\n    return NoReRender(obj, toFrom)  \n}\n\n\nexport default Other;\n\nconst NoReRender = (arr,toFrom) => {\n    console.log(\"nrr:\", toFrom)\n    return (<>{arr && Object.keys(arr).slice(toFrom[0], toFrom[1]).map((item,i) => (\n        <tbody key={i} className=\"link\">\n            <a className='qNa' href={arr[item].link}><b className='question'> {arr[item].question}</b></a><br/>\n        </tbody>\n    ))} </>)\n}"]},"metadata":{},"sourceType":"module"}