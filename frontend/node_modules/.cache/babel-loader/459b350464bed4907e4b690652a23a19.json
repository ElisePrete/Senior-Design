{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { createClientMessage, createChatBotMessage, createCustomMessage } from '../components/Chat/chatUtils';\nimport { getInitialState, getWidgets, isConstructor, validateProps } from '../components/Chatbot/utils';\nimport WidgetRegistry from '../components/WidgetRegistry/WidgetRegistry';\n\nconst useChatbot = _ref => {\n  _s();\n\n  let {\n    config,\n    actionProvider,\n    messageParser,\n    messageHistory,\n    runInitialMessagesWithHistory,\n    saveMessages,\n    ...rest\n  } = _ref;\n  let configurationError = '';\n  let invalidPropsError = '';\n\n  if (!config || !actionProvider || !messageParser) {\n    configurationError = 'I think you forgot to feed me some props. Did you remember to pass a config, a messageparser and an actionprovider?';\n    return {\n      configurationError\n    };\n  }\n\n  const propsErrors = validateProps(config, messageParser);\n\n  if (propsErrors.length) {\n    invalidPropsError = propsErrors.reduce((prev, cur) => {\n      prev += cur;\n      return prev;\n    }, '');\n    return {\n      invalidPropsError\n    };\n  }\n\n  const [messageContainerRef, setMessageContainerRef] = useState({});\n  const initialState = getInitialState(config);\n\n  if (messageHistory && Array.isArray(messageHistory)) {\n    config.initialMessages = [...messageHistory];\n  } else if (typeof messageHistory === 'string' && Boolean(messageHistory)) {\n    if (!runInitialMessagesWithHistory) {\n      config.initialMessages = [];\n    }\n  }\n\n  const [state, setState] = React.useState({\n    messages: [...config.initialMessages],\n    ...initialState\n  });\n  const messagesRef = React.useRef(state.messages);\n  const stateRef = React.useRef();\n  useEffect(() => {\n    messagesRef.current = state.messages;\n  });\n  useEffect(() => {\n    if (messageHistory && Array.isArray(messageHistory)) {\n      setState(prevState => ({ ...prevState,\n        messages: messageHistory\n      }));\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      if (saveMessages && typeof saveMessages === 'function') {\n        var _messageContainerRef$;\n\n        const HTML = messageContainerRef === null || messageContainerRef === void 0 ? void 0 : (_messageContainerRef$ = messageContainerRef.current) === null || _messageContainerRef$ === void 0 ? void 0 : _messageContainerRef$.innerHTML.toString();\n        if (!messageContainerRef.current) return;\n        saveMessages(messagesRef.current, HTML);\n      }\n    };\n  }, [messageContainerRef.current]);\n  useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n  let actionProv;\n  let widgetRegistry;\n  let messagePars;\n  let widgets;\n  const ActionProvider = actionProvider;\n  const MessageParser = messageParser;\n\n  if (isConstructor(ActionProvider) && isConstructor(MessageParser)) {\n    actionProv = new actionProvider(createChatBotMessage, setState, createClientMessage, stateRef.current, createCustomMessage, rest);\n    widgetRegistry = new WidgetRegistry(setState, actionProv);\n    messagePars = new messageParser(actionProv, stateRef.current);\n    widgets = getWidgets(config);\n    widgets.forEach(widget => {\n      var _widgetRegistry;\n\n      return (_widgetRegistry = widgetRegistry) === null || _widgetRegistry === void 0 ? void 0 : _widgetRegistry.addWidget(widget, rest);\n    });\n  } else {\n    actionProv = actionProvider;\n    messagePars = messageParser;\n    widgetRegistry = new WidgetRegistry(setState, null);\n    widgets = getWidgets(config);\n    widgets.forEach(widget => {\n      var _widgetRegistry2;\n\n      return (_widgetRegistry2 = widgetRegistry) === null || _widgetRegistry2 === void 0 ? void 0 : _widgetRegistry2.addWidget(widget, rest);\n    });\n  }\n\n  return {\n    widgetRegistry,\n    actionProv,\n    messagePars,\n    configurationError,\n    invalidPropsError,\n    state,\n    setState,\n    setMessageContainerRef,\n    ActionProvider,\n    MessageParser\n  };\n};\n\n_s(useChatbot, \"XBxnoNBw0ESWe5SsX3LOeQo13Is=\");\n\nexport default useChatbot;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/ChatbotClone/react-chatbot-kit-master/src/hooks/useChatbot.ts"],"names":["React","useState","useEffect","createClientMessage","createChatBotMessage","createCustomMessage","getInitialState","getWidgets","isConstructor","validateProps","WidgetRegistry","useChatbot","config","actionProvider","messageParser","messageHistory","runInitialMessagesWithHistory","saveMessages","rest","configurationError","invalidPropsError","propsErrors","length","reduce","prev","cur","messageContainerRef","setMessageContainerRef","initialState","Array","isArray","initialMessages","Boolean","state","setState","messages","messagesRef","useRef","stateRef","current","prevState","HTML","innerHTML","toString","actionProv","widgetRegistry","messagePars","widgets","ActionProvider","MessageParser","forEach","widget","addWidget"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport {\n  createClientMessage,\n  createChatBotMessage,\n  createCustomMessage,\n} from '../components/Chat/chatUtils';\nimport {\n  getCustomStyles,\n  getInitialState,\n  getWidgets,\n  isConstructor,\n  validateProps,\n} from '../components/Chatbot/utils';\nimport WidgetRegistry from '../components/WidgetRegistry/WidgetRegistry';\nimport IConfig from '../interfaces/IConfig';\nimport { IMessage } from '../interfaces/IMessages';\nimport IWidget from '../interfaces/IWidget';\n\ninterface IUseChatbotParams {\n  config: IConfig | null;\n  actionProvider: any;\n  messageParser: any;\n  messageHistory: IMessage[] | string;\n  saveMessages: (messages: IMessage[], html: string) => any | null;\n  runInitialMessagesWithHistory?: Boolean;\n}\n\nconst useChatbot = ({\n  config,\n  actionProvider,\n  messageParser,\n  messageHistory,\n  runInitialMessagesWithHistory,\n  saveMessages,\n  ...rest\n}: IUseChatbotParams) => {\n  let configurationError = '';\n  let invalidPropsError = '';\n\n  if (!config || !actionProvider || !messageParser) {\n    configurationError =\n      'I think you forgot to feed me some props. Did you remember to pass a config, a messageparser and an actionprovider?';\n\n    return { configurationError };\n  }\n\n  const propsErrors = validateProps(config, messageParser);\n\n  if (propsErrors.length) {\n    invalidPropsError = propsErrors.reduce((prev, cur) => {\n      prev += cur;\n      return prev;\n    }, '');\n\n    return { invalidPropsError };\n  }\n  const [messageContainerRef, setMessageContainerRef] = useState<any>({});\n\n  const initialState = getInitialState(config);\n\n  if (messageHistory && Array.isArray(messageHistory)) {\n    config.initialMessages = [...messageHistory];\n  } else if (typeof messageHistory === 'string' && Boolean(messageHistory)) {\n    if (!runInitialMessagesWithHistory) {\n      config.initialMessages = [];\n    }\n  }\n\n  const [state, setState] = React.useState({\n    messages: [...config.initialMessages],\n    ...initialState,\n  });\n  const messagesRef = React.useRef(state.messages);\n  const stateRef = React.useRef();\n\n  useEffect(() => {\n    messagesRef.current = state.messages;\n  });\n\n  useEffect(() => {\n    if (messageHistory && Array.isArray(messageHistory)) {\n      setState((prevState: any) => ({\n        ...prevState,\n        messages: messageHistory,\n      }));\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (saveMessages && typeof saveMessages === 'function') {\n        const HTML = messageContainerRef?.current?.innerHTML.toString();\n\n        if (!messageContainerRef.current) return;\n        saveMessages(messagesRef.current, HTML);\n      }\n    };\n  }, [messageContainerRef.current]);\n\n  useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  let actionProv;\n  let widgetRegistry: WidgetRegistry;\n  let messagePars;\n  let widgets;\n\n  const ActionProvider = actionProvider;\n  const MessageParser = messageParser;\n\n  if (isConstructor(ActionProvider) && isConstructor(MessageParser)) {\n    actionProv = new actionProvider(\n      createChatBotMessage,\n      setState,\n      createClientMessage,\n      stateRef.current,\n      createCustomMessage,\n      rest\n    );\n\n    widgetRegistry = new WidgetRegistry(setState, actionProv);\n    messagePars = new messageParser(actionProv, stateRef.current);\n\n    widgets = getWidgets(config);\n    widgets.forEach((widget: IWidget) =>\n      widgetRegistry?.addWidget(widget, rest)\n    );\n  } else {\n    actionProv = actionProvider;\n    messagePars = messageParser;\n    widgetRegistry = new WidgetRegistry(setState, null);\n\n    widgets = getWidgets(config);\n    widgets.forEach((widget: IWidget) =>\n      widgetRegistry?.addWidget(widget, rest)\n    );\n  }\n\n  return {\n    widgetRegistry,\n    actionProv,\n    messagePars,\n    configurationError,\n    invalidPropsError,\n    state,\n    setState,\n    setMessageContainerRef,\n    ActionProvider,\n    MessageParser,\n  };\n};\n\nexport default useChatbot;\n"]},"metadata":{},"sourceType":"module"}