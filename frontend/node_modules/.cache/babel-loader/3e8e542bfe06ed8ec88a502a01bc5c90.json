{"ast":null,"code":"//class which parses through user input in the chatbot\n//'The simplest version is to check for keywords with javascript .includes()'\nimport saveMessages from './Chatbot';\n\nclass MessageParser {\n  //we inject chatbot properties (state) + the actionProvider (chatbot class funcs) into message parser\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n    useEffect(() => {\n      saveMessages(\"this.state\", \"\");\n    }, [this.state.messages]);\n  } //when a user types and hits search‚ parse is called\n\n\n  parse(message) {\n    const lowercase = message.toLowerCase();\n\n    if (lowercase.includes('hello')) {\n      this.actionProvider.greet();\n    }\n\n    if (this.state.DocumentSearch == -1) {\n      //if user doesn't hasn't chosen 'other' or 'doc'\n      if (lowercase.includes('other')) {\n        this.state.howManyQs = 0;\n        this.state.DocumentSearch = 0;\n        this.actionProvider.handleOtherSetup();\n      } else if (lowercase.includes('document')) {\n        this.state.DocumentSearch = 1;\n        this.actionProvider.handleDocSetup();\n      } else {\n        this.actionProvider.handleConfusion();\n      }\n    }\n    /* User is NOT searching for docs */\n    else if (this.state.DocumentSearch == false) {\n      if (this.state.OtherOptions) {\n        if (lowercase.includes('yes')) {\n          this.actionProvider.handleInitialOptions();\n        } else if (lowercase.includes('more')) {\n          this.actionProvider.handleOther(lowercase, 4);\n        } else if (lowercase.includes('no') || lowercase.includes('rephrase')) {\n          this.actionProvider.handleOtherSetup(lowercase);\n        } else {\n          this.actionProvider.handleConfusion();\n        }\n\n        return;\n      }\n\n      if (this.state.howManyQs == 0) {\n        this.actionProvider.handleOther(lowercase, 1);\n      } else {\n        this.actionProvider.handleOther(lowercase, 4);\n      }\n\n      this.state.DocumentSearch = -1;\n    } else {\n      //user is searching for documents\n      this.actionProvider.handleDocuments(lowercase);\n    }\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/MessageParser.js"],"names":["saveMessages","MessageParser","constructor","actionProvider","state","useEffect","messages","parse","message","lowercase","toLowerCase","includes","greet","DocumentSearch","howManyQs","handleOtherSetup","handleDocSetup","handleConfusion","OtherOptions","handleInitialOptions","handleOther","handleDocuments"],"mappings":"AAAA;AACA;AACA,OAAOA,YAAP,MAAyB,WAAzB;;AACA,MAAMC,aAAN,CAAoB;AAClB;AACEC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,KAAjB,EAAwB;AACjC,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACAC,IAAAA,SAAS,CAAC,MAAM;AACdL,MAAAA,YAAY,CAAC,YAAD,EAAe,EAAf,CAAZ;AACD,KAFQ,EAEN,CAAC,KAAKI,KAAL,CAAWE,QAAZ,CAFM,CAAT;AAGD,GARe,CAUhB;;;AACAC,EAAAA,KAAK,CAACC,OAAD,EAAU;AAEb,UAAMC,SAAS,GAAGD,OAAO,CAACE,WAAR,EAAlB;;AAEA,QAAID,SAAS,CAACE,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/B,WAAKR,cAAL,CAAoBS,KAApB;AACD;;AACD,QAAI,KAAKR,KAAL,CAAWS,cAAX,IAA6B,CAAC,CAAlC,EAAoC;AAAE;AACpC,UAAIJ,SAAS,CAACE,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/B,aAAKP,KAAL,CAAWU,SAAX,GAAsB,CAAtB;AACA,aAAKV,KAAL,CAAWS,cAAX,GAA4B,CAA5B;AACA,aAAKV,cAAL,CAAoBY,gBAApB;AACD,OAJD,MAKK,IAAIN,SAAS,CAACE,QAAV,CAAmB,UAAnB,CAAJ,EAAoC;AACvC,aAAKP,KAAL,CAAWS,cAAX,GAA4B,CAA5B;AACA,aAAKV,cAAL,CAAoBa,cAApB;AACD,OAHI,MAIA;AACH,aAAKb,cAAL,CAAoBc,eAApB;AACD;AACF;AACD;AAdA,SAeK,IAAI,KAAKb,KAAL,CAAWS,cAAX,IAA6B,KAAjC,EAAuC;AAC1C,UAAI,KAAKT,KAAL,CAAWc,YAAf,EAA6B;AAC3B,YAAIT,SAAS,CAACE,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC7B,eAAKR,cAAL,CAAoBgB,oBAApB;AACD,SAFD,MAGK,IAAIV,SAAS,CAACE,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AACnC,eAAKR,cAAL,CAAoBiB,WAApB,CAAgCX,SAAhC,EAA0C,CAA1C;AACD,SAFI,MAGA,IAAIA,SAAS,CAACE,QAAV,CAAmB,IAAnB,KAA4BF,SAAS,CAACE,QAAV,CAAmB,UAAnB,CAAhC,EAAiE;AACpE,eAAKR,cAAL,CAAoBY,gBAApB,CAAqCN,SAArC;AACD,SAFI,MAGA;AACH,eAAKN,cAAL,CAAoBc,eAApB;AACD;;AACD;AACD;;AACD,UAAI,KAAKb,KAAL,CAAWU,SAAX,IAAwB,CAA5B,EAA+B;AAC7B,aAAKX,cAAL,CAAoBiB,WAApB,CAAgCX,SAAhC,EAA0C,CAA1C;AACD,OAFD,MAGK;AACH,aAAKN,cAAL,CAAoBiB,WAApB,CAAgCX,SAAhC,EAA0C,CAA1C;AACD;;AACD,WAAKL,KAAL,CAAWS,cAAX,GAA4B,CAAC,CAA7B;AACD,KAvBI,MAwBA;AAAE;AACL,WAAKV,cAAL,CAAoBkB,eAApB,CAAoCZ,SAApC;AACD;AAEF;;AA7De;;AAkElB,eAAeR,aAAf","sourcesContent":["//class which parses through user input in the chatbot\n//'The simplest version is to check for keywords with javascript .includes()'\nimport saveMessages from './Chatbot'\nclass MessageParser {\n  //we inject chatbot properties (state) + the actionProvider (chatbot class funcs) into message parser\n    constructor(actionProvider, state) {\n      this.actionProvider = actionProvider;\n      this.state = state;\n      useEffect(() => {\n        saveMessages(\"this.state\", \"\")\n      }, [this.state.messages])\n    }\n    \n    //when a user types and hits search‚ parse is called\n    parse(message) {\n      \n      const lowercase = message.toLowerCase()\n\n      if (lowercase.includes('hello')) {\n        this.actionProvider.greet();\n      }\n      if (this.state.DocumentSearch == -1){ //if user doesn't hasn't chosen 'other' or 'doc'\n        if (lowercase.includes('other')) {\n          this.state.howManyQs =0\n          this.state.DocumentSearch = 0\n          this.actionProvider.handleOtherSetup() \n        }\n        else if (lowercase.includes('document')) {\n          this.state.DocumentSearch = 1\n          this.actionProvider.handleDocSetup() \n        }\n        else {\n          this.actionProvider.handleConfusion()\n        }\n      }\n      /* User is NOT searching for docs */\n      else if (this.state.DocumentSearch == false){\n        if (this.state.OtherOptions) {\n          if (lowercase.includes('yes')) {\n            this.actionProvider.handleInitialOptions()\n          }\n          else if (lowercase.includes('more')) {\n            this.actionProvider.handleOther(lowercase,4);\n          }\n          else if (lowercase.includes('no') || lowercase.includes('rephrase') ) {\n            this.actionProvider.handleOtherSetup(lowercase);\n          }\n          else {\n            this.actionProvider.handleConfusion()\n          }\n          return\n        }\n        if (this.state.howManyQs == 0) {\n          this.actionProvider.handleOther(lowercase,1);\n        }\n        else {\n          this.actionProvider.handleOther(lowercase,4);\n        }\n        this.state.DocumentSearch = -1\n      }\n      else { //user is searching for documents\n        this.actionProvider.handleDocuments(lowercase)\n      }\n\n    }\n\n   \n  }\n  \n  export default MessageParser;\n"]},"metadata":{},"sourceType":"module"}