{"ast":null,"code":"import _toConsumableArray from\"/home/lizz/spring2022/dfind/Senior-Design/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/lizz/spring2022/dfind/Senior-Design/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/lizz/spring2022/dfind/Senior-Design/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import Other from'./OtherQandA/Other';import MoreOptions from'./MoreOptions/MoreOptions';//Action provider contains all the 'functions' of the chatbot\nvar ActionProvider=function ActionProvider(createChatBotMessage,setStateFunc){var _this=this;_classCallCheck(this,ActionProvider);this.addMessageToState=function(message){_this.setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{messages:[].concat(_toConsumableArray(prevState.messages),[message])});});};this.handleInitialOptions=function(){_this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{howManyQs:0,InputQuestion:\"\",handleOther:false,DocumentSearch:-1});});_this.addMessageToState(_this.createChatBotMessage(\"What would you like to search next?\",{widget:\"InitialOptions\",delay:1000,loading:true}));};this.greet=function(){var message=_this.createChatBotMessage(\"Hello! :)\");_this.addMessageToState(message);//adds message to ui\n};this.handleConfusion=function(){var message=_this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\",{widget:\"InitialOptions\"});_this.addMessageToState(message);//adds message to ui\n};this.handleDocuments=function(question){_this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{InputQuestion:question,DocumentSearch:true});});//this.setStateRefDocs(true)\nvar message=_this.createChatBotMessage(\"Docs found:\",{widget:\"DocSearch\"});_this.addMessageToState(message);message=_this.createChatBotMessage(\"Type to search for more documents or...\",{widget:\"DocOptions\"});_this.addMessageToState(message);};this.handleExampleQ=function(question,index){//if index is event, it is a document dependent question. otherwise, it is 'other'\nvar tempmessage=\"Let me find the answer to '\"+String(question)+\"'...\";var message=_this.createChatBotMessage(tempmessage);_this.addMessageToState(message);if(index%2==0){_this.handleDocuments(question);}else{_this.handleOther(question,1);}};this.handleOtherSetup=function(){_this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{InputQuestion:\"\",OtherOptions:false,DocumentSearch:false,howManyQs:0});});var message=_this.createChatBotMessage(\"What would you like to know about the claims process?\");_this.addMessageToState(message);};this.handleDocSetup=function(){_this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{InputQuestion:\"\",OtherOptions:false,DocumentSearch:\"setup\",howManyQs:0});});var message=_this.createChatBotMessage(\"What are you searching for?:\");_this.addMessageToState(message);};this.handleOther=function(question,num){//console.log(\"num:\", num)\nvar message=_this.createChatBotMessage(\"Results found:\",{widget:\"Other\"});_this.addMessageToState(message);//if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\nvar otherWidget=\"MoreOptions\";if(!num){num=4;// otherWidget = \"MoreResults\" *not sure about this chief*\n}_this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{OtherOptions:true,InputQuestion:question,howManyQs:num});});message=_this.createChatBotMessage(\"Have I answered your question?\",{widget:otherWidget});_this.addMessageToState(message);};this.createChatBotMessage=createChatBotMessage;this.setState=setStateFunc;//this.stateRef = {docs:false};\n}//adds message to list of chatbot messages. used in all subsequent funcs\n/*getStateRefDocs = () => {\n    return //this.stateRef.docs\n  }\n  setStateRefDocs = (bool) => {\n    //this.stateRef.docs = bool\n  }*/;export default ActionProvider;","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/ActionProvider.js"],"names":["Other","MoreOptions","ActionProvider","createChatBotMessage","setStateFunc","addMessageToState","message","setState","prevState","messages","handleInitialOptions","state","howManyQs","InputQuestion","handleOther","DocumentSearch","widget","delay","loading","greet","handleConfusion","handleDocuments","question","handleExampleQ","index","tempmessage","String","handleOtherSetup","OtherOptions","handleDocSetup","num","otherWidget"],"mappings":"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","sourcesContent":["import Other from './OtherQandA/Other' \nimport MoreOptions from './MoreOptions/MoreOptions';\n//Action provider contains all the 'functions' of the chatbot\nclass ActionProvider {\n  constructor(\n    createChatBotMessage,\n    setStateFunc\n  ) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState  = setStateFunc;\n    //this.stateRef = {docs:false};\n  }\n  //adds message to list of chatbot messages. used in all subsequent funcs\n  /*getStateRefDocs = () => {\n    return //this.stateRef.docs\n  }\n  setStateRefDocs = (bool) => {\n    //this.stateRef.docs = bool\n  }*/\n  addMessageToState = (message) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      messages: [...prevState.messages,message],\n    }));\n  };\n  //this shows the initial buttons we see \n  handleInitialOptions = () => {\n    this.setState((state) => ({\n      ...state,\n      howManyQs:0,\n      InputQuestion: \"\",\n      handleOther:false,\n      DocumentSearch:-1\n    }))\n    this.addMessageToState(this.createChatBotMessage(\n      `What would you like to search next?`, {\n        widget:\"InitialOptions\",\n        delay:1000,\n        loading:true\n      }\n    ))\n  }\n  //function for being nice!\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello! :)\")\n    this.addMessageToState(message) //adds message to ui\n  }\n  \n  handleConfusion = () => {\n    const message = this.createChatBotMessage(\"Sorry, i did not catch that. Could you rephrase?\", \n    {widget:\"InitialOptions\"})\n    \n    this.addMessageToState(message) //adds message to ui\n  }\n  //function to fetch docs\n  handleDocuments = (question) => {\n     this.setState((state) => ({\n      ...state,\n      InputQuestion:question,\n      DocumentSearch:true\n     }))\n    //this.setStateRefDocs(true)\n    var message = this.createChatBotMessage(\"Docs found:\",{ widget:\"DocSearch\"})\n    this.addMessageToState(message)\n    message =  this.createChatBotMessage(\"Type to search for more documents or...\" , { widget:\"DocOptions\" })\n    this.addMessageToState(message)\n    \n  }\n  //function to send example quesiton to chatbot\n  handleExampleQ = (question, index) => {\n    //if index is event, it is a document dependent question. otherwise, it is 'other'\n    const tempmessage = \"Let me find the answer to '\" + String(question) + \"'...\"\n    const message =  this.createChatBotMessage(tempmessage)\n    this.addMessageToState(message)\n    if (index % 2 == 0) {\n      this.handleDocuments(question)\n    }\n    else {\n      this.handleOther(question,1)\n    }\n    \n    \n  }\n\n  //function to setup 'other q and a' questions\n  handleOtherSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:false,\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What would you like to know about the claims process?\")\n    this.addMessageToState(message)\n  }\n\n  //Prefaces Document Search\n  handleDocSetup = () => {\n    this.setState((state) => ({\n      ...state,\n      InputQuestion: \"\",\n      OtherOptions:false,\n      DocumentSearch:\"setup\",\n      howManyQs:0\n    }))\n    const message = this.createChatBotMessage(\"What are you searching for?:\")\n    this.addMessageToState(message)\n  }\n\n  //function to fetch 'other q and a' questions based on user's query\n  handleOther = (question,num) => {\n    //console.log(\"num:\", num)\n    var message = this.createChatBotMessage(\"Results found:\",{ widget:\"Other\"})\n    this.addMessageToState(message)\n    //if handleOther is being called from a widgetâ€š it means the 'see more results' button was chosen.\n    var otherWidget  = \"MoreOptions\"\n    if (!num) {\n      num = 4\n     // otherWidget = \"MoreResults\" *not sure about this chief*\n    }\n    this.setState((state) => ({\n      ...state,\n      OtherOptions:true,\n      InputQuestion:question,\n      howManyQs:num\n     })\n    )\n    message =  this.createChatBotMessage(\"Have I answered your question?\" , { widget:otherWidget })\n    this.addMessageToState(message)\n  }\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}