{"ast":null,"code":"var _jsxFileName = \"/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js\",\n    _s = $RefreshSig$();\n\nimport { loadDocuments } from '../../../model/actions';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DocSearch = params => {\n  _s();\n\n  const [count, setCount] = React.useState(0);\n  var InputQuestion = params['InputQuestion']; //must call dispatch or else results will stay at zero\n\n  const dispatch = useDispatch();\n  var {\n    docs\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    setCount(docs.length);\n    dispatch(loadDocuments({\n      InputQuestion\n    }));\n  }, []).then(response => console.log(\"response!:\", response));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n      children: [count, \" docs found\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true);\n};\n\n_s(DocSearch, \"uHS++B+FVtyIYDpUqdo+3fuquiw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DocSearch;\nexport default DocSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocSearch\");","map":{"version":3,"sources":["/home/lizz/spring2022/dfind/Senior-Design/frontend/src/components/Chatbot/DocSearch/DocSearch.js"],"names":["loadDocuments","React","useEffect","useDispatch","useSelector","DocSearch","params","count","setCount","useState","InputQuestion","dispatch","docs","state","data","length","then","response","console","log"],"mappings":";;;AAAA,SAASA,aAAT,QAA6B,wBAA7B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA;AACA;;;;;AACA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAAA;;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,QAAN,CAAe,CAAf,CAA1B;AACA,MAAIC,aAAa,GAAGJ,MAAM,CAAC,eAAD,CAA1B,CAF0B,CAG1B;;AACA,QAAMK,QAAQ,GAAGR,WAAW,EAA5B;AACA,MAAI;AAACS,IAAAA;AAAD,MAASR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ,CAACI,IAAI,CAACG,MAAN,CAAR;AACAJ,IAAAA,QAAQ,CAACX,aAAa,CAAC;AAACU,MAAAA;AAAD,KAAD,CAAd,CAAR;AAEH,GAJQ,EAIN,EAJM,CAAT,CAIOM,IAJP,CAIYC,QAAQ,IAAIC,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBF,QAAzB,CAJxB;AAKA,sBAAS;AAAA,iCAAG;AAAA,iBAAIV,KAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA,kBAAT;AACH,CAbD;;GAAMF,S;UAIeF,W,EACJC,W;;;KALXC,S;AAgBN,eAAeA,SAAf","sourcesContent":["import { loadDocuments} from '../../../model/actions';\nimport React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n/* React Widget (text) which appears when a user has asked a question independent of docs. \n   Presents # of results within the Chatbot */\nconst DocSearch = (params) => {\n    const [count, setCount] = React.useState(0);\n    var InputQuestion = params['InputQuestion']\n    //must call dispatch or else results will stay at zero\n    const dispatch = useDispatch();\n    var {docs} = useSelector(state => state.data)\n    \n    useEffect(() => {\n        setCount(docs.length)\n        dispatch(loadDocuments({InputQuestion}));\n        \n    }, []).then(response => console.log(\"response!:\",response))\n    return ( <> <b>{count} docs found</b> </> )\n}\n\n\nexport default DocSearch;\n"]},"metadata":{},"sourceType":"module"}